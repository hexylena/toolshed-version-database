{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/rnateam/mafft/rbc_mafft/7.526+galaxy0", "name": "MAFFT", "version": "7.526+galaxy0", "description": "Multiple alignment program for amino acid or nucleotide sequences", "labels": [], "edam_operations": [], "edam_topics": [], "hidden": "", "is_workflow_compatible": true, "xrefs": [{"value": "MAFFT", "reftype": "bio.tools"}], "tool_shed_repository": {"name": "mafft", "owner": "rnateam", "changeset_revision": "8e649f27aa0d", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "Conditional", "name": "input", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "implicit", "inputs": [{"model_class": "Repeat", "name": "batches", "type": "repeat", "title": "Input batch", "help": null, "default": 1, "min": 1, "max": "__Infinity__", "inputs": [{"model_class": "DataToolParameter", "name": "inputs", "argument": null, "type": "data", "label": "Sequences to align", "help": "Amino acid or nucleotide sequences in FASTA format. Add Dataset for concatenation of every additional dataset with each file of the first upload panel", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}]}, {"model_class": "ConditionalWhen", "value": "merge", "inputs": [{"model_class": "Repeat", "name": "batches", "type": "repeat", "title": "Input batch", "help": null, "default": 1, "min": 1, "max": "__Infinity__", "inputs": [{"model_class": "DataToolParameter", "name": "inputs", "argument": null, "type": "data", "label": "Sequences to align", "help": "Amino acid or nucleotide sequences in FASTA format.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": true, "min": null, "max": null, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}]}], "test_param": {"model_class": "SelectToolParameter", "name": "mapping", "argument": null, "type": "select", "label": "For multiple inputs generate", "help": "All you have is a single dataset with the sequences to align? You can skip this help text and continue with the default setting. For multiple input datasets, the first mode will launch separate MAFFT jobs for all sequences from the first, second, ..., n-th dataset/element from each input batch, respectively, resulting in n separate MSAs. The second mode will concatenate all input sequences from all inputs for a single run of MAFFT and will generate a single MSA.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "implicit", "options": [["one or several MSAs depending on input structure", "implicit", false], ["a single MSA of all sequences from all inputs", "merge", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "datatype_selection", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "", "inputs": []}, {"model_class": "ConditionalWhen", "value": "--nuc", "inputs": [{"model_class": "Conditional", "name": "scoring_matrix", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "--kimura", "inputs": [{"model_class": "IntegerToolParameter", "name": "coefficient", "argument": "--kimura", "type": "integer", "label": "PAM value of the matrix", "help": "", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "200", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "type", "argument": null, "type": "select", "label": "Type of scoring matrix", "help": "See the tool help below for details about the available options.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "--kimura", "options": [["Kimura", "--kimura", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "BooleanToolParameter", "name": "fmodel", "argument": "--fmodel", "type": "boolean", "label": "Incorporate the AA/nuc composition into the scoring matrix?", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--fmodel", "falsevalue": ""}, {"model_class": "Conditional", "name": "gap_costs", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": []}, {"model_class": "ConditionalWhen", "value": "no", "inputs": [{"model_class": "FloatToolParameter", "name": "ep", "argument": "--ep", "type": "float", "label": "Gap extension penalty for group-to-group alignment", "help": "Offset value, which works like gap extension penalty, for group-to-group alignment.", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.0", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "op", "argument": "--op", "type": "float", "label": "Gap opening penalty at group-to-group alignment.", "help": "1.53 default value", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1.53", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "use_defaults", "argument": null, "type": "select", "label": "Configure gap costs", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "yes", "options": [["Use default values", "yes", false], ["Set values", "no", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "--amino", "inputs": [{"model_class": "Conditional", "name": "scoring_matrix", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "--bl", "inputs": [{"model_class": "SelectToolParameter", "name": "coefficient", "argument": "--bl", "type": "select", "label": "Coefficient of the BLOSUM matrix", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "62", "options": [["30", "30", false], ["45", "45", false], ["62", "62", true], ["80", "80", false]], "display": "radio", "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "--jtt", "inputs": [{"model_class": "IntegerToolParameter", "name": "coefficient", "argument": "--jtt", "type": "integer", "label": "PAM value of the matrix", "help": "", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "200", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "--tm", "inputs": [{"model_class": "IntegerToolParameter", "name": "coefficient", "argument": "--tm", "type": "integer", "label": "PAM value of the matrix", "help": "", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "200", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "custom", "inputs": [{"model_class": "DataToolParameter", "name": "aamatrix", "argument": "--aamatrix", "type": "data", "label": "User-defined AA scoring matrix", "help": "The expected format of the matrix is the same as that used by BLAST.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["txt"], "edam": {"edam_formats": ["format_2330"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}], "test_param": {"model_class": "SelectToolParameter", "name": "type", "argument": null, "type": "select", "label": "Type of scoring matrix", "help": "See the tool help below for details about the available options.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "--bl", "options": [["BLOSUM", "--bl", true], ["JTT", "--jtt", false], ["transmembrane protein-optimized JTT", "--tm", false], ["custom matrix", "custom", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "BooleanToolParameter", "name": "fmodel", "argument": "--fmodel", "type": "boolean", "label": "Incorporate the AA/nuc composition into the scoring matrix?", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--fmodel", "falsevalue": ""}, {"model_class": "Conditional", "name": "gap_costs", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": []}, {"model_class": "ConditionalWhen", "value": "no", "inputs": [{"model_class": "FloatToolParameter", "name": "ep", "argument": "--ep", "type": "float", "label": "Gap extension penalty for group-to-group alignment", "help": "Offset value, which works like gap extension penalty, for group-to-group alignment.", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.0", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "op", "argument": "--op", "type": "float", "label": "Gap opening penalty at group-to-group alignment.", "help": "1.53 default value", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1.53", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "use_defaults", "argument": null, "type": "select", "label": "Configure gap costs", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "yes", "options": [["Use default values", "yes", false], ["Set values", "no", false]], "display": null, "multiple": false, "textable": false}}]}], "test_param": {"model_class": "SelectToolParameter", "name": "datatype", "argument": null, "type": "select", "label": "Type of sequences", "help": "The tool can try to detect the type of the input sequences, but you likely want to declare it explicitly. Doing so will also give you control over the scoring matrix used for the alignment, while autodetection will result in the Kimura PAM200 and the BLOSUM62 matrix being used for nucleic acids and protein alignments, respectively.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "options": [["auto-detect", "", false], ["Nucleic acids", "--nuc", false], ["Amino acids", "--amino", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "flavour", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "mafft --auto", "inputs": []}, {"model_class": "ConditionalWhen", "value": "mafft-fftns --retree 1", "inputs": []}, {"model_class": "ConditionalWhen", "value": "mafft-fftns", "inputs": []}, {"model_class": "ConditionalWhen", "value": "mafft-nwns", "inputs": []}, {"model_class": "ConditionalWhen", "value": "mafft --retree 1 --maxiterate 0 --nofft --parttree", "inputs": []}, {"model_class": "ConditionalWhen", "value": "mafft --maxiterate 0 --globalpair", "inputs": [{"model_class": "Section", "name": "treat_unrelated_segments", "type": "section", "title": "Handling of unrelated segments in global alignments", "help": null, "expanded": true, "inputs": [{"model_class": "FloatToolParameter", "name": "unalignlevel", "argument": "--unalignlevel", "type": "float", "label": "Over-alignment correction factor", "help": "The higher this factor the more likely will unrelated sequence stretches in globally related sequences be left unaligned. The default of 0 turns over-alignment correction off, turning it on increases run time.", "refresh_on_change": false, "min": 0.0, "max": 0.8, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.0", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "leavegappyregion", "argument": "--leavegappyregion", "type": "boolean", "label": "Leave gappy region", "help": "Older option for preventing over-alignment by not trying to force gap-rich regions into an alignment. Can be used alone or in combination with the over-alignment correction factor, but has a much higher impact on run time and becomes less effective with more sequences. Not recommended for > ~1000 sequences.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--leavegappyregion", "falsevalue": ""}]}]}, {"model_class": "ConditionalWhen", "value": "mafft-fftnsi", "inputs": []}, {"model_class": "ConditionalWhen", "value": "mafft-nwnsi", "inputs": []}, {"model_class": "ConditionalWhen", "value": "mafft-einsi", "inputs": []}, {"model_class": "ConditionalWhen", "value": "mafft-linsi", "inputs": []}, {"model_class": "ConditionalWhen", "value": "mafft-ginsi", "inputs": [{"model_class": "Section", "name": "treat_unrelated_segments", "type": "section", "title": "Handling of unrelated segments in global alignments", "help": null, "expanded": true, "inputs": [{"model_class": "FloatToolParameter", "name": "unalignlevel", "argument": "--unalignlevel", "type": "float", "label": "Over-alignment correction factor", "help": "The higher this factor the more likely will unrelated sequence stretches in globally related sequences be left unaligned. The default of 0 turns over-alignment correction off, turning it on increases run time.", "refresh_on_change": false, "min": 0.0, "max": 0.8, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.0", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "leavegappyregion", "argument": "--leavegappyregion", "type": "boolean", "label": "Leave gappy region", "help": "Older option for preventing over-alignment by not trying to force gap-rich regions into an alignment. Can be used alone or in combination with the over-alignment correction factor, but has a much higher impact on run time and becomes less effective with more sequences. Not recommended for > ~1000 sequences.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--leavegappyregion", "falsevalue": ""}]}]}, {"model_class": "ConditionalWhen", "value": "custom", "inputs": [{"model_class": "Conditional", "name": "guidetree", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "original", "inputs": [{"model_class": "Conditional", "name": "dist_flavour", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "--6merpair", "inputs": [{"model_class": "IntegerToolParameter", "name": "retree", "argument": "--retree", "type": "integer", "label": "Guide tree is build this number of times in the progressive stage.", "help": "", "refresh_on_change": false, "min": 1, "max": 3, "optional": false, "hidden": false, "is_dynamic": false, "value": "2", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "--globalpair", "inputs": [{"model_class": "Section", "name": "treat_unrelated_segments", "type": "section", "title": "Handling of unrelated segments in global alignments", "help": null, "expanded": true, "inputs": [{"model_class": "FloatToolParameter", "name": "unalignlevel", "argument": "--unalignlevel", "type": "float", "label": "Over-alignment correction factor", "help": "The higher this factor the more likely will unrelated sequence stretches in globally related sequences be left unaligned. The default of 0 turns over-alignment correction off, turning it on increases run time.", "refresh_on_change": false, "min": 0.0, "max": 0.8, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.0", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "leavegappyregion", "argument": "--leavegappyregion", "type": "boolean", "label": "Leave gappy region", "help": "Older option for preventing over-alignment by not trying to force gap-rich regions into an alignment. Can be used alone or in combination with the over-alignment correction factor, but has a much higher impact on run time and becomes less effective with more sequences. Not recommended for > ~1000 sequences.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--leavegappyregion", "falsevalue": ""}]}, {"model_class": "FloatToolParameter", "name": "weighti", "argument": "--weighti", "type": "float", "label": "Weighting factor for the consistency term calculated from pairwise alignments.", "help": "", "refresh_on_change": false, "min": 1.0, "max": 100.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "2.7", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "--localpair", "inputs": [{"model_class": "FloatToolParameter", "name": "weighti", "argument": "--weighti", "type": "float", "label": "Weighting factor for the consistency term calculated from pairwise alignments.", "help": "", "refresh_on_change": false, "min": 1.0, "max": 100.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "2.7", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "lop", "argument": "--lop", "type": "float", "label": "Gap opening penalty at local pairwise alignment", "help": "-2.00 default value", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-2.0", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "lep", "argument": "--lep", "type": "float", "label": "Offset value at local pairwise alignment", "help": "0.1 default value", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.1", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "lexp", "argument": "--lexp", "type": "float", "label": "Gap extension penalty at local pairwise alignment.", "help": "-0.1 default value", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-0.1", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "--genafpair", "inputs": [{"model_class": "FloatToolParameter", "name": "weighti", "argument": "--weighti", "type": "float", "label": "Weighting factor for the consistency term calculated from pairwise alignments.", "help": "", "refresh_on_change": false, "min": 1.0, "max": 100.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "2.7", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "lop", "argument": "--lop", "type": "float", "label": "Gap opening penalty at local pairwise alignment", "help": "-2.00 default value", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-2.0", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "lep", "argument": "--lep", "type": "float", "label": "Offset value at local pairwise alignment", "help": "0.1 default value", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.1", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "lexp", "argument": "--lexp", "type": "float", "label": "Gap extension penalty at local pairwise alignment.", "help": "-0.1 default value", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-0.1", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "LOP", "argument": "--LOP", "type": "float", "label": "Gap opening penalty to skip the alignment", "help": "-6.00 default value", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-6.0", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "LEXP", "argument": "--LEXP", "type": "float", "label": "Gap extension penalty to skip the alignment", "help": "0 default value", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.0", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "--fastapair", "inputs": [{"model_class": "FloatToolParameter", "name": "weighti", "argument": "--weighti", "type": "float", "label": "Weighting factor for the consistency term calculated from pairwise alignments.", "help": "", "refresh_on_change": false, "min": 1.0, "max": 100.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "2.7", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "distance_method", "argument": null, "type": "select", "label": "Distance method", "help": "Distance method must be chosen regarding your data", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "--6merpair", "options": [["Shared 6mers distance (fastest) (--6merpair)", "--6merpair", true], ["Global alignment (Needleman-Wunsch) (--globalpair)", "--globalpair", false], ["Local alignment (Smith-Waterman) (--localpair)", "--localpair", false], ["Local, affine gap cost (--genafpair)", "--genafpair", false], ["All pairwise alignments are computed with FASTA (--fastapair)", "--fastapair", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "parttree", "inputs": [{"model_class": "Conditional", "name": "parttree_selection", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "--parttree", "inputs": [{"model_class": "IntegerToolParameter", "name": "retree", "argument": "--retree", "type": "integer", "label": "Guide tree is built this number of times in the progressive stage.", "help": "", "refresh_on_change": false, "min": 1, "max": 3, "optional": false, "hidden": false, "is_dynamic": false, "value": "2", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "partsize", "argument": "--partsize", "type": "integer", "label": "Number of partitions in the PartTree algorithm.", "help": "", "refresh_on_change": false, "min": 0, "max": 1000, "optional": false, "hidden": false, "is_dynamic": false, "value": "50", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "groupsize", "argument": "--groupsize", "type": "integer", "label": "Group size", "help": "Do not make alignment larger than this number of sequences. The default of -1 means set the value automatically to the number of input sequences.", "refresh_on_change": false, "min": -1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-1", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "--fastaparttree", "inputs": [{"model_class": "IntegerToolParameter", "name": "retree", "argument": "--retree", "type": "integer", "label": "Guide tree is built this number of times in the progressive stage.", "help": "", "refresh_on_change": false, "min": 1, "max": 3, "optional": false, "hidden": false, "is_dynamic": false, "value": "2", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "partsize", "argument": "--partsize", "type": "integer", "label": "Number of partitions in the PartTree algorithm.", "help": "", "refresh_on_change": false, "min": 0, "max": 1000, "optional": false, "hidden": false, "is_dynamic": false, "value": "50", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "groupsize", "argument": "--groupsize", "type": "integer", "label": "Group size", "help": "Do not make alignment larger than this number of sequences. The default of -1 means set the value automatically to the number of input sequences.", "refresh_on_change": false, "min": -1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-1", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "--dpparttree", "inputs": [{"model_class": "IntegerToolParameter", "name": "retree", "argument": "--retree", "type": "integer", "label": "Guide tree is built this number of times in the progressive stage.", "help": "", "refresh_on_change": false, "min": 1, "max": 3, "optional": false, "hidden": false, "is_dynamic": false, "value": "2", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "partsize", "argument": "--partsize", "type": "integer", "label": "Number of partitions in the PartTree algorithm.", "help": "", "refresh_on_change": false, "min": 0, "max": 1000, "optional": false, "hidden": false, "is_dynamic": false, "value": "50", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "groupsize", "argument": "--groupsize", "type": "integer", "label": "Group size", "help": "Do not make alignment larger than this number of sequences. The default of -1 means set the value automatically to the number of input sequences.", "refresh_on_change": false, "min": -1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-1", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "parttree_option", "argument": null, "type": "select", "label": "Which distance for the fast tree-building method?", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "--parttree", "options": [["Fast tree-building method with the 6mer distance (--parttree)", "--parttree", true], ["Distances based on FASTA (--fastaparttree)", "--fastaparttree", false], ["Distances based on DP. (Needleman-Wunsch) (--dpparttree)", "--dpparttree", false]], "display": null, "multiple": false, "textable": false}}]}], "test_param": {"model_class": "SelectToolParameter", "name": "guidetree_generation", "argument": null, "type": "select", "label": "GuideTree-Generation", "help": "Parttree is recommended for a large number (> ~10,000) of sequences as input", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "original", "options": [["Original guidetree building method of MAFFT", "original", false], ["Fast guidetree building method with PartTree-algorithm", "parttree", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Section", "name": "progressive_alignment_calculation", "type": "section", "title": "Progressive alignment calculation", "help": null, "expanded": true, "inputs": [{"model_class": "IntegerToolParameter", "name": "maxiterate", "argument": "--maxiterate", "type": "integer", "label": "Maximum number of iterations", "help": "1000 for maximum quality", "refresh_on_change": false, "min": 0, "max": 1000, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "fft", "argument": "--fft", "type": "boolean", "label": "Use FFT approximation in group-to-group alignment?", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": true, "truevalue": "--fft", "falsevalue": "--nofft"}, {"model_class": "BooleanToolParameter", "name": "noscore", "argument": "--noscore", "type": "boolean", "label": "Check alignment score in the iterative refinement stage?", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": true, "truevalue": "", "falsevalue": "--noscore"}]}]}], "test_param": {"model_class": "SelectToolParameter", "name": "type", "argument": null, "type": "select", "label": "MAFFT flavour", "help": "Run mafft with pre-defined input parameters. Specification of these parameters can be found in the help section. With 'Auto', the tool automatically selects an appropriate strategy from L-INS-i, FFT-NS-i and FFT-NS-2, according to data size from few to many respectively. Default setting: FFT-NS-2.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "mafft-fftns", "options": [["Auto", "mafft --auto", false], ["FFT-NS-1 (very fast, progressive method; use for >2,000 sequences)", "mafft-fftns --retree 1", false], ["FFT-NS-2 (fast, progressive method)", "mafft-fftns", true], ["NW-NS-2 (fast, progressive method without FFT approximation)", "mafft-nwns", false], ["NW-NS-PartTree-1 (very fast, progressive method using the PartTree algorithm; for ~10,000 to ~50,000 sequences)", "mafft --retree 1 --maxiterate 0 --nofft --parttree", false], ["G-INS-1 (slow, progressive method with an accurate guide tree)", "mafft --maxiterate 0 --globalpair", false], ["FFT-NS-i (slow, iterative refinement method)", "mafft-fftnsi", false], ["NW-NS-i (slow, iterative refinement method without FFT approximation)", "mafft-nwnsi", false], ["E-INS-i (very slow; use for <200 sequences with multiple conserved domains and long gaps)", "mafft-einsi", false], ["L-INS-i (very slow; use for <200 sequences with one conserved domain and long gaps)", "mafft-linsi", false], ["G-INS-i (very slow; recommended for <200 sequences with global homology)", "mafft-ginsi", false], ["Custom Parameters", "custom", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "BooleanToolParameter", "name": "reorder", "argument": "--reorder", "type": "boolean", "label": "Reorder output?", "help": "Default order is input order.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--reorder", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "treeout", "argument": "--treeout", "type": "boolean", "label": "Keep alignment tree as output?", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--treeout", "falsevalue": ""}, {"model_class": "SelectToolParameter", "name": "outputFormat", "argument": null, "type": "select", "label": "Output format", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "options": [["FASTA", "", true], ["ClustalW", "--clustalout", false], ["Phylip", "--phylipout", false]], "display": null, "multiple": false, "textable": false}], "outputs": [{"model_class": "ToolOutput", "name": "outputAlignment", "format": "fasta", "label": "${tool.name} on ${on_string}", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_1929", "edam_data": "data_2044", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "outputTree", "format": "txt", "label": "${tool.name} Guide Tree", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}], "panel_section_id": "multiple_alignments", "panel_section_name": "Multiple Alignments", "form_style": "regular"}