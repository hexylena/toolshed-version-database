{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_filter/scanpy_filter/1.10.2+galaxy2", "name": "Scanpy filter", "version": "1.10.2+galaxy2", "description": "mark and subsample", "labels": [], "edam_operations": ["operation_3223"], "edam_topics": ["topic_0203", "topic_3053", "topic_2229"], "hidden": "", "is_workflow_compatible": true, "xrefs": [{"value": "scanpy", "reftype": "bio.tools"}], "tool_shed_repository": {"name": "scanpy_filter", "owner": "iuc", "changeset_revision": "64388be6d510", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "DataToolParameter", "name": "adata", "argument": null, "type": "data", "label": "Annotated data matrix", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["h5ad"], "edam": {"edam_formats": ["format_3590"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "Conditional", "name": "method", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "pp.filter_cells", "inputs": [{"model_class": "Conditional", "name": "filter", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "min_counts", "inputs": [{"model_class": "IntegerToolParameter", "name": "min_counts", "argument": "min_counts", "type": "integer", "label": "Minimum number of counts required for a cell to pass filtering", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "max_counts", "inputs": [{"model_class": "IntegerToolParameter", "name": "max_counts", "argument": "max_counts", "type": "integer", "label": "Maximum number of counts required for a cell to pass filtering", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "min_genes", "inputs": [{"model_class": "IntegerToolParameter", "name": "min_genes", "argument": "min_genes", "type": "integer", "label": "Minimum number of genes expressed required for a cell to pass filtering", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "max_genes", "inputs": [{"model_class": "IntegerToolParameter", "name": "max_genes", "argument": "max_genes", "type": "integer", "label": "Maximum number of genes expressed required for a cell to pass filtering", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "filter", "argument": "filter", "type": "select", "label": "Filter", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "min_counts", "options": [["Minimum number of counts", "min_counts", true], ["Maximum number of counts", "max_counts", false], ["Minimum number of genes expressed", "min_genes", false], ["Maximum number of genes expressed", "max_genes", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "pp.filter_genes", "inputs": [{"model_class": "Conditional", "name": "filter", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "min_counts", "inputs": [{"model_class": "IntegerToolParameter", "name": "min_counts", "argument": "min_counts", "type": "integer", "label": "Minimum number of counts required for a gene to pass filtering", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "max_counts", "inputs": [{"model_class": "IntegerToolParameter", "name": "max_counts", "argument": "max_counts", "type": "integer", "label": "Maximum number of counts required for a gene to pass filtering", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "min_cells", "inputs": [{"model_class": "IntegerToolParameter", "name": "min_cells", "argument": "min_cells", "type": "integer", "label": "Minimum number of cells expressed required for a gene to pass filtering", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "max_cells", "inputs": [{"model_class": "IntegerToolParameter", "name": "max_cells", "argument": "max_cells", "type": "integer", "label": "Maximum number of cells expressed required for a gene to pass filtering", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "filter", "argument": "filter", "type": "select", "label": "Filter", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "min_counts", "options": [["Minimum number of counts", "min_counts", true], ["Maximum number of counts", "max_counts", false], ["Minimum number of cells expressed", "min_cells", false], ["Maximum number of cells expressed", "max_cells", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "tl.filter_rank_genes_groups", "inputs": [{"model_class": "TextToolParameter", "name": "key", "argument": "key", "type": "text", "label": "Key in adata.uns where the rank_genes_groups output is stored", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "groupby", "argument": "groupby", "type": "text", "label": "The key of the observations grouping to consider", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "use_raw", "argument": "use_raw", "type": "boolean", "label": "Use 'raw' attribute of input if present", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "True", "falsevalue": "False"}, {"model_class": "TextToolParameter", "name": "key_added", "argument": "key_added", "type": "text", "label": "Key that will contain new values", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "rank_genes_groups_filtered", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "min_in_group_fraction", "argument": "min_in_group_fraction", "type": "float", "label": "Minimum fraction of genes expressing the gene within the categories", "help": "", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.25", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "max_out_group_fraction", "argument": "max_out_group_fraction", "type": "float", "label": "Maximum fraction of genes expressing the gene outside the categories", "help": "", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.5", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "min_fold_change", "argument": "min_fold_change", "type": "integer", "label": "Minimum fold change", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "compare_abs", "argument": "compare_abs", "type": "boolean", "label": "If selected, compare absolute values of log fold change with min_fold_change", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "True", "falsevalue": "False"}]}, {"model_class": "ConditionalWhen", "value": "pp.highly_variable_genes", "inputs": [{"model_class": "Conditional", "name": "flavor", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "seurat", "inputs": [{"model_class": "FloatToolParameter", "name": "min_mean", "argument": "min_mean", "type": "float", "label": "Minimal mean cutoff", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.0125", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "max_mean", "argument": "max_mean", "type": "float", "label": "Maximal mean cutoff", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "3.0", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "min_disp", "argument": "min_disp", "type": "float", "label": "Minimal normalized dispersion cutoff", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.5", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "max_disp", "argument": "max_disp", "type": "float", "label": "Maximal normalized dispersion cutoff", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "cell_ranger", "inputs": [{"model_class": "IntegerToolParameter", "name": "n_top_genes", "argument": "n_top_genes", "type": "integer", "label": "Number of highly-variable genes to keep", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "seurat_v3", "inputs": [{"model_class": "IntegerToolParameter", "name": "n_top_genes", "argument": "n_top_genes", "type": "integer", "label": "Number of highly-variable genes to keep", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "span", "argument": "span", "type": "float", "label": "The fraction of the data (cells) used when estimating the variance in the loess model fit", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.3", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "seurat_v3_paper", "inputs": [{"model_class": "IntegerToolParameter", "name": "n_top_genes", "argument": "n_top_genes", "type": "integer", "label": "Number of highly-variable genes to keep", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "flavor", "argument": "flavor", "type": "select", "label": "Choose the flavor for identifying highly variable genes", "help": "Expects logarithmized data, except when flavor='seurat_v3'/'seurat_v3_paper', in which count", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "seurat", "options": [["Seurat", "seurat", true], ["Cell Ranger", "cell_ranger", false], ["Seurat v3", "seurat_v3", false], ["Seurat v3 (paper)", "seurat_v3_paper", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "IntegerToolParameter", "name": "n_bins", "argument": "n_bins", "type": "integer", "label": "Number of bins for binning the mean gene expression", "help": "Normalization is done with respect to each bin. If just a single gene falls into a bin, the normalized dispersion is artificially set to 1", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "20", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "subset", "argument": "subset", "type": "boolean", "label": "Inplace subset to highly-variable genes?", "help": "Otherwise it merely indicates highly variable genes.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "True", "falsevalue": "False"}, {"model_class": "TextToolParameter", "name": "layer", "argument": "layer", "type": "text", "label": "If provided, use adata.layers[layer] for expression values instead of adata.X.", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "batch_key", "argument": "batch_key", "type": "text", "label": "Specify the batch key", "help": "If specified, highly-variable genes are selected within each batch separately and merged.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "pp.subsample", "inputs": [{"model_class": "Conditional", "name": "type", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "fraction", "inputs": [{"model_class": "FloatToolParameter", "name": "fraction", "argument": "fraction", "type": "float", "label": "Subsample to this 'fraction' of the number of observations", "help": "", "refresh_on_change": false, "min": 0.0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "n_obs", "inputs": [{"model_class": "IntegerToolParameter", "name": "n_obs", "argument": "n_obs", "type": "integer", "label": "Subsample to this number of observations", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "type", "argument": null, "type": "select", "label": "Type of subsampling", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "fraction", "options": [["By fraction", "fraction", true], ["By number of observation", "n_obs", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "IntegerToolParameter", "name": "random_state", "argument": "random_state", "type": "integer", "label": "Random seed to change subsampling", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "pp.downsample_counts", "inputs": [{"model_class": "IntegerToolParameter", "name": "counts_per_cell", "argument": "counts_per_cell", "type": "integer", "label": "Target total counts per cell", "help": "If a cell has more than \u2018counts_per_cell\u2019, it will be downsampled to this number. Resulting counts can be specified on a per cell basis by passing an array.", "refresh_on_change": false, "min": 0, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "total_counts", "argument": "total_counts", "type": "integer", "label": "Target total counts", "help": "If the count matrix has more than total_counts it will be downsampled to have this number.", "refresh_on_change": false, "min": 0, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "random_state", "argument": "random_state", "type": "integer", "label": "Random seed to change subsampling", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "replace", "argument": "replace", "type": "boolean", "label": "Sample the counts with replacement?", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "True", "falsevalue": "False"}]}, {"model_class": "ConditionalWhen", "value": "filter_marker", "inputs": [{"model_class": "DataToolParameter", "name": "markerfile", "argument": "markerfile", "type": "data", "label": "List of markers", "help": "This should be a tsv where row = group (e.g. celltypes) and columns = markers.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["tabular"], "edam": {"edam_formats": ["format_3475"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "BooleanToolParameter", "name": "header", "argument": null, "type": "boolean", "label": "Header is included in the list of markers?", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": true, "truevalue": "included", "falsevalue": "not_included"}, {"model_class": "FloatToolParameter", "name": "thresh_mean", "argument": "thresh_mean", "type": "float", "label": "Minimal average count of all cells of a group (e.g., celltype) for a particular marker", "help": "Increasing the threshold will result in a smaller marker set.", "refresh_on_change": false, "min": 0.0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1.0", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "thresh_frac", "argument": "thresh_frac", "type": "float", "label": "Minimal fractions of cells that has a higher count than the average count of all cells of the group for the marker", "help": "Increasing this threshold might remove marker outliers.", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.1", "area": false, "datalist": []}, {"model_class": "Conditional", "name": "layer_selection", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "False", "inputs": [{"model_class": "TextToolParameter", "name": "layer", "argument": "layer", "type": "text", "label": "Key from adata.layers whose value will be used to filter", "help": "If layers specified then use adata.layers[layer].", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "True", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "use_raw", "argument": null, "type": "select", "label": "Use .X of adata to perform the filtering", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "True", "options": [["Yes", "True", true], ["No", "False", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "TextToolParameter", "name": "groupby", "argument": "groupby", "type": "text", "label": "The key of the observation grouping to consider (e.g., celltype)", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "pp.scrublet", "inputs": [{"model_class": "TextToolParameter", "name": "batch_key", "argument": "batch_key", "type": "text", "label": "Batch key for the concatenate", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "sim_doublet_ratio", "argument": "sim_doublet_ratio", "type": "float", "label": "Number of doublets to simulate relative to the number of observed transcriptomes", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "2.0", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "expected_doublet_rate", "argument": "expected_doublet_rate", "type": "float", "label": "The estimated doublet rate for the experiment", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.05", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "stdev_doublet_rate", "argument": "stdev_doublet_rate", "type": "float", "label": "Uncertainty in the expected doublet rate", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.02", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "synthetic_doublet_umi_subsampling", "argument": "synthetic_doublet_umi_subsampling", "type": "float", "label": "Rate for sampling UMIs when creating synthetic doublets", "help": "f 1.0, each doublet is created by simply adding the UMI counts from two randomly sampled observed transcriptomes. For values less than 1, the UMI counts are added and then randomly sampled at the specified rate.", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1.0", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "knn_dist_metric", "argument": null, "type": "select", "label": "Distance metric used when finding nearest neighbors", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "euclidean", "options": [["euclidean", "euclidean", true], ["braycurtis", "braycurtis", false], ["canberra", "canberra", false], ["chebyshev", "chebyshev", false], ["cityblock", "cityblock", false], ["correlation", "correlation", false], ["cosine", "cosine", false], ["mahalanobis", "mahalanobis", false], ["matching", "matching", false], ["minkowski", "minkowski", false], ["seuclidean", "seuclidean", false], ["sqeuclidean", "sqeuclidean", false], ["wminkowski", "wminkowski", false], ["dice", "dice", false], ["hamming", "hamming", false], ["jaccard", "jaccard", false], ["kulsinski", "kulsinski", false], ["rogerstanimoto", "rogerstanimoto", false], ["russellrao", "russellrao", false], ["sokalmichener", "sokalmichener", false], ["sokalsneath", "sokalsneath", false], ["yule", "yule", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "BooleanToolParameter", "name": "normalize_variance", "argument": "normalize_variance", "type": "boolean", "label": "normalize the data such that each gene has a variance of 1", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": true, "truevalue": "True", "falsevalue": "False"}, {"model_class": "BooleanToolParameter", "name": "log_transform", "argument": "log_transform", "type": "boolean", "label": "Whether to use log1p() to log-transform the data prior to PCA", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "True", "falsevalue": "False"}, {"model_class": "BooleanToolParameter", "name": "mean_center", "argument": "mean_center", "type": "boolean", "label": "If True, center the data such that each gene has a mean of 0", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": true, "truevalue": "True", "falsevalue": "False"}, {"model_class": "IntegerToolParameter", "name": "n_prin_comps", "argument": "n_prin_comps", "type": "integer", "label": "Number of principal components used to embed the transcriptomes prior to k-nearest-neighbor graph construction", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "30", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "use_approx_neighbors", "argument": "use_approx_neighbors", "type": "boolean", "label": "Use approximate nearest neighbor method (annoy) for the KNN classifier", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "True", "falsevalue": "None"}, {"model_class": "BooleanToolParameter", "name": "get_doublet_neighbor_parents", "argument": "get_doublet_neighbor_parents", "type": "boolean", "label": "If True, return (in .uns) the parent transcriptomes that generated the doublet neighbors of each observed transcriptome", "help": "This information can be used to infer the cell states that generated a given doublet state.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "True", "falsevalue": "False"}, {"model_class": "IntegerToolParameter", "name": "n_neighbors", "argument": "n_neighbors", "type": "integer", "label": "Number of neighbors used to construct the KNN graph of observed transcriptomes and simulated doublets", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "threshold", "argument": "threshold", "type": "float", "label": "Doublet score threshold for calling a transcriptome a doublet", "help": "If None, this is set automatically", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "random_state", "argument": null, "type": "integer", "label": "Initial state for doublet simulation and nearest neighbors", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "method", "argument": "method", "type": "select", "label": "Method used for filtering", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "pp.filter_cells", "options": [["Filter cell outliers based on counts and numbers of genes expressed, using 'pp.filter_cells'", "pp.filter_cells", false], ["Filter genes based on number of cells or counts, using 'pp.filter_genes'", "pp.filter_genes", false], ["Filters out genes based on fold change and fraction of genes expressing the gene within and outside the groupby categories, using 'tl.filter_rank_genes_groups'", "tl.filter_rank_genes_groups", false], ["Annotate (and filter) highly variable genes, using 'pp.highly_variable_genes'", "pp.highly_variable_genes", false], ["Subsample to a fraction of the number of observations, using 'pp.subsample'", "pp.subsample", false], ["Downsample counts from count matrix, using 'pp.downsample_counts'", "pp.downsample_counts", false], ["Filter markers from count matrix and marker list", "filter_marker", false], ["Predict doublets using 'pp.scrublet'", "pp.scrublet", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Section", "name": "advanced_common", "type": "section", "title": "Advanced Options", "help": null, "expanded": false, "inputs": [{"model_class": "BooleanToolParameter", "name": "show_log", "argument": null, "type": "boolean", "label": "Output Log?", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}]}], "outputs": [{"model_class": "ToolOutput", "name": "anndata_out", "format": "h5ad", "label": "${tool.name} (${method.method}) on ${on_string}: Annotated data matrix", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "anndata.h5ad", "edam_format": "format_3590", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "hidden_output", "format": "txt", "label": "Log file", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "marker_out", "format": "tabular", "label": "${tool.name} on ${on_string}: Markers", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "marker.tsv", "edam_format": "format_3475", "edam_data": "data_0006", "discover_datasets": []}], "panel_section_id": "single-cell", "panel_section_name": "Single-cell", "form_style": "regular"}