{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_normalize/scanpy_normalize/1.9.6+galaxy4", "name": "Normalize", "version": "1.9.6+galaxy4", "description": "and impute with scanpy", "labels": [], "edam_operations": ["operation_3223"], "edam_topics": ["topic_2229", "topic_0203", "topic_3053"], "hidden": "", "is_workflow_compatible": true, "xrefs": [{"value": "scanpy", "reftype": "bio.tools"}], "tool_shed_repository": {"name": "scanpy_normalize", "owner": "iuc", "changeset_revision": "f3ad813a58a3", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "DataToolParameter", "name": "adata", "argument": null, "type": "data", "label": "Annotated data matrix", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["h5ad"], "edam": {"edam_formats": ["format_3590"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "Conditional", "name": "method", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "pp.normalize_total", "inputs": [{"model_class": "FloatToolParameter", "name": "target_sum", "argument": "target_sum", "type": "float", "label": "Target sum", "help": "If not provided, after normalization, each observation (cell) has a total count equal to the median of the total counts (cells) before normalization.", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "Conditional", "name": "exclude_highly_expressed", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "True", "inputs": [{"model_class": "FloatToolParameter", "name": "max_fraction", "argument": "max_fraction", "type": "float", "label": "Target sum", "help": "If not provided, after normalization, each observation (cell) has a total count equal to the median of the total counts (cells) before normalization.", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.05", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "False", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "exclude_highly_expressed", "argument": "exclude_highly_expressed", "type": "select", "label": "Exclude (very) highly expressed genes for the computation of the normalization factor (size factor) for each cell", "help": " A gene is considered highly expressed, if it has more than max_fraction of the total counts in at least one cell. The not-excluded genes will sum up to target_sum", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "False", "options": [["Yes", "True", false], ["No", "False", true]], "display": null, "multiple": false, "textable": false}}, {"model_class": "TextToolParameter", "name": "key_added", "argument": "key_added", "type": "text", "label": "Name of the field in 'adata.obs' where the normalization factor is stored", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "layers", "argument": "layers", "type": "text", "label": "List of layers to normalize", "help": "'All' will normalize all layers. The list should be comma-separated.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "layer_norm", "argument": "layer_norm", "type": "select", "label": "How to normalize layers?", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "None", "options": [["None: after normalization, for each layer in layers each cell has a total count equal to the median of the median of the total counts (cells) before normalization of the layer.", "None", false], ["After: for each layer in layers each cell has a total count equal to target_sum.", "after", false], ["X: for each layer in layers each cell has a total count equal to the median of total counts for observations (cells) of adata.X before normalization.", "X", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "pp.recipe_zheng17", "inputs": [{"model_class": "IntegerToolParameter", "name": "n_top_genes", "argument": "n_top_genes", "type": "integer", "label": "Number of genes to keep", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1000", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "log", "argument": "log", "type": "boolean", "label": "Use the log of the values?", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "True", "falsevalue": "False"}]}, {"model_class": "ConditionalWhen", "value": "pp.recipe_weinreb17", "inputs": [{"model_class": "BooleanToolParameter", "name": "log", "argument": "log", "type": "boolean", "label": "Use the log of the values?", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "True", "falsevalue": "False"}, {"model_class": "FloatToolParameter", "name": "mean_threshold", "argument": "mean_threshold", "type": "float", "label": "Mean threshold", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.01", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "cv_threshold", "argument": "cv_threshold", "type": "float", "label": "CV threshold", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "2.0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "n_pcs", "argument": "n_pcs", "type": "integer", "label": "Number of principal component", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "50", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "svd_solver", "argument": null, "type": "select", "label": "SVD solver to use", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "auto", "options": [["Automatically chosen depending on the size of the problem", "auto", false], ["ARPACK wrapper in SciPy", "arpack", false], ["Randomized algorithm due to Halko (2009)", "randomized", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "IntegerToolParameter", "name": "random_state", "argument": null, "type": "integer", "label": "Initial states for the optimization", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "pp.recipe_seurat", "inputs": [{"model_class": "BooleanToolParameter", "name": "log", "argument": "log", "type": "boolean", "label": "Use the log of the values?", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "True", "falsevalue": "False"}]}, {"model_class": "ConditionalWhen", "value": "external.pp.magic", "inputs": [{"model_class": "SelectToolParameter", "name": "name_list", "argument": null, "type": "select", "label": "Denoised genes to return", "help": "Selecting all genes may require a large amount of memory", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "all_genes", "options": [["All genes", "all_genes", false], ["PCA only", "pca_only", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "IntegerToolParameter", "name": "knn", "argument": "knn", "type": "integer", "label": "Number of nearest neighbors on which to build kernel", "help": "", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "5", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "decay", "argument": "decay", "type": "integer", "label": "Set decay rate of kernel tails", "help": "If not set, alpha decaying kernel is not used", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "1", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "knn_max", "argument": "knn_max", "type": "integer", "label": "Maximum number of nearest neighbors with nonzero connection", "help": "If not set, will be set to 3 * knn", "refresh_on_change": false, "min": 1, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "t", "argument": "t", "type": "integer", "label": "Power to which the diffusion operator is powered. This sets the level of diffusion", "help": "If \u2018-1\u2019, this parameter is selected according to the Procrustes disparity of the diffused data.", "refresh_on_change": false, "min": -1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "3", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "n_pca", "argument": "n_pca", "type": "integer", "label": "Number of principal components to use for calculating neighborhoods", "help": "For extremely large datasets, using n_pca less than 20 allows neighborhoods to be calculated in roughly log(n_samples) time. If not set, no PCA is performed.", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "100", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "solver", "argument": null, "type": "select", "label": "Which solver to use", "help": "Selecting all genes may require a large amount of memory", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "exact", "options": [["\"exact\", the implementation described in van Dijk et al. (2018) ", "exact", false], ["\"approximate\", is faster that performs imputation in the PCA space and then projects back to the gene space", "approximate", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "knn_dist", "argument": null, "type": "select", "label": "Distance metric to use for the data", "help": "See scipy.spatial.distance.pdist documentation for more options https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "euclidean", "options": [["braycurtis", "braycurtis", false], ["canberra", "canberra", false], ["chebyshev", "chebyshev", false], ["cityblock", "cityblock", false], ["correlation", "correlation", false], ["cosine", "cosine", false], ["euclidean", "euclidean", true], ["mahalanobis", "mahalanobis", false], ["matching", "matching", false], ["minkowski", "minkowski", false], ["seuclidean", "seuclidean", false], ["sqeuclidean", "sqeuclidean", false], ["wminkowski", "wminkowski", false], ["dice", "dice", false], ["hamming", "hamming", false], ["jaccard", "jaccard", false], ["kulsinski", "kulsinski", false], ["rogerstanimoto", "rogerstanimoto", false], ["russellrao", "russellrao", false], ["sokalmichener", "sokalmichener", false], ["sokalsneath", "sokalsneath", false], ["yule", "yule", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "IntegerToolParameter", "name": "random_state", "argument": "random_state", "type": "integer", "label": "Random state", "help": "For layouts with random initialization like 'fr', change this to use different intial states for the optimization. If 'None', the initial state is not reproducible.", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "method", "argument": "method", "type": "select", "label": "Method used for normalization", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "pp.normalize_total", "options": [["Normalize counts per cell, using 'pp.normalize_total'", "pp.normalize_total", false], ["Normalization and filtering as of Zheng et al. (2017), using 'pp.recipe_zheng17'", "pp.recipe_zheng17", false], ["Normalization and filtering as of Weinreb et al (2017), using 'pp.recipe_weinreb17'", "pp.recipe_weinreb17", false], ["Normalization and filtering as of Seurat et al (2015), using 'pp.recipe_seurat'", "pp.recipe_seurat", false], ["Denoising using Markov Affinity-based Graph Imputation of Cells (MAGIC) API 'external.pp.magic'", "external.pp.magic", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Section", "name": "advanced_common", "type": "section", "title": "Advanced Options", "help": null, "expanded": false, "inputs": [{"model_class": "BooleanToolParameter", "name": "show_log", "argument": null, "type": "boolean", "label": "Output Log?", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}]}], "outputs": [{"model_class": "ToolOutput", "name": "anndata_out", "format": "h5ad", "label": "${tool.name} (${method.method}) on ${on_string}: Annotated data matrix", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "anndata.h5ad", "edam_format": "format_3590", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "hidden_output", "format": "txt", "label": "Log file", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}], "panel_section_id": "single-cell", "panel_section_name": "Single-cell", "form_style": "regular"}