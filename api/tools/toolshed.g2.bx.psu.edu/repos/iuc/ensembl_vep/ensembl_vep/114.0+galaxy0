{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/iuc/ensembl_vep/ensembl_vep/114.0+galaxy0", "name": "Predict variant effects", "version": "114.0+galaxy0", "description": "with VEP", "labels": [], "edam_operations": [], "edam_topics": [], "hidden": "", "is_workflow_compatible": true, "xrefs": [], "tool_shed_repository": {"name": "ensembl_vep", "owner": "iuc", "changeset_revision": "7572cb1cdd96", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "Conditional", "name": "annotation_cache", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "restricted", "inputs": [{"model_class": "DataToolParameter", "name": "input1", "argument": null, "type": "data", "label": "VCF input file", "help": "", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["vcf"], "edam": {"edam_formats": ["format_3016"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "SelectToolParameter", "name": "cache_file", "argument": null, "type": "select", "label": "Select annotation cache file", "help": "If the annotation data of interest is not listed, have a look at all available cache files regardless of their version number or contact your Galaxy admin.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": null, "options": [], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "unrestricted", "inputs": [{"model_class": "DataToolParameter", "name": "input1", "argument": null, "type": "data", "label": "VCF input file", "help": "", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["vcf"], "edam": {"edam_formats": ["format_3016"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "SelectToolParameter", "name": "cache_file", "argument": null, "type": "select", "label": "Select annotation cache file", "help": "If the annotation data of interest is not listed, contact your Galaxy admin.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": "homo_sapiens_vep_106_GRCh37", "options": [["Homo sapiens hg19 (V106)", "homo_sapiens_vep_106_GRCh37", false], ["Homo sapiens hg38 (V106)", "homo_sapiens_vep_106_GRCh38", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "custom", "inputs": [{"model_class": "DataToolParameter", "name": "input1", "argument": null, "type": "data", "label": "VCF input file", "help": "", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["vcf"], "edam": {"edam_formats": ["format_3016"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "custom_annotation", "argument": null, "type": "data", "label": "Select GFF or GTF annotation file from history", "help": "Choosing this option requires that you also supply a Fasta file as reference genome.", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["gff", "gtf"], "edam": {"edam_formats": ["format_2305", "format_2306"], "edam_data": ["data_1255", "data_1255"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}], "test_param": {"model_class": "SelectToolParameter", "name": "source", "argument": null, "type": "select", "label": "Select source of annotation data", "help": "Ensembl strongly recommends to only use annotation cache files with a version number matching the VEP version. You can disable the corresponding filtering of available cache files at your own risk. This does not apply if you select a GFF/GTF annotation source.", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "restricted", "options": [["VEP cache file with matching version number", "restricted", false], ["Any VEP cache file", "unrestricted", false], ["GFF or GTF from history", "custom", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "ref_seq", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "no_ref", "inputs": []}, {"model_class": "ConditionalWhen", "value": "cached", "inputs": [{"model_class": "SelectToolParameter", "name": "ref", "argument": null, "type": "select", "label": "Select reference sequence", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": "hg19", "options": [["Human (Homo sapiens): hg19", "hg19", false], ["Human (Homo sapiens): hg18 Full", "hg18full", false], ["Mouse (Mus musculus): mm10 Full", "mm10full", false], ["Mouse (Mus musculus): mm9 Full", "mm9full", false], ["Fly (Drosophila melanogaster): dm3 Full", "dm3full", false], ["Fly (Drosophila melanogaster): dm6 Full", "dm6full", false], ["Mouse (Mus Musculus): mm39 Full", "mm39", false], ["Mouse (Mus Musculus): mm39 Full", "mm39", false], ["A. mellifera genome (apiMel3.1 NCBI Amel_HAv3.1)", "apiMel3_1", false], ["Zebrafish Jul. 2010 (Zv9/danRer7) (danRer7)", "danRer7", false], ["Zebrafish Sep. 2014 (GRCz10/danRer10) (danRer10)", "danRer10", false], ["Arabidopsis thaliana (TAIR10)", "TAIR10", false], ["Mouse (Mus Musculus): mm9 Full", "mm9", false], ["Mouse (Mus musculus): mm9 with ERCC spike-in", "mm9_ERCC", false], ["Human Dec. 2013 (GRCh38/hg38) (hg38)", "hg38", false], ["Human (Homo sapiens): hg19 Canonical", "hg19canon", false], ["Human (Homo sapiens): hg19 Full", "hg19full", false], ["Mouse (Mus musculus): mm9 Canonical", "mm9canon", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "history", "inputs": [{"model_class": "DataToolParameter", "name": "ref", "argument": null, "type": "data", "label": "Select reference sequence", "help": "", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}], "test_param": {"model_class": "SelectToolParameter", "name": "ref_source", "argument": null, "type": "select", "label": "Use FASTA file as reference sequence (optional)", "help": "Must be specified if using a GFF/GTF annotation source or if fetching HGVS or SPDI notations.", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "no_ref", "options": [["Do not use extra reference sequence", "no_ref", false], ["Locally cached", "cached", false], ["History", "history", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Section", "name": "out_opt", "type": "section", "title": "Output options", "help": null, "expanded": false, "inputs": [{"model_class": "SelectToolParameter", "name": "sift", "argument": "--sift", "type": "select", "label": "Output SIFT prediction", "help": "SIFT predicts whether an amino acid substitution affects protein function based on sequence homology and the physical properties of amino acids.", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "options": [["Prediction term only", "p", false], ["Score only", "s", false], ["Both", "b", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "polyphen", "argument": "--polyphen", "type": "select", "label": "Output PolyPhen prediction", "help": "PolyPhen is a tool which predicts possible impact of an amino acid substitution on the structure and function of a human protein using straightforward physical and comparative considerations. VEP uses the humVar score by default.", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "options": [["Prediction term only", "p", false], ["Score only", "s", false], ["Both", "b", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "nearest", "argument": "--nearest", "type": "select", "label": "Retrieve transcript or gene with nearest TSS to each input variant", "help": "Retrieve the transcript or gene with the nearest protein-coding transcription start site (TSS) to each input variant. Note that the nearest TSS may not belong to a transcript that overlaps the input variant, and more than one may be reported in the case where two are equidistant from the input coordinates.", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "options": [["Nearest transcript ID", "transcript", false], ["Nearest gene ID", "gene", false], ["Nearest gene symbol", "symbol", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "distance_custom", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "default", "inputs": [{"model_class": "HiddenToolParameter", "name": "distance_1", "argument": null, "type": "hidden", "label": "", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": true, "is_dynamic": false, "value": "-1"}, {"model_class": "HiddenToolParameter", "name": "distance_2", "argument": null, "type": "hidden", "label": "", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": true, "is_dynamic": false, "value": "-1"}]}, {"model_class": "ConditionalWhen", "value": "one_dist", "inputs": [{"model_class": "IntegerToolParameter", "name": "distance_1", "argument": null, "type": "integer", "label": "Enter custom upstream and downstream distance", "help": "", "help_format": "html", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "5000", "area": false, "datalist": []}, {"model_class": "HiddenToolParameter", "name": "distance_2", "argument": null, "type": "hidden", "label": "", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": true, "is_dynamic": false, "value": "-1"}]}, {"model_class": "ConditionalWhen", "value": "two_dist", "inputs": [{"model_class": "IntegerToolParameter", "name": "distance_1", "argument": null, "type": "integer", "label": "Enter custom upstream distance", "help": "", "help_format": "html", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "5000", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "distance_2", "argument": null, "type": "integer", "label": "Enter custom downstream distance", "help": "", "help_format": "html", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "5000", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "distance_custom_selector", "argument": null, "type": "select", "label": "Modify the distance up and/or downstream between a variant and a transcript for which VEP will assign the upstream_gene_variant or downstream_gene_variant consequences", "help": "Default: 5000. Upstream is 5' and downstream 3' direction. (--distance [bp_distance(,downstream_distance_if_different)])", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "default", "options": [["Default", "default", true], ["Custom distance used for both upstream and downstream", "one_dist", false], ["Custom upstream distance and different custom downstream distance", "two_dist", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "TextToolParameter", "name": "cell_type", "argument": null, "type": "text", "label": "Report only regulatory regions that are found in the given cell type(s):", "help": "Recommended for advanced users only. Can be a single cell type or a comma-separated list. The functional type in each cell type is reported under CELL_TYPE in the output. (--cell_type)", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "individual", "argument": null, "type": "text", "label": "Consider only alternate alleles present in the genotypes of the specified individual(s):", "help": "Enter the individual's IDs as comma-separated list. Individual variant combinations homozygous for the given reference allele will not be reported. Each individual and variant combination is given on a separate line of output. Only works with VCF files containing individual genotype data. (--individual [ind list])", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "Conditional", "name": "vcf_info_type", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "csq", "inputs": [{"model_class": "HiddenToolParameter", "name": "vcf_info_field", "argument": null, "type": "hidden", "label": "", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": true, "is_dynamic": false, "value": "CSQ"}]}, {"model_class": "ConditionalWhen", "value": "ann", "inputs": [{"model_class": "HiddenToolParameter", "name": "vcf_info_field", "argument": null, "type": "hidden", "label": "", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": true, "is_dynamic": false, "value": "ANN"}]}, {"model_class": "ConditionalWhen", "value": "custom", "inputs": [{"model_class": "TextToolParameter", "name": "vcf_info_field", "argument": null, "type": "text", "label": "Enter custom INFO key", "help": "", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "vcf_info_type_selector", "argument": null, "type": "select", "label": "Change name of the consequences INFO column in VCF output", "help": "Default: CSQ. Use ANN for compatibility with other tools such as snpEff (--vcf_info_field [CSQ|ANN|(other)])", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "csq", "options": [["CSQ", "csq", true], ["ANN", "ann", false], ["Custom", "custom", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "SelectToolParameter", "name": "terms", "argument": "--terms", "type": "select", "label": "Type of consequence terms to output", "help": "The default used for terms is Sequence Ontology.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "SO", "options": [["Sequence Ontology (SO)", "SO", true], ["Display version of SO", "display", false], ["NCBI", "NCBI", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "shift_var", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "", "inputs": []}, {"model_class": "ConditionalWhen", "value": "--shift_hgvs 1", "inputs": []}, {"model_class": "ConditionalWhen", "value": "--shift_hgvs 0 --shift_3prime 1", "inputs": [{"model_class": "BooleanToolParameter", "name": "shift_length", "argument": null, "type": "boolean", "label": "Report the distance each variant has been shifted", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--shift_length", "falsevalue": ""}]}, {"model_class": "ConditionalWhen", "value": "--shift_hgvs 0 --shift_genomic 1", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "shift_selector", "argument": null, "type": "select", "label": "Shift variants to the right", "help": "", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "options": [["No shift", "", true], ["3' shift of HGVS notations, causing ambiguous insertions or deletions (typically in repetetive sequence tracts) to be \"shifted\" to their most 3' possible coordinates (relative to the transcript sequence and strand) before the HGVS notations are calculated (--shift_hgvs 1)", "--shift_hgvs 1", false], ["Right align all variants relative to their associated transcripts prior to consequence calculation (--shift_3prime 1)", "--shift_hgvs 0 --shift_3prime 1", false], ["Right align all variants, including intergenic variants, before consequence calculation and update the Location field (--shift_genomic 1)", "--shift_hgvs 0 --shift_genomic 1", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "SelectToolParameter", "name": "out_opt_checkboxes", "argument": null, "type": "select", "label": "Output option flags", "help": "", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "options": [["Ouput variant class (--variant_class)", "--variant_class", false], ["Retrieve humDiv PolyPhen prediction instead of humVar (--humdiv)", "--humdiv", false], ["Output overlap between transcript and structural variant (--overlaps)", "--overlaps", false], ["Indicate if the overlapped gene is associated with a phenotype, disease or trait (--gene_phenotype)", "--gene_phenotype", false], ["Look for overlaps with regulatory regions (--regulatory)", "--regulatory", false], ["Force VCF genotypes to be interpreted as phased (--phased)", "--phased", false], ["Identify allele number from VCF input, where 1 = first ALT allele etc. (--allele_number)", "--allele_number", false], ["Adds the reference allele in the output (--show_ref_allele)", "--show_ref_allele", false], ["Give cDNA, CDS and protein positions as Position/Length (--total_length)", "--total_length", false], ["Output affected exon and intron numbering (--numbers)", "--numbers", false], ["Don't URI escape HGVS strings (--no_escape)", "--no_escape", false], ["Don't overwrite existing CSQ entry in VCF INFO field (--keep_csq)", "--keep_csq", false], ["Don't write header lines in output files (--no_headers)", "--no_headers", false]], "display": "checkboxes", "multiple": true, "textable": false}]}, {"model_class": "Section", "name": "ident", "type": "section", "title": "Identifiers", "help": null, "expanded": false, "inputs": [{"model_class": "DataToolParameter", "name": "input_synonyms", "argument": null, "type": "data", "label": "Load a file of chromosome synonyms", "help": "File should be tab-delimited with the primary identifier in column 1 and the synonym in column 2. Synonyms allow different chromosome identifiers to be used in the input file and any annotation source. (--synonyms [file])", "help_format": "html", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["tabular"], "edam": {"edam_formats": ["format_3475"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "SelectToolParameter", "name": "ident_checkboxes", "argument": null, "type": "select", "label": "Identifier flags", "help": "", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "options": [["Add HGVS nomenclature, both coding and protein sequence names, to the ouput (requires FASTA) (--hgvs)", "--hgvs", false], ["Add genomic HGVS nomenclature based on the input chromosome name (requires FASTA) (--hgvsg)", "--hgvsg", false], ["Add genomic SPDI notation (requires FASTA) (--spdi)", "--spdi", false], ["Add version numbers to Ensembl transcript identifiers (--transcript_version)", "--transcript_version", false], ["Add the Ensembl protein identifier to the output where appropriate (--protein)", "--protein", false], ["Add the gene symbol (e.g. HGNC) (where available) to the output (--symbol)", "--symbol", false], ["Add the CCDS transcript identifer (where available) to the output (--ccds)", "--ccds", false], ["Add best match accessions for translated protein products from three UniProt-related databases (SWISSPROT, TREMBL and UniParc) to the output (--uniprot)", "--uniprot", false], ["Add the transcript support level for this transcript to the output (only for hg38) (--tsl)", "--tsl", false], ["Add the APPRIS isoform annotation for this transcript to the output (only for hg38) (--appris)", "--appris", false], ["Add a flag indicating if the transcript is the canonical transcript for the gene (--canonical)", "--canonical", false], ["Add a flag indicating if the transcript is the MANE Select or MANE Plus Clinical transcript for the gene (only for hg38) (--mane)", "--mane", false], ["Add a flag indicating if the transcript is the MANE Select transcript for the gene (only for hg38) (--mane_select)", "--mane_select", false], ["Output the biotype of the transcript or regulatory feature (--biotype)", "--biotype", false], ["Add names of overlapping protein domains to output (--domains)", "--domains", false], ["Output aligned RefSeq mRNA identifier for transcript (--xref_refseq)", "--xref_refseq", false]], "display": "checkboxes", "multiple": true, "textable": false}]}, {"model_class": "Section", "name": "colo_var", "type": "section", "title": "Co-located variants", "help": null, "expanded": false, "inputs": [{"model_class": "SelectToolParameter", "name": "colo_var_checkboxes", "argument": null, "type": "select", "label": "Co-located variants flags", "help": "", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "options": [["Check for the existence of known variants that are co-located with the input (--check_existing)", "--check_existing", false], ["Report all known clinical significance values at the given locus (instead of allele-specific) (--clin_sig_allele 0)", "--clin_sig_allele 0", false], ["Do not include variants with unknown alleles when checking for co-located variants (--exclude_null_alleles)", "--exclude_null_alleles", false], ["When checking for existing variants, compare using coordinates only (--no_check_alleles)", "--no_check_alleles", false], ["Add the global allele frequency (AF) from 1000 Genomes Phase 3 data for any known co-located variant to the output (--af)", "--af", false], ["Report the highest allele frequency observed in any population from 1000 genomes, ESP or gnomAD (--max_af)", "--max_af", false], ["Add allele frequency from continental populations (AFR,AMR,EAS,EUR,SAS) of 1000 Genomes Phase 3 to the output (--af_1kg)", "--af_1kg", false], ["Include allele frequency from NHLBI-ESP populations (--af_esp)", "--af_esp", false], ["Include allele frequency from Genome Aggregation Database (gnomAD) exome populations (--af_gnomad)", "--af_gnomad", false], ["Include allele frequency from ExAC project populations (--af_exac)", "--af_exac", false], ["Report Pubmed IDs for publications that cite existing variant (--pubmed)", "--pubmed", false], ["Report known synonyms for co-located variants (--var_synonyms)", "--var_synonyms", false], ["Do not exclude variants that have been flagged as failed when checking for co-located variants (--failed 1)", "--failed 1", false]], "display": "checkboxes", "multiple": true, "textable": false}]}, {"model_class": "Section", "name": "fil_qc", "type": "section", "title": "Filtering and QC options", "help": null, "expanded": false, "inputs": [{"model_class": "SelectToolParameter", "name": "fil_qc_checkboxes", "argument": null, "type": "select", "label": "Filtering and QC flags", "help": "", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "options": [["Only return consequences that fall in the coding regions of transcripts (--coding_only)", "--coding_only", false], ["Do not include intergenic consequences in the output (--no_intergenic)", "--no_intergenic", false]], "display": "checkboxes", "multiple": true, "textable": false}]}, {"model_class": "Section", "name": "plugins", "type": "section", "title": "VEP Plugins", "help": null, "expanded": false, "inputs": [{"model_class": "BooleanToolParameter", "name": "carol", "argument": null, "type": "boolean", "label": "Enable Carol plugin", "help": "This plugin calculates the Combined Annotation scoRing toOL (CAROL) score for a missense mutation and adds it to VEP's output. Both the SIFT and PolyPhen-2 scores are required for the calculation, so these two have to be activated in the output options section.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--plugin Carol", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "condel", "argument": null, "type": "boolean", "label": "Enable Condel plugin", "help": "This plugin calculates the Consensus Deleteriousness (Condel) score for a missense mutation and adds it to VEP's output. Both the SIFT and PolyPhen-2 scores are required for the calculation, so these two have to be activated in the output options section.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--plugin Condel", "falsevalue": ""}, {"model_class": "DataToolParameter", "name": "exacpli_file", "argument": null, "type": "data", "label": "Enable ExACpLI plugin by selecting an ExACpLI_values text file", "help": "This plugin calculates the probabililty of a gene being loss-of-function intolerant (pLI) and adds it to VEP's output. The closer pLI is to 1, the more likely the gene is loss-of-function (LoF) intolerant. An ExACpLI_values.txt file is required for usage and it is recommended to use the one provided in the VEP_plugins GitHub repository: https://github.com/Ensembl/VEP_plugins", "help_format": "html", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["txt"], "edam": {"edam_formats": ["format_2330"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "loftool_file", "argument": null, "type": "data", "label": "Enable LoFtool plugin by selecting a LoFtool_scores text file", "help": "This plugin calculates LoFtool scores and adds them to VEP's output. LoFtool provides a rank of genic intolerance and consequent susceptibility to disease based on the ratio of Loss-of-function (LoF) to synonymous mutations for each gene in 60,706 individuals from ExAC, adjusting for the gene de novo mutation rate and evolutionary protein conservation. The lower the LoFtool gene score percentile the most intolerant is the gene to functional variation. A LoFtool_scores.txt file is required for usage and it is recommended to use the one provided in the VEP_plugins GitHub repository: https://github.com/Ensembl/VEP_plugins", "help_format": "html", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["txt"], "edam": {"edam_formats": ["format_2330"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}], "outputs": [{"model_class": "ToolOutput", "name": "output1", "format": "vcf", "label": null, "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "MainOutput.vcf", "edam_format": "format_3016", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?"}]}, {"model_class": "ToolOutput", "name": "output2", "format": "txt", "label": "${tool.name} on ${on_string} TXT Summary", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "MainOutput.vcf_summary.txt", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?"}]}], "panel_section_id": "variant_calling", "panel_section_name": "Variant Calling", "form_style": "regular"}