{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/iuc/gatk2/gatk2_haplotype_caller/2.8.0", "name": "Haplotype Caller", "version": "2.8.0", "description": "Call SNPs and indels simultaneously via local de-novo assembly of haplotypes in an active region", "labels": [], "edam_operations": [], "edam_topics": [], "hidden": true, "is_workflow_compatible": true, "xrefs": [], "tool_shed_repository": {"name": "gatk2", "owner": "iuc", "changeset_revision": "84584664264c", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "DataToolParameter", "name": "input_recal", "argument": null, "type": "data", "label": "Covariates table recalibration file", "help": "The input covariates table file which enables on-the-fly base quality score recalibration. Enables on-the-fly recalibrate of base qualities. The covariates tables are produced by the BaseQualityScoreRecalibrator tool. Please be aware that one should only run recalibration with the covariates file created on the same input bam(s) (-BQSR,--BQSR &lt;recal_file&gt;)", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["gatk_report"], "edam": {"edam_formats": ["format_2330"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "Conditional", "name": "reference_source", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "cached", "inputs": [{"model_class": "Repeat", "name": "input_bams", "type": "repeat", "title": "BAM file", "help": "-I,--input_file &lt;input_file&gt;", "default": 1, "min": 1, "max": "__Infinity__", "inputs": [{"model_class": "DataToolParameter", "name": "input_bam", "argument": null, "type": "data", "label": "BAM file", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["bam"], "edam": {"edam_formats": ["format_2572"], "edam_data": ["data_0863"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "SelectToolParameter", "name": "ref_file", "argument": null, "type": "select", "label": "Using reference genome", "help": "-R,--reference_sequence &lt;reference_sequence&gt;", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": "hg19", "options": [["Human (Homo sapiens): hg19", "hg19", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "history", "inputs": [{"model_class": "Repeat", "name": "input_bams", "type": "repeat", "title": "BAM file", "help": "-I,--input_file &lt;input_file&gt;", "default": 1, "min": 1, "max": "__Infinity__", "inputs": [{"model_class": "DataToolParameter", "name": "input_bam", "argument": null, "type": "data", "label": "BAM file", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["bam"], "edam": {"edam_formats": ["format_2572"], "edam_data": ["data_0863"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "DataToolParameter", "name": "ref_file", "argument": null, "type": "data", "label": "Using reference file", "help": "-R,--reference_sequence &lt;reference_sequence&gt;", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}], "test_param": {"model_class": "SelectToolParameter", "name": "reference_source_selector", "argument": null, "type": "select", "label": "Choose the source for the reference list", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "cached", "options": [["Locally cached", "cached", false], ["History", "history", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "dbsnp_rod_bind_type", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "exclude_dbsnp", "inputs": []}, {"model_class": "ConditionalWhen", "value": "set_dbsnp", "inputs": [{"model_class": "DataToolParameter", "name": "dbsnp_input_rod", "argument": null, "type": "data", "label": "dbSNP ROD file", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["vcf"], "edam": {"edam_formats": ["format_3016"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "TextToolParameter", "name": "dbsnp_rod_name", "argument": null, "type": "text", "label": "dbsnp ROD name", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "dbsnp", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "dbsnp_rod_bind_type_selector", "argument": null, "type": "select", "label": "Provide a dbSNP Reference-Ordered Data (ROD) file", "help": "-D,--dbsnp &lt;dbsnp&gt;", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "set_dbsnp", "options": [["Set dbSNP", "set_dbsnp", true], ["Don't set dbSNP", "exclude_dbsnp", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "gatk_param_type", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "basic", "inputs": []}, {"model_class": "ConditionalWhen", "value": "advanced", "inputs": [{"model_class": "Repeat", "name": "pedigree", "type": "repeat", "title": "Pedigree file", "help": "-ped,--pedigree &lt;pedigree&gt;", "default": 0, "min": 0, "max": "__Infinity__", "inputs": [{"model_class": "DataToolParameter", "name": "pedigree_file", "argument": null, "type": "data", "label": "Pedigree files for samples", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["txt"], "edam": {"edam_formats": ["format_2330"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "Repeat", "name": "pedigree_string_repeat", "type": "repeat", "title": "Pedigree string", "help": "-pedString,--pedigreeString &lt;pedigreeString&gt;", "default": 0, "min": 0, "max": "__Infinity__", "inputs": [{"model_class": "TextToolParameter", "name": "pedigree_string", "argument": null, "type": "text", "label": "Pedigree string for samples", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "SelectToolParameter", "name": "pedigree_validation_type", "argument": null, "type": "select", "label": "How strict should we be in validating the pedigree information", "help": "-pedValidationType,--pedigreeValidationType &lt;pedigreeValidationType&gt;", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "STRICT", "options": [["STRICT", "STRICT", true], ["SILENT", "SILENT", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Repeat", "name": "read_filter", "type": "repeat", "title": "Read Filter", "help": "-rf,--read_filter &lt;read_filter&gt;", "default": 0, "min": 0, "max": "__Infinity__", "inputs": [{"model_class": "Conditional", "name": "read_filter_type", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "BadCigar", "inputs": []}, {"model_class": "ConditionalWhen", "value": "BadMate", "inputs": []}, {"model_class": "ConditionalWhen", "value": "DuplicateRead", "inputs": []}, {"model_class": "ConditionalWhen", "value": "FailsVendorQualityCheck", "inputs": []}, {"model_class": "ConditionalWhen", "value": "MalformedRead", "inputs": [{"model_class": "BooleanToolParameter", "name": "filter_mismatching_base_and_quals", "argument": null, "type": "boolean", "label": "filter out the reads with mismatching number of bases and base qualities", "help": "filter out the mismatch reads instead of quitting with an error", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--filter_mismatching_base_and_quals", "falsevalue": ""}]}, {"model_class": "ConditionalWhen", "value": "MappingQuality", "inputs": [{"model_class": "IntegerToolParameter", "name": "min_mapping_quality_score", "argument": null, "type": "integer", "label": "Minimum read mapping quality required to consider a read for calling", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "10", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "MappingQualityUnavailable", "inputs": []}, {"model_class": "ConditionalWhen", "value": "MappingQualityZero", "inputs": []}, {"model_class": "ConditionalWhen", "value": "MateSameStrand", "inputs": []}, {"model_class": "ConditionalWhen", "value": "MaxInsertSize", "inputs": [{"model_class": "IntegerToolParameter", "name": "maxInsertSize", "argument": null, "type": "integer", "label": "Discard reads with insert size greater than the specified value", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1000000", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "MaxReadLength", "inputs": [{"model_class": "IntegerToolParameter", "name": "maxReadLength", "argument": null, "type": "integer", "label": "Max Read Length", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "76", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "MissingReadGroup", "inputs": []}, {"model_class": "ConditionalWhen", "value": "NoOriginalQualityScores", "inputs": []}, {"model_class": "ConditionalWhen", "value": "NotPrimaryAlignment", "inputs": []}, {"model_class": "ConditionalWhen", "value": "Platform454", "inputs": []}, {"model_class": "ConditionalWhen", "value": "Platform", "inputs": [{"model_class": "TextToolParameter", "name": "PLFilterName", "argument": null, "type": "text", "label": "Discard reads with RG:PL attribute containing this string", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "PlatformUnit", "inputs": []}, {"model_class": "ConditionalWhen", "value": "ReadGroupBlackList", "inputs": []}, {"model_class": "ConditionalWhen", "value": "ReadName", "inputs": [{"model_class": "TextToolParameter", "name": "readName", "argument": null, "type": "text", "label": "Filter out all reads except those with this read name", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "ReadStrand", "inputs": [{"model_class": "BooleanToolParameter", "name": "filterPositive", "argument": null, "type": "boolean", "label": "Discard reads on the forward strand", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--filterPositive", "falsevalue": ""}]}, {"model_class": "ConditionalWhen", "value": "ReassignMappingQuality", "inputs": [{"model_class": "IntegerToolParameter", "name": "default_mapping_quality", "argument": null, "type": "integer", "label": "Default read mapping quality to assign to all reads", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "60", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "Sample", "inputs": [{"model_class": "TextToolParameter", "name": "sample_to_keep", "argument": null, "type": "text", "label": "The name of the sample(s) to keep, filtering out all others", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "SingleReadGroup", "inputs": [{"model_class": "IntegerToolParameter", "name": "read_group_to_keep", "argument": null, "type": "integer", "label": "The name of the read group to keep, filtering out all others", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "76", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "UnmappedRead", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "read_filter_type_selector", "argument": null, "type": "select", "label": "Read Filter Type", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "MaxReadLength", "options": [["BadCigar", "BadCigar", false], ["BadMate", "BadMate", false], ["DuplicateRead", "DuplicateRead", false], ["FailsVendorQualityCheck", "FailsVendorQualityCheck", false], ["MalformedRead", "MalformedRead", false], ["MappingQuality", "MappingQuality", false], ["MappingQualityUnavailable", "MappingQualityUnavailable", false], ["MappingQualityZero", "MappingQualityZero", false], ["MateSameStrand", "MateSameStrand", false], ["MaxInsertSize", "MaxInsertSize", false], ["MaxReadLength", "MaxReadLength", true], ["MissingReadGroup", "MissingReadGroup", false], ["NoOriginalQualityScores", "NoOriginalQualityScores", false], ["NotPrimaryAlignment", "NotPrimaryAlignment", false], ["Platform454", "Platform454", false], ["Platform", "Platform", false], ["PlatformUnit", "PlatformUnit", false], ["ReadGroupBlackList", "ReadGroupBlackList", false], ["ReadName", "ReadName", false], ["ReadStrand", "ReadStrand", false], ["ReassignMappingQuality", "ReassignMappingQuality", false], ["Sample", "Sample", false], ["SingleReadGroup", "SingleReadGroup", false], ["UnmappedRead", "UnmappedRead", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "Repeat", "name": "input_interval_repeat", "type": "repeat", "title": "Operate on Genomic intervals", "help": "-L,--intervals &lt;intervals&gt;", "default": 0, "min": 0, "max": "__Infinity__", "inputs": [{"model_class": "DataToolParameter", "name": "input_intervals", "argument": null, "type": "data", "label": "Genomic intervals", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["bed", "gatk_interval", "picard_interval_list", "vcf"], "edam": {"edam_formats": ["format_3003", "format_2330", "format_3475", "format_3016"], "edam_data": ["data_3002", "data_0006", "data_0006", "data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "Repeat", "name": "input_exclude_interval_repeat", "type": "repeat", "title": "Exclude Genomic intervals", "help": "-XL,--excludeIntervals &lt;excludeIntervals&gt;", "default": 0, "min": 0, "max": "__Infinity__", "inputs": [{"model_class": "DataToolParameter", "name": "input_exclude_intervals", "argument": null, "type": "data", "label": "Genomic intervals", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["bed", "gatk_interval", "picard_interval_list", "vcf"], "edam": {"edam_formats": ["format_3003", "format_2330", "format_3475", "format_3016"], "edam_data": ["data_3002", "data_0006", "data_0006", "data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "SelectToolParameter", "name": "interval_set_rule", "argument": null, "type": "select", "label": "Interval set rule", "help": "-isr,--interval_set_rule &lt;interval_set_rule&gt;", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "UNION", "options": [["UNION", "UNION", true], ["INTERSECTION", "INTERSECTION", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "IntegerToolParameter", "name": "interval_padding", "argument": null, "type": "integer", "label": "Amount of padding (in bp) to add to each interval", "help": "This is typically used to add padding around exons when analyzing exomes. (--interval_padding / -ip)", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "Conditional", "name": "downsampling_type", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "NONE", "inputs": []}, {"model_class": "ConditionalWhen", "value": "ALL_READS", "inputs": [{"model_class": "Conditional", "name": "downsample_to_type", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "downsample_to_fraction", "inputs": [{"model_class": "FloatToolParameter", "name": "downsample_to_value", "argument": null, "type": "float", "label": "Fraction [0.0-1.0] of reads to downsample to", "help": "-dfrac,--downsample_to_fraction &lt;downsample_to_fraction&gt;", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "1.0", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "downsample_to_coverage", "inputs": [{"model_class": "IntegerToolParameter", "name": "downsample_to_value", "argument": null, "type": "integer", "label": "Coverage to downsample to at any given locus", "help": "-dcov,--downsample_to_coverage &lt;downsample_to_coverage&gt;", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "downsample_to_type_selector", "argument": null, "type": "select", "label": "Downsample method", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "downsample_to_fraction", "options": [["Downsample by Fraction", "downsample_to_fraction", true], ["Downsample by Coverage", "downsample_to_coverage", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "BY_SAMPLE", "inputs": [{"model_class": "Conditional", "name": "downsample_to_type", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "downsample_to_fraction", "inputs": [{"model_class": "FloatToolParameter", "name": "downsample_to_value", "argument": null, "type": "float", "label": "Fraction [0.0-1.0] of reads to downsample to", "help": "-dfrac,--downsample_to_fraction &lt;downsample_to_fraction&gt;", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "1.0", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "downsample_to_coverage", "inputs": [{"model_class": "IntegerToolParameter", "name": "downsample_to_value", "argument": null, "type": "integer", "label": "Coverage to downsample to at any given locus", "help": "-dcov,--downsample_to_coverage &lt;downsample_to_coverage&gt;", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "downsample_to_type_selector", "argument": null, "type": "select", "label": "Downsample method", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "downsample_to_fraction", "options": [["Downsample by Fraction", "downsample_to_fraction", true], ["Downsample by Coverage", "downsample_to_coverage", false]], "display": null, "multiple": false, "textable": false}}]}], "test_param": {"model_class": "SelectToolParameter", "name": "downsampling_type_selector", "argument": null, "type": "select", "label": "Type of reads downsampling to employ at a given locus", "help": "-dt,--downsampling_type &lt;downsampling_type&gt;", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "NONE", "options": [["NONE", "NONE", true], ["ALL_READS", "ALL_READS", false], ["BY_SAMPLE", "BY_SAMPLE", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "SelectToolParameter", "name": "baq", "argument": null, "type": "select", "label": "Type of BAQ calculation to apply in the engine", "help": "-baq,--baq &lt;baq&gt;", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "OFF", "options": [["OFF", "OFF", true], ["CALCULATE_AS_NECESSARY", "CALCULATE_AS_NECESSARY", false], ["RECALCULATE", "RECALCULATE", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "FloatToolParameter", "name": "baq_gap_open_penalty", "argument": null, "type": "float", "label": "BAQ gap open penalty (Phred Scaled)", "help": "Default value is 40. 30 is perhaps better for whole genome call sets. -baqGOP,--baqGapOpenPenalty &lt;baqGapOpenPenalty&gt;", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "40.0", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "use_original_qualities", "argument": null, "type": "boolean", "label": "Use the original base quality scores from the OQ tag", "help": "-OQ,--useOriginalQualities", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--useOriginalQualities", "falsevalue": ""}, {"model_class": "IntegerToolParameter", "name": "default_base_qualities", "argument": null, "type": "integer", "label": "Value to be used for all base quality scores, when some are missing", "help": "-DBQ,--defaultBaseQualities &lt;defaultBaseQualities&gt;", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-1", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "validation_strictness", "argument": null, "type": "select", "label": "How strict should we be with validation", "help": "-S,--validation_strictness &lt;validation_strictness&gt;", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "STRICT", "options": [["STRICT", "STRICT", true], ["LENIENT", "LENIENT", false], ["SILENT", "SILENT", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "interval_merging", "argument": null, "type": "select", "label": "Interval merging rule", "help": "-im,--interval_merging &lt;interval_merging&gt;", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "ALL", "options": [["ALL", "ALL", true], ["OVERLAPPING_ONLY", "OVERLAPPING_ONLY", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Repeat", "name": "read_group_black_list_repeat", "type": "repeat", "title": "Read group black list", "help": "-rgbl,--read_group_black_list &lt;read_group_black_list&gt;", "default": 0, "min": 0, "max": "__Infinity__", "inputs": [{"model_class": "Conditional", "name": "read_group_black_list_type", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "file", "inputs": [{"model_class": "DataToolParameter", "name": "read_group_black_list", "argument": null, "type": "data", "label": "Read group black list file", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["txt"], "edam": {"edam_formats": ["format_2330"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "text", "inputs": [{"model_class": "TextToolParameter", "name": "read_group_black_list", "argument": null, "type": "text", "label": "Read group black list tag:string", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "tag:string", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "read_group_black_list_type_selector", "argument": null, "type": "select", "label": "Type of reads read group black list", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "file", "options": [["Filters in file", "file", true], ["Specify filters as a string", "text", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "BooleanToolParameter", "name": "disable_experimental_low_memory_sharding", "argument": null, "type": "boolean", "label": "Disable experimental low-memory sharding functionality.", "help": "--disable_experimental_low_memory_sharding", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--disable_experimental_low_memory_sharding", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "non_deterministic_random_seed", "argument": null, "type": "boolean", "label": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run", "help": "-ndrs,--nonDeterministicRandomSeed", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--nonDeterministicRandomSeed", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "fix_misencoded_quality_scores", "argument": null, "type": "boolean", "label": "Fix mis-encoded base quality scores. Q0 == ASCII 33 according to the SAM specification, whereas Illumina encoding starts at Q64. The idea here is simple: we just iterate over all reads and subtract 31 from every quality score.", "help": "-fixMisencodedQuals / --fix_misencoded_quality_scores", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--fix_misencoded_quality_scores", "falsevalue": ""}]}], "test_param": {"model_class": "SelectToolParameter", "name": "gatk_param_type_selector", "argument": null, "type": "select", "label": "Basic or Advanced GATK options", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "basic", "options": [["Basic", "basic", true], ["Advanced", "advanced", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "analysis_param_type", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "basic", "inputs": []}, {"model_class": "ConditionalWhen", "value": "advanced", "inputs": [{"model_class": "DataToolParameter", "name": "activeRegionIn", "argument": null, "type": "data", "label": "activeRegionIn", "help": "--activeRegionIn / -AR  Use this interval list file as the active regions to process", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["bed", "gatk_interval", "picard_interval_list", "vcf"], "edam": {"edam_formats": ["format_3003", "format_2330", "format_3475", "format_3016"], "edam_data": ["data_3002", "data_0006", "data_0006", "data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "BooleanToolParameter", "name": "activeRegionOut", "argument": null, "type": "boolean", "label": "activeRegionOut", "help": "--activeRegionOut / -ARO  Output the active region to an interval list file", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "", "falsevalue": ""}, {"model_class": "SelectToolParameter", "name": "annotation", "argument": null, "type": "select", "label": "Annotation Types", "help": "-A,--annotation &lt;annotation&gt;", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": true, "value": null, "options": [["AlleleBalance", "AlleleBalance", false], ["AlleleBalanceBySample", "AlleleBalanceBySample", false], ["BaseCounts", "BaseCounts", false], ["BaseQualityRankSumTest", "BaseQualityRankSumTest", false], ["ChromosomeCounts", "ChromosomeCounts", false], ["Coverage", "Coverage", false], ["DepthPerAlleleBySample", "DepthPerAlleleBySample", false], ["FisherStrand", "FisherStrand", false], ["GCContent", "GCContent", false], ["HaplotypeScore", "HaplotypeScore", false], ["HardyWeinberg", "HardyWeinberg", false], ["HomopolymerRun", "HomopolymerRun", false], ["InbreedingCoeff", "InbreedingCoeff", false], ["LowMQ", "LowMQ", false], ["MVLikelihoodRatio", "MVLikelihoodRatio", false], ["MappingQualityRankSumTest", "MappingQualityRankSumTest", false], ["MappingQualityZero", "MappingQualityZero", false], ["MappingQualityZeroBySample", "MappingQualityZeroBySample", false], ["NBaseCount", "NBaseCount", false], ["QualByDepth", "QualByDepth", false], ["RMSMappingQuality", "RMSMappingQuality", false], ["ReadPosRankSumTest", "ReadPosRankSumTest", false], ["SampleList", "SampleList", false], ["SnpEff", "SnpEff", false], ["SpanningDeletions", "SpanningDeletions", false]], "display": "checkboxes", "multiple": true, "textable": false}, {"model_class": "Repeat", "name": "additional_annotations", "type": "repeat", "title": "Additional annotation", "help": "-A,--annotation &lt;annotation&gt;", "default": 0, "min": 0, "max": "__Infinity__", "inputs": [{"model_class": "TextToolParameter", "name": "additional_annotation_name", "argument": null, "type": "text", "label": "Annotation name", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "SelectToolParameter", "name": "group", "argument": null, "type": "select", "label": "Annotation Interfaces/Groups", "help": "-G,--group &lt;group&gt;", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "options": [["RodRequiringAnnotation", "RodRequiringAnnotation", false], ["Standard", "Standard", false], ["Experimental", "Experimental", false], ["WorkInProgress", "WorkInProgress", false], ["RankSumTest", "RankSumTest", false]], "display": "checkboxes", "multiple": true, "textable": false}, {"model_class": "SelectToolParameter", "name": "exclude_annotations", "argument": null, "type": "select", "label": "Annotations to exclude", "help": "-XA,--excludeAnnotation &lt;excludeAnnotation&gt;", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": true, "value": null, "options": [["AlleleBalance", "AlleleBalance", false], ["AlleleBalanceBySample", "AlleleBalanceBySample", false], ["BaseCounts", "BaseCounts", false], ["BaseQualityRankSumTest", "BaseQualityRankSumTest", false], ["ChromosomeCounts", "ChromosomeCounts", false], ["Coverage", "Coverage", false], ["DepthPerAlleleBySample", "DepthPerAlleleBySample", false], ["FisherStrand", "FisherStrand", false], ["GCContent", "GCContent", false], ["HaplotypeScore", "HaplotypeScore", false], ["HardyWeinberg", "HardyWeinberg", false], ["HomopolymerRun", "HomopolymerRun", false], ["InbreedingCoeff", "InbreedingCoeff", false], ["LowMQ", "LowMQ", false], ["MVLikelihoodRatio", "MVLikelihoodRatio", false], ["MappingQualityRankSumTest", "MappingQualityRankSumTest", false], ["MappingQualityZero", "MappingQualityZero", false], ["MappingQualityZeroBySample", "MappingQualityZeroBySample", false], ["NBaseCount", "NBaseCount", false], ["QualByDepth", "QualByDepth", false], ["RMSMappingQuality", "RMSMappingQuality", false], ["ReadPosRankSumTest", "ReadPosRankSumTest", false], ["SampleList", "SampleList", false], ["SnpEff", "SnpEff", false], ["SpanningDeletions", "SpanningDeletions", false]], "display": "checkboxes", "multiple": true, "textable": false}, {"model_class": "DataToolParameter", "name": "comp", "argument": null, "type": "data", "label": "comp", "help": "--comp / -comp  comparison VCF file", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["vcf"], "edam": {"edam_formats": ["format_3016"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "FloatToolParameter", "name": "contamination_fraction_to_filter", "argument": null, "type": "float", "label": "contamination_fraction_to_filter", "help": "--contamination_fraction_to_filter / -contamination  Fraction of contamination in sequencing data (for all samples) to aggressively remove", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "0.05", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "debug", "argument": null, "type": "boolean", "label": "debug", "help": "--debug / -debug  If specified, print out very verbose debug information about each triggering active region", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-debug", "falsevalue": ""}, {"model_class": "Conditional", "name": "genotyping_mode_type", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "DISCOVERY", "inputs": []}, {"model_class": "ConditionalWhen", "value": "GENOTYPE_GIVEN_ALLELES", "inputs": [{"model_class": "DataToolParameter", "name": "input_alleles_rod", "argument": null, "type": "data", "label": "Alleles ROD file", "help": "-alleles,--alleles &lt;alleles&gt;", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["vcf"], "edam": {"edam_formats": ["format_3016"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}], "test_param": {"model_class": "SelectToolParameter", "name": "genotyping_mode", "argument": null, "type": "select", "label": "How to determine the alternate allele to use for genotyping", "help": "-gt_mode,--genotyping_mode &lt;genotyping_mode&gt;", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "DISCOVERY", "options": [["DISCOVERY", "DISCOVERY", true], ["GENOTYPE_GIVEN_ALLELES", "GENOTYPE_GIVEN_ALLELES", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "BooleanToolParameter", "name": "graphOutput", "argument": null, "type": "boolean", "label": "graphOutput", "help": "--graphOutput / -graph  File to which debug assembly graph information should be written", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "", "falsevalue": ""}, {"model_class": "FloatToolParameter", "name": "heterozygosity", "argument": null, "type": "float", "label": "heterozygosity", "help": "--heterozygosity / -hets  Heterozygosity value used to compute prior likelihoods for any locus", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "0.001", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "minPruning", "argument": null, "type": "integer", "label": "minPruning", "help": "--minPruning / -minPruning  The minimum allowed pruning factor in assembly graph. Paths with >= X supporting kmers are pruned from the graph", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "1", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "emitRefConfidence", "argument": null, "type": "select", "label": "Output confidence estimates", "help": "Emitting a per-bp or summarized confidence estimate for a site being strictly homozygous-reference (--emitRefConfidence)", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "NONE", "options": [["don't emit anything", "NONE", true], ["BP_RESOLUTION (emit detailed information for each BP)", "BP_RESOLUTION", false], ["GVCF (emit a block summarized version of the BP_RESOLUTION data)", "GVCF", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "pair_hmm_implementation", "argument": null, "type": "select", "label": "pair_hmm_implementation", "help": "--pair_hmm_implementation / -pairHMM  The PairHMM implementation to use for genotype likelihood calculations", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "LOGLESS_CACHING", "options": [["EXACT", "EXACT", false], ["ORIGINAL", "ORIGINAL", false], ["CACHING", "CACHING", false], ["LOGLESS_CACHING", "LOGLESS_CACHING", true]], "display": null, "multiple": false, "textable": false}, {"model_class": "FloatToolParameter", "name": "standard_min_confidence_threshold_for_calling", "argument": null, "type": "float", "label": "standard_min_confidence_threshold_for_calling", "help": "--standard_min_confidence_threshold_for_calling / -stand_call_conf  The minimum phred-scaled confidence threshold at which variants should be called", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "30.0", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "standard_min_confidence_threshold_for_emitting", "argument": null, "type": "float", "label": "standard_min_confidence_threshold_for_emitting", "help": "--standard_min_confidence_threshold_for_emitting / -stand_emit_conf  The minimum phred-scaled confidence threshold at which variants should be emitted (and filtered with LowQual if less than the calling threshold)", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "30.0", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "useAllelesTrigger", "argument": null, "type": "boolean", "label": "useAllelesTrigger", "help": "--useAllelesTrigger / -allelesTrigger  If specified, use additional trigger on variants found in an external alleles file", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-allelesTrigger", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "fullHaplotype", "argument": null, "type": "boolean", "label": "fullHaplotype", "help": "--fullHaplotype / -fullHaplotype  If specified, output the full haplotype sequence instead of converting to individual variants w.r.t. the reference", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-fullHaplotype", "falsevalue": ""}, {"model_class": "IntegerToolParameter", "name": "gcpHMM", "argument": null, "type": "integer", "label": "gcpHMM", "help": "--gcpHMM / -gcpHMM  Flat gap continuation penalty for use in the Pair HMM", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "10", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "genotypeFullActiveRegion", "argument": null, "type": "boolean", "label": "genotypeFullActiveRegion", "help": "--genotypeFullActiveRegion / -genotypeFullActiveRegion  If specified, alternate alleles are considered to be the full active region for the purposes of genotyping", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-genotypeFullActiveRegion", "falsevalue": ""}, {"model_class": "IntegerToolParameter", "name": "max_alternate_alleles", "argument": null, "type": "integer", "label": "max_alternate_alleles", "help": "--max_alternate_alleles / -maxAltAlleles  Maximum number of alternate alleles to genotype", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "6", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "analysis_param_type_selector", "argument": null, "type": "select", "label": "Basic or Advanced Analysis options", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "basic", "options": [["Basic", "basic", true], ["Advanced", "advanced", false]], "display": null, "multiple": false, "textable": false}}], "outputs": [{"model_class": "ToolOutput", "name": "output_vcf", "format": "vcf", "label": "${tool.name} on ${on_string} (VCF)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_3016", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "graph_out", "format": "vcf", "label": "${tool.name} on ${on_string} graph", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_3016", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "active_region_out", "format": "vcf", "label": "${tool.name} on ${on_string} activeRegion", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_3016", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "output_log", "format": "txt", "label": "${tool.name} on ${on_string} (log)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}], "panel_section_id": "tool_toolshed.g2.bx.psu.edu/repos/iuc/gatk2/gatk2_haplotype_caller/2.8.0", "panel_section_name": "Haplotype Caller", "form_style": "regular"}