{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy2", "name": "HISAT2", "version": "2.1.0+galaxy2", "description": "A fast and sensitive alignment program", "labels": [], "edam_operations": ["operation_0292"], "edam_topics": ["topic_3170"], "hidden": "", "is_workflow_compatible": true, "xrefs": [{"value": "hisat2", "reftype": "bio.tools"}], "tool_shed_repository": {"name": "hisat2", "owner": "iuc", "changeset_revision": "a26ed87f444c", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "Conditional", "name": "reference_genome", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "indexed", "inputs": [{"model_class": "SelectToolParameter", "name": "index", "argument": null, "type": "select", "label": "Select a reference genome", "help": "If your genome of interest is not listed, contact the Galaxy team", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": "apiMel3", "options": [["A. mellifera genome (apiMel3, Baylor HGSC Amel_3.0)", "apiMel3", false], ["Actinidia chinensis FEI Lab v1.0 - splice junctions NOT included", "Actinidia_chinensis_FEI_Lab_v1.0", false], ["African Clawed Frog (xenLae9.2)", "xenLae9.2", false], ["Amborella trichopoda JGI v1.0 - splice junctions NOT included", "Amborella_trichopoda_JGI_v1.0", false], ["Arabidopsis thaliana (TAIR10)", "TAIR10", false], ["Asparagus officinalis v1.1 - splice junctions NOT included", "Asparagus_officinalis_v1.1", false], ["Brassica rapa JGI FPsc1.3 - splice junctions NOT included", "Brassica_rapa_JGI_FPsc1.3", false], ["Caenorhabditis elegans Feb. 2013 (WBcel235/ce11)", "ce11", false], ["Cajanus cajan Penguin Genomics v5.0 - splice junctions NOT included", "Cajanus_cajan_Penguin_Genomics_v5.0", false], ["Capsella rubella JGI annotation v1.0 on assembly v1 - splice junctions NOT included", "Capsella_rubella_JGI_annotation_v1.0_on_assembly_v1", false], ["Capsicum annuum Pepper Genome v2.0 - splice junctions NOT included", "Capsicum_annuum_Pepper_Genome_v2.0", false], ["Chicken (Gallus gallus): galGal6", "galGal6", false], ["Chicken Oct. 2021 (bGalGal1.pat.whiteleghornlayer.GRCg7w_WZ) (GCF_016700215.2)", "GCF_016700215.2", false], ["Chlamydomonas reinhardtii JGI v5.5 - splice junctions NOT included", "Chlamydomonas_reinhardtii_JGI_v5.5", false], ["Cicer arietinum LIS v1.0 - splice junctions NOT included", "Cicer_arietinum_LIS_v1.0", false], ["Citrullus lanatus Cucurbit Genomics Database - splice junctions NOT included", "Citrullus_lanatus_Cucurbit_Genomics_Database", false], ["Cucumis melo Melonomics v3.5 - splice junctions NOT included", "Cucumis_melo_Melonomics_v3.5", false], ["Cucumis sativus L. JGI v1.0 - splice junctions NOT included", "Cucumis_sativus_L._JGI_v1.0", false], ["Dog Oct. 2020 (Dog10K_Boxer_Tasha/canFam6) (canFam6)", "canFam6", false], ["Elaeis guineensis NCBI Genome v1.0 - splice junctions NOT included", "Elaeis_guineensis_NCBI_Genome_v1.0", false], ["Erythranthe guttata JGI v2.0 - splice junctions NOT included", "Erythranthe_guttata_JGI_v2.0", false], ["Escherichia coli K12 (eschColi_K12)", "eschColi_K12", false], ["Fly (Drosophila melanogaster): dm3 Full", "dm3", false], ["Fly (Drosophila melanogaster): dm6 Full", "dm6", false], ["Foshan strain genomic contigs sequences, AaloF1 assembly. ", "AaloF1", false], ["Genome Reference Consortium Human Reference 38 (snp_tran)", "grch38", false], ["Genome Reference Consortium Mouse Reference 38 (snp_tran)", "grcm38", false], ["Glycine max JGI Glyma1.1 annotation of the chromosome-based Glyma1 assembly - splice junctions NOT included", "Glycine_max_JGI_Glyma1.1_annotation_of_the_chromosome-based_Glyma1_assembly", false], ["Glycine max JGI Wm82.a2.v1 - splice junctions NOT included", "Glycine_max_JGI_Wm82.a2.v1", false], ["Gossypium raimondii JGI v2.1 - splice junctions NOT included", "Gossypium_raimondii_JGI_v2.1", false], ["Hordeum vulgare MIPS - splice junctions NOT included", "Hordeum_vulgare_MIPS", false], ["Horse Jan. 2018 (EquCab3.0/equCab3)", "equCab3", false], ["Human (Homo sapiens): hg19 Full", "hg19", false], ["Human CHM13 2.0 (T2T Consortium) Jan. 2022", "CHM13_T2T_v2.0", false], ["Human Dec. 2013 (GRCh38/hg38) (hg38)", "hg38", false], ["Influenza A virus (A/seal/Mass/1-SC35M/1980(H7N7))", "h7n7_360722", false], ["Lotus japonicus Kazusa 2.5 - splice junctions NOT included", "Lotus_japonicus_Kazusa_2.5", false], ["Manihot esculenta Cassava4 - splice junctions NOT included", "Manihot_esculenta_Cassava4", false], ["Manihot esculenta JGI v6.1 - splice junctions NOT included", "Manihot_esculenta_JGI_v6.1", false], ["Medicago truncatula JCVI 4.0 - splice junctions NOT included", "Medicago_truncatula_JCVI_4.0", false], ["Medicago truncatula JGI Mt4.0v1 - splice junctions NOT included", "Medicago_truncatula_JGI_Mt4.0v1", false], ["Mouse (Mus Musculus): mm10 Full", "mm10", false], ["Mouse (Mus Musculus): mm39 Full", "mm39", false], ["Mouse (Mus Musculus): mm9 Full", "mm9", false], ["Mouse (Mus musculus): mm9 with ERCC spike-in", "mm9_ERCC", false], ["Musa acuminata Banana Genome v1.0 - splice junctions NOT included", "Musa_acuminata_Banana_Genome_v1.0", false], ["Musa acuminata Banana Genome v2.0 - splice junctions NOT included", "Musa_acuminata_Banana_Genome_v2.0", false], ["Musa acuminata Genescope-Cirad - splice junctions NOT included", "Musa_acuminata_Genescope-Cirad", false], ["Nelumbo nucifera LOTUS-DB v1.1 - splice junctions NOT included", "Nelumbo_nucifera_LOTUS-DB_v1.1", false], ["Oikopleura dioica (od01)", "od01", false], ["Oryza brachyantha Ensembl Plants v1.4b - splice junctions NOT included", "Oryza_brachyantha_Ensembl_Plants_v1.4b", false], ["Oryza sativa ssp. indica MBKBASE v1.0 - splice junctions NOT included", "Oryza_sativa_ssp._indica_MBKBASE_v1.0", false], ["Ostreococcus lucimarinus JGI v2.0 assembly and annotation - splice junctions NOT included", "Ostreococcus_lucimarinus_JGI_v2.0_assembly_and_annotation", false], ["Physcomitrella patens JGI v3.3 - splice junctions NOT included", "Physcomitrella_patens_JGI_v3.3", false], ["Pig Aug. 2011 (SGSC Sscrofa10.2/susScr3) (susScr3)", "susScr3", false], ["Pig Feb. 2017 (Sscrofa11.1/susScr11) (susScr11)", "susScr11", false], ["Populus trichocarpa JGI v3.1 - splice junctions NOT included", "Populus_trichocarpa_JGI_v3.1", false], ["Rat (Rattus norvegicus): rn5", "rn5", false], ["Rat Jul. 2014 (RGSC 6.0/rn6) (rn6)", "rn6", false], ["Rattus norvegicus Nov. 2020 (mRatBN7.2/rn7)", "rn7", false], ["Ricinus communis JGI v0.1 - splice junctions NOT included", "Ricinus_communis_JGI_v0.1", false], ["Rock pigeon Dec 2017 (Cliv_2.1/colLiv2)", "colLiv2.1", false], ["S. cerevisiae Apr. 2011 (SacCer_Apr2011/sacCer3) (sacCer3)", "sacCer3", false], ["S. lycopersicum (Tomato) Feb 2019 (SL4.0)", "SL4.0", false], ["SARS-CoV-2 isolate Wuhan-Hu-1, complete genome (NC_045512)", "NC_045512.2", false], ["Saccharum spontaneum v20190103 - splice junctions NOT included", "Saccharum_spontaneum_v20190103", false], ["Schrenkiella parvula Thellungiella v2.0 (TpV84) - splice junctions NOT included", "Schrenkiella_parvula_Thellungiella_v2.0_TpV84", false], ["Setaria italica JGI 8.3X chromosome-scale assembly release 2.0, annotation version 2.1 - splice junctions NOT included", "Setaria_italica_JGI_8.3X_chromosome-scale_assembly_release_2.0_annotation_version_2.1", false], ["Solanum lycopersicum ITAG 2.3 - splice junctions NOT included", "Solanum_lycopersicum_ITAG_2.3", false], ["Solanum lycopersicum Sol Genomics itag2.4 - splice junctions NOT included", "Solanum_lycopersicum_Sol_Genomics_itag2.4", false], ["Solanum tuberosum JGI v4.03 - splice junctions NOT included", "Solanum_tuberosum_JGI_v4.03", false], ["Sorghum bicolor JGI 1.4 - splice junctions NOT included", "Sorghum_bicolor_JGI_1.4", false], ["Sorghum bicolor JGI v3.1 - splice junctions NOT included", "Sorghum_bicolor_JGI_v3.1", false], ["Thellungiella parvula TpV84 - splice junctions NOT included", "Thellungiella_parvula_TpV84", false], ["Triticum turgidum Svevo v1.0 - splice junctions NOT included", "Triticum_turgidum_Svevo_v1.0", false], ["Vigna radiata var. radiata LIS v6 - splice junctions NOT included", "Vigna_radiata_var._radiata_LIS_v6", false], ["West African lungfish Jul 2021 (Protopterus annectens, PAN1.0) (GCF_019279795.1)", "GCF_019279795.1", false], ["Xenopus tropicalis (xenTro9.1)", "xenTro9.1", false], ["Zebrafish Jul. 2010 (Zv9/danRer7) (danRer7)", "danRer7", false], ["Zebrafish May 2017 (GRCz11/danRer11) (danRer11)", "danRer11", false], ["Zebrafish Sep. 2014 (GRCz10/danRer10) (danRer10)", "danRer10", false], ["Zostera marina JGI v2.2 - splice junctions NOT included", "Zostera_marina_JGI_v2.2", false], ["anoGam3", "anoGam3", false], ["bosTau8", "bosTau8", false], ["bosTau9", "bosTau9", false], ["canFam3", "canFam3", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "history", "inputs": [{"model_class": "DataToolParameter", "name": "history_item", "argument": null, "type": "data", "label": "Select the reference genome", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}], "test_param": {"model_class": "SelectToolParameter", "name": "source", "argument": null, "type": "select", "label": "Source for the reference genome", "help": "Built-in references were created using default options", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "indexed", "options": [["Use a built-in genome", "indexed", true], ["Use a genome from history", "history", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "library", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "single", "inputs": [{"model_class": "DataToolParameter", "name": "input_1", "argument": null, "type": "data", "label": "FASTA/Q file", "help": "Must be of datatype \"fastqsanger\" or \"fasta\"", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastqsanger", "fastqsanger.gz", "fastqsanger.bz2", "fasta"], "edam": {"edam_formats": ["format_1932", "format_1932", "format_1932", "format_1929"], "edam_data": ["data_2044", "data_2044", "data_2044", "data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "SelectToolParameter", "name": "rna_strandness", "argument": "--rna-strandness", "type": "select", "label": "Specify strand information", "help": "'F' means a read corresponds to a transcript. 'R' means a read corresponds to the reverse complemented counterpart of a transcript. With this option being used, every read alignment will have an XS attribute tag: '+' means a read belongs to a transcript on '+' strand of genome. '-' means a read belongs to a transcript on '-' strand of genome.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "options": [["Unstranded", "", false], ["Forward (F)", "F", false], ["Reverse (R)", "R", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "paired", "inputs": [{"model_class": "DataToolParameter", "name": "input_1", "argument": null, "type": "data", "label": "FASTA/Q file #1", "help": "Must be of datatype \"fastqsanger\"or \"fasta\"", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastqsanger", "fastqsanger.gz", "fastqsanger.bz2", "fasta"], "edam": {"edam_formats": ["format_1932", "format_1932", "format_1932", "format_1929"], "edam_data": ["data_2044", "data_2044", "data_2044", "data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "input_2", "argument": null, "type": "data", "label": "FASTA/Q file #2", "help": "Must be of datatype \"fastqsanger\"or \"fasta\"", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastqsanger", "fastqsanger.gz", "fastqsanger.bz2", "fasta"], "edam": {"edam_formats": ["format_1932", "format_1932", "format_1932", "format_1929"], "edam_data": ["data_2044", "data_2044", "data_2044", "data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "SelectToolParameter", "name": "rna_strandness", "argument": "--rna-strandness", "type": "select", "label": "Specify strand information", "help": "'FR' means a read corresponds to a transcript. 'RF' means a read corresponds to the reverse complemented counterpart of a transcript. With this option being used, every read alignment will have an XS attribute tag: '+' means a read belongs to a transcript on '+' strand of genome. '-' means a read belongs to a transcript on '-' strand of genome.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "options": [["Unstranded", "", false], ["Forward (FR)", "FR", false], ["Reverse (RF)", "RF", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "paired_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "defaults", "inputs": []}, {"model_class": "ConditionalWhen", "value": "advanced", "inputs": [{"model_class": "SelectToolParameter", "name": "fr_rf_ff", "argument": "--fr/--rf/--ff", "type": "select", "label": "Select the upstream/downstream mate orientations for a valid paired-end alignment against the forward reference strand", "help": "E.g., if `--fr` is specified and there is a candidate paired-end alignment where mate 1 appears upstream of the reverse complement of mate 2 and the fragment length constraints (`-I` and `-X`) are met, that alignment is valid.  Also, if mate 2 appears upstream of the reverse complement of mate 1 and all other constraints are met, that too is valid. `--rf` likewise requires that an upstream mate1 be reverse-complemented and a downstream mate2 be forward-oriented. `--ff` requires both an upstream mate 1 and a downstream mate 2 to be forward-oriented; Default=--fr (appropriate for Illumina's Paired-end Sequencing Assay)", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "--fr", "options": [["--fr", "--fr", true], ["--rf", "--rf", false], ["--ff", "--ff", false]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "BooleanToolParameter", "name": "no_mixed", "argument": "--no-mixed", "type": "boolean", "label": "Disable no-mixed behavior", "help": "By default, when `hisat2` cannot find a concordant or discordant alignment for a pair, it then tries to find alignments for the individual mates; default: False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-mixed", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "no_discordant", "argument": "--no-discordant", "type": "boolean", "label": "Disable no-discordant behavior", "help": "--no-discordant; By default, `hisat2` looks for discordant alignments if it cannot find any concordant alignments. A discordant alignment is an alignment where both mates align uniquely, but that does not satisfy the paired-end constraints (`--fr`/`--rf`/`--ff`, `-I`, `-X`); default: False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-discordant", "falsevalue": ""}]}], "test_param": {"model_class": "SelectToolParameter", "name": "paired_options_selector", "argument": null, "type": "select", "label": "Paired-end options", "help": "See \"Alignment Options\" section of Help below for information", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "defaults", "options": [["Use default values", "defaults", false], ["Specify paired-end parameters", "advanced", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "paired_collection", "inputs": [{"model_class": "DataCollectionToolParameter", "name": "input_1", "argument": null, "type": "data_collection", "label": "Paired Collection", "help": "Must be of datatype \"fastqsanger\" or \"fasta\"", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastqsanger", "fastqsanger.gz", "fastqsanger.bz2", "fasta"], "multiple": false, "options": {"hda": [], "hdca": [], "dce": []}, "tag": null}, {"model_class": "SelectToolParameter", "name": "rna_strandness", "argument": "--rna-strandness", "type": "select", "label": "Specify strand information", "help": "'FR' means a read corresponds to a transcript. 'RF' means a read corresponds to the reverse complemented counterpart of a transcript. With this option being used, every read alignment will have an XS attribute tag: '+' means a read belongs to a transcript on '+' strand of genome. '-' means a read belongs to a transcript on '-' strand of genome.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "options": [["Unstranded", "", false], ["Forward (FR)", "FR", false], ["Reverse (RF)", "RF", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "paired_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "defaults", "inputs": []}, {"model_class": "ConditionalWhen", "value": "advanced", "inputs": [{"model_class": "SelectToolParameter", "name": "fr_rf_ff", "argument": "--fr/--rf/--ff", "type": "select", "label": "Select the upstream/downstream mate orientations for a valid paired-end alignment against the forward reference strand", "help": "E.g., if `--fr` is specified and there is a candidate paired-end alignment where mate 1 appears upstream of the reverse complement of mate 2 and the fragment length constraints (`-I` and `-X`) are met, that alignment is valid.  Also, if mate 2 appears upstream of the reverse complement of mate 1 and all other constraints are met, that too is valid. `--rf` likewise requires that an upstream mate1 be reverse-complemented and a downstream mate2 be forward-oriented. `--ff` requires both an upstream mate 1 and a downstream mate 2 to be forward-oriented; Default=--fr (appropriate for Illumina's Paired-end Sequencing Assay)", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "--fr", "options": [["--fr", "--fr", true], ["--rf", "--rf", false], ["--ff", "--ff", false]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "BooleanToolParameter", "name": "no_mixed", "argument": "--no-mixed", "type": "boolean", "label": "Disable no-mixed behavior", "help": "By default, when `hisat2` cannot find a concordant or discordant alignment for a pair, it then tries to find alignments for the individual mates; default: False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-mixed", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "no_discordant", "argument": "--no-discordant", "type": "boolean", "label": "Disable no-discordant behavior", "help": "--no-discordant; By default, `hisat2` looks for discordant alignments if it cannot find any concordant alignments. A discordant alignment is an alignment where both mates align uniquely, but that does not satisfy the paired-end constraints (`--fr`/`--rf`/`--ff`, `-I`, `-X`); default: False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-discordant", "falsevalue": ""}]}], "test_param": {"model_class": "SelectToolParameter", "name": "paired_options_selector", "argument": null, "type": "select", "label": "Paired-end options", "help": "See \"Alignment Options\" section of Help below for information", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "defaults", "options": [["Use default values", "defaults", false], ["Specify paired-end parameters", "advanced", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "paired_interleaved", "inputs": [{"model_class": "DataToolParameter", "name": "input_1", "argument": null, "type": "data", "label": "Interleaved FASTA/Q file", "help": "Must be of datatype \"fastqsanger\" or \"fasta\". --interleaved", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastqsanger", "fastqsanger.gz", "fastqsanger.bz2", "fasta"], "edam": {"edam_formats": ["format_1932", "format_1932", "format_1932", "format_1929"], "edam_data": ["data_2044", "data_2044", "data_2044", "data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "SelectToolParameter", "name": "rna_strandness", "argument": "--rna-strandness", "type": "select", "label": "Specify strand information", "help": "'FR' means a read corresponds to a transcript. 'RF' means a read corresponds to the reverse complemented counterpart of a transcript. With this option being used, every read alignment will have an XS attribute tag: '+' means a read belongs to a transcript on '+' strand of genome. '-' means a read belongs to a transcript on '-' strand of genome.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "options": [["Unstranded", "", false], ["Forward (FR)", "FR", false], ["Reverse (RF)", "RF", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "paired_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "defaults", "inputs": []}, {"model_class": "ConditionalWhen", "value": "advanced", "inputs": [{"model_class": "SelectToolParameter", "name": "fr_rf_ff", "argument": "--fr/--rf/--ff", "type": "select", "label": "Select the upstream/downstream mate orientations for a valid paired-end alignment against the forward reference strand", "help": "E.g., if `--fr` is specified and there is a candidate paired-end alignment where mate 1 appears upstream of the reverse complement of mate 2 and the fragment length constraints (`-I` and `-X`) are met, that alignment is valid.  Also, if mate 2 appears upstream of the reverse complement of mate 1 and all other constraints are met, that too is valid. `--rf` likewise requires that an upstream mate1 be reverse-complemented and a downstream mate2 be forward-oriented. `--ff` requires both an upstream mate 1 and a downstream mate 2 to be forward-oriented; Default=--fr (appropriate for Illumina's Paired-end Sequencing Assay)", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "--fr", "options": [["--fr", "--fr", true], ["--rf", "--rf", false], ["--ff", "--ff", false]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "BooleanToolParameter", "name": "no_mixed", "argument": "--no-mixed", "type": "boolean", "label": "Disable no-mixed behavior", "help": "By default, when `hisat2` cannot find a concordant or discordant alignment for a pair, it then tries to find alignments for the individual mates; default: False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-mixed", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "no_discordant", "argument": "--no-discordant", "type": "boolean", "label": "Disable no-discordant behavior", "help": "--no-discordant; By default, `hisat2` looks for discordant alignments if it cannot find any concordant alignments. A discordant alignment is an alignment where both mates align uniquely, but that does not satisfy the paired-end constraints (`--fr`/`--rf`/`--ff`, `-I`, `-X`); default: False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-discordant", "falsevalue": ""}]}], "test_param": {"model_class": "SelectToolParameter", "name": "paired_options_selector", "argument": null, "type": "select", "label": "Paired-end options", "help": "See \"Alignment Options\" section of Help below for information", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "defaults", "options": [["Use default values", "defaults", false], ["Specify paired-end parameters", "advanced", false]], "display": null, "multiple": false, "textable": false}}]}], "test_param": {"model_class": "SelectToolParameter", "name": "type", "argument": null, "type": "select", "label": "Is this a single or paired library", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "single", "options": [["Single-end", "single", false], ["Paired-end", "paired", false], ["Paired-end Dataset Collection", "paired_collection", false], ["Paired-end data from single interleaved dataset", "paired_interleaved", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Section", "name": "sum", "type": "section", "title": "Summary Options", "help": null, "expanded": false, "inputs": [{"model_class": "BooleanToolParameter", "name": "new_summary", "argument": "--new-summary", "type": "boolean", "label": "Output alignment summary in a more machine-friendly style.", "help": "Select this option for compatibility with MultiQC", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}, {"model_class": "BooleanToolParameter", "name": "summary_file", "argument": "--summary-file", "type": "boolean", "label": "Print alignment summary to a file.", "help": "Output alignment summary to a file in addition to stderr.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}]}, {"model_class": "Section", "name": "adv", "type": "section", "title": "Advanced Options", "help": null, "expanded": false, "inputs": [{"model_class": "Conditional", "name": "input_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "defaults", "inputs": []}, {"model_class": "ConditionalWhen", "value": "advanced", "inputs": [{"model_class": "IntegerToolParameter", "name": "skip", "argument": "-s", "type": "integer", "label": "Skip the first N reads or pairs in the input", "help": "default: 0", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "qupto", "argument": "-u", "type": "integer", "label": "Align the first N reads or read pairs from the input (after the first N reads or pairs have been skipped), then stop", "help": "default: no limit", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "trim5", "argument": "-5", "type": "integer", "label": "Trim 5' end", "help": "Trim N bases from 5' (left) end of each read before alignment, default: 0", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "trim3", "argument": "-3", "type": "integer", "label": "Trim 3' end", "help": "Trim N bases from 3' (right) end of each read before alignment, default: 0", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "qv_encoding", "argument": null, "type": "select", "label": "Select quality score encoding", "help": "See help below for more details", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "--phred33", "options": [["Input qualities are ASCII chars equal to the Phred quality plus 33. This is also called the \"Phred+33\" encoding, which is used by the very latest Illumina pipelines (--phred33)", "--phred33", true], ["Input qualities are ASCII chars equal to the Phred quality plus 64. This is also called the \"Phred+64\" encoding (--phred64)", "--phred64", false]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "BooleanToolParameter", "name": "solexa_quals", "argument": "--solexa-quals", "type": "boolean", "label": "Convert input qualities from Solexa (which can be negative) to Phred (which can't). This scheme was used in older Illumina GA Pipeline versions (prior to 1.3)", "help": "--solexa-quals; default: False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--solexa-quals", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "int_quals", "argument": "--int-quals", "type": "boolean", "label": "Are quality values provided as space separated integers?", "help": "Quality values are represented in the read input file as space-separated ASCII integers, e.g., 40 40 30 40..., rather than ASCII characters, e.g., II?I.... Integers are treated as being on the Phred quality scale unless --solexa-quals is also specified [default: False]", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--int-quals", "falsevalue": ""}]}], "test_param": {"model_class": "SelectToolParameter", "name": "input_options_selector", "argument": null, "type": "select", "label": "Input options", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "defaults", "options": [["Use default values", "defaults", false], ["Specify input options", "advanced", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "alignment_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "defaults", "inputs": []}, {"model_class": "ConditionalWhen", "value": "advanced", "inputs": [{"model_class": "SelectToolParameter", "name": "function_type", "argument": "--n-ceil", "type": "select", "label": "Function governing the maximum number of ambiguous characters (usually Ns and/or .s) allowed in a read as a function of read length", "help": "Reads exceeding this ceiling are filtered out", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "L", "options": [["Constant [f(x) = B]", "C", false], ["Linear [f(x) = B + A * x]", "L", true], ["Square root [f(x) = B + A * x\u00b2]", "S", false], ["Natural logarithm [f(x) = B + A * log(x)]", "G", false]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "FloatToolParameter", "name": "constant_term", "argument": null, "type": "float", "label": "Constant term (B)", "help": "Constant term for the above function", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.0", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "coefficient", "argument": null, "type": "float", "label": "Coefficient (A)", "help": "Coefficient for the above function", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.15", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "ignore_quals", "argument": "--ignore-quals", "type": "boolean", "label": "Ignore quality values", "help": "When calculating a mismatch penalty, always consider the quality value at the mismatched position to be the highest possible, regardless of the actual value. I.e. input is treated as though all quality values are high. This is also the default behavior when the input doesn't specify quality values", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--ignore-quals", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "skip_forward", "argument": "--nofw", "type": "boolean", "label": "Skip forward strand of reference", "help": "If --nofw is specified, HISAT2 will not attempt to align unpaired reads to the forward (Watson) reference strand. In paired-end mode, --nofw and --norc pertain to the fragments; i.e. specifying --nofw causes HISAT2 to explore only those paired-end configurations corresponding to fragments from the reverse-complement (Crick) strand", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--nofw", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "skip_reverse", "argument": "--norc", "type": "boolean", "label": "Skip reverse strand of reference", "help": "If --norc is specified, HISAT2 will not attempt to align unpaired reads against the reverse-complement (Crick) reference strand. In paired-end mode, --nofw and --norc pertain to the fragments; i.e. specifying --norc causes HISAT2 to explore only those paired-end configurations corresponding to fragments from the forward-complement (Watson) strand", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--norc", "falsevalue": ""}]}], "test_param": {"model_class": "SelectToolParameter", "name": "alignment_options_selector", "argument": null, "type": "select", "label": "Alignment options", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "defaults", "options": [["Use default values", "defaults", false], ["Specify alignment options", "advanced", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "scoring_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "defaults", "inputs": []}, {"model_class": "ConditionalWhen", "value": "advanced", "inputs": [{"model_class": "FloatToolParameter", "name": "constant_term", "argument": null, "type": "float", "label": "Constant term (B)", "help": "Constant term for the above function", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.0", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "coefficient", "argument": null, "type": "float", "label": "Coefficient (A)", "help": "Coefficient for the above function", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-0.2", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "max_mismatch", "argument": "--mp", "type": "integer", "label": "Maximum mismatch penalty", "help": "Sets the maximum mismatch penalty. A number less than or equal to MX and greater than or equal to MN is subtracted from the alignment score for each position where a read character aligns to a reference character, the characters do not match, and neither is an N. If --ignore-quals is specified, the number subtracted quals MX. Otherwise, the number subtracted is MN + floor( (MX-MN)(MIN(Q, 40.0)/40.0) ) where Q is the Phred quality value", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "6", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "min_mismatch", "argument": "--mp", "type": "integer", "label": "Minimum mismatch penalty", "help": "Sets the minimum mismatch penalty. A number less than or equal to MX and greater than or equal to MN is subtracted from the alignment score for each position where a read character aligns to a reference character, the characters do not match, and neither is an N. If --ignore-quals is specified, the number subtracted quals MX. Otherwise, the number subtracted is MN + floor( (MX-MN)(MIN(Q, 40.0)/40.0) ) where Q is the Phred quality value", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "2", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "soft_clip_penalty_max", "argument": "--sp", "type": "integer", "label": "Maximum soft-clipping penalty", "help": "Sets the maximum (MX) penalty for soft-clipping per base. A number less than or equal to MX and greater than or equal to MN is subtracted from the alignment score for each position. The number subtracted is MN + floor( (MX-MN)(MIN(Q, 40.0)/40.0) ) where Q is the Phred quality value", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "2", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "soft_clip_penalty_min", "argument": "--sp", "type": "integer", "label": "Minimum soft-clipping penalty", "help": "Sets the minimum (MN) penalty for soft-clipping per base. A number less than or equal to MX and greater than or equal to MN is subtracted from the alignment score for each position. The number subtracted is MN + floor( (MX-MN)(MIN(Q, 40.0)/40.0) ) where Q is the Phred quality value", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "no_softclip", "argument": "--no-softclip", "type": "boolean", "label": "Allow soft-clipping", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "", "falsevalue": "--no-softclip"}, {"model_class": "IntegerToolParameter", "name": "ambiguous_penalty", "argument": "--np", "type": "integer", "label": "Ambiguous read penalty", "help": "Sets penalty for positions where the read, reference, or both, contain an ambiguous character such as N", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "read_open_penalty", "argument": "--rdg", "type": "integer", "label": "Read gap open penalty", "help": "A read gap of length N gets a penalty of [open_penalty] + N * [extend_penalty]", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "5", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "read_extend_penalty", "argument": "--rdg", "type": "integer", "label": "Read gap extend penalty", "help": "A read gap of length N gets a penalty of [open_penalty] + N * [extend_penalty]", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "3", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "ref_open_penalty", "argument": "--rfg", "type": "integer", "label": "Reference gap open penalty", "help": "A reference gap of length N gets a penalty of [open_penalty] + N * [extend_penalty]", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "5", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "ref_extend_penalty", "argument": "--rfg", "type": "integer", "label": "Reference gap extend penalty", "help": "A reference gap of length N gets a penalty of [open_penalty] + N * [extend_penalty]", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "3", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "function_type", "argument": "--score-min", "type": "select", "label": "Function governing the minimum alignment score needed for an alignment to be considered \"valid\" (i.e. good enough to report)", "help": "This is a function of read length", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "L", "options": [["Constant [f(x) = B]", "C", false], ["Linear [f(x) = B + A * x]", "L", true], ["Square root [f(x) = B + A * x\u00b2]", "S", false], ["Natural logarithm [f(x) = B + A * log(x)]", "G", false]], "display": "radio", "multiple": false, "textable": false}]}], "test_param": {"model_class": "SelectToolParameter", "name": "scoring_options_selector", "argument": null, "type": "select", "label": "Scoring options", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "defaults", "options": [["Use default values", "defaults", false], ["Specify scoring options", "advanced", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "spliced_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "defaults", "inputs": []}, {"model_class": "ConditionalWhen", "value": "advanced", "inputs": [{"model_class": "IntegerToolParameter", "name": "canonical_penalty", "argument": "--pen-cansplice", "type": "integer", "label": "Penalty for canonical splice sites", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "noncanonical_penalty", "argument": "--pen-noncansplice", "type": "integer", "label": "Penalty for non-canonical splice sites", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "12", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "function_type", "argument": "--pen-canintronlen", "type": "select", "label": "Penalty function for long introns with canonical splice sites", "help": "Alignments with shorter introns are preferred to those with longer ones", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "G", "options": [["Constant [f(x) = B]", "C", false], ["Linear [f(x) = B + A * x]", "L", false], ["Square root [f(x) = B + A * x\u00b2]", "S", false], ["Natural logarithm [f(x) = B + A * log(x)]", "G", true]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "FloatToolParameter", "name": "constant_term", "argument": null, "type": "float", "label": "Constant term (B)", "help": "Constant term for the above function", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-8.0", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "coefficient", "argument": null, "type": "float", "label": "Coefficient (A)", "help": "Coefficient for the above function", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1.0", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "nc_function_type", "argument": "--pen-noncanintronlen", "type": "select", "label": "Penalty function for long introns with non-canonical splice sites", "help": "Alignments with shorter introns are preferred to those with longer ones", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "G", "options": [["Constant [f(x) = B]", "C", false], ["Linear [f(x) = B + A * x]", "L", false], ["Square root [f(x) = B + A * x\u00b2]", "S", false], ["Natural logarithm [f(x) = B + A * log(x)]", "G", true]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "FloatToolParameter", "name": "nc_constant_term", "argument": null, "type": "float", "label": "Constant term (B)", "help": "Constant term for the above function", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-8.0", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "nc_coefficient", "argument": null, "type": "float", "label": "Coefficient (A)", "help": "Coefficient for the above function", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1.0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "min_intron", "argument": null, "type": "integer", "label": "Minimum intron length", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "20", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "max_intron", "argument": null, "type": "integer", "label": "Maximum intron length", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "500000", "area": false, "datalist": []}, {"model_class": "Conditional", "name": "no_spliced_alignment_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "--no-spliced-alignment", "inputs": [{"model_class": "IntegerToolParameter", "name": "minins", "argument": "-I", "type": "integer", "label": "Minimum fragment length for valid paired-end alignments", "help": "E.g. if -I 60 is specified and a paired-end alignment consists of two 20-bp alignments in the appropriate orientation with a 20-bp gap between them, that alignment is considered valid (as long as -X is also satisfied). A 19-bp gap would not be valid in that case. If trimming options -3 or -5 are also used, the -I constraint is applied with respect to the untrimmed mates. The larger the difference between -I and -X, the slower HISAT2 will run. This is because larger differences between -I and -X require that HISAT2 scan a larger window to determine if a concordant alignment exists. For typical fragment length ranges (200 to 400 nucleotides), HISAT2 is very efficient", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "maxins", "argument": "-X", "type": "integer", "label": "Maximum fragment length for valid paired-end alignments", "help": "E.g. if -X 100 is specified and a paired-end alignment consists of two 20-bp alignments in the proper orientation with a 60-bp gap between them, that alignment is considered valid (as long as -I is also satisfied). A 61-bp gap would not be valid in that case. If trimming options -3 or -5 are also used, the -X constraint is applied with respect to the untrimmed mates, not the trimmed mates. The larger the difference between -I and -X, the slower HISAT2 will run. This is because larger differences between -I and -X require that HISAT2 scan a larger window to determine if a concordant alignment exists. For typical fragment length ranges (200 to 400 nucleotides), HISAT2 is very efficient", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "500", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "no_spliced_alignment", "argument": "--no-spliced-alignment", "type": "select", "label": "Disable spliced alignment", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "options": [["False", "", false], ["True", "--no-spliced-alignment", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "DataToolParameter", "name": "known_splice_gtf", "argument": null, "type": "data", "label": "GTF file with known splice sites", "help": "", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["gtf"], "edam": {"edam_formats": ["format_2306"], "edam_data": ["data_1255"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "SelectToolParameter", "name": "tma", "argument": null, "type": "select", "label": "Transcriptome assembly reporting", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "options": [["Use default reporting", "", false], ["Report only those alignments within known transcripts", "--tmo", false], ["Report alignments tailored for transcript assemblers including StringTie", "--dta", false], ["Report alignments tailored specifically for Cufflinks", "--dta-cufflinks", false]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "BooleanToolParameter", "name": "notmplen", "argument": "--no-templatelen-adjustment", "type": "boolean", "label": "Disable automatic template length adjustment for RNA-seq reads", "help": "Default: false", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-templatelen-adjustment", "falsevalue": ""}]}], "test_param": {"model_class": "SelectToolParameter", "name": "spliced_options_selector", "argument": null, "type": "select", "label": "Spliced alignment options", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "defaults", "options": [["Use default values", "defaults", false], ["Specify spliced alignment options", "advanced", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "reporting_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "defaults", "inputs": []}, {"model_class": "ConditionalWhen", "value": "advanced", "inputs": [{"model_class": "IntegerToolParameter", "name": "max_primary", "argument": "-k", "type": "integer", "label": "Primary alignments", "help": "Search for at most K distinct, primary alignments for each read. Primary alignments mean alignments whose alignment score is equal or higher than any other alignments. The search terminates when it can't find more distinct valid alignments, or when it finds K, whichever happens first. The alignment score for a paired-end alignment equals the sum of the alignment scores of the individual mates. Each reported read or pair alignment beyond the first has the SAM 'secondary' bit (which equals 256) set in its FLAGS field. For reads that have more than K distinct, valid alignments, HISAT2 does not guarantee that the K alignments reported are the best possible in terms of alignment score. HISAT2 is not designed with large values for -k in mind, so when aligning reads to long repetitive genomes, a large K can be very, very slow. Default: 5 (HFM) or 10 (HGFM)", "refresh_on_change": false, "min": 0, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "max_seeds", "argument": "--max-seeds", "type": "integer", "label": "Maximum number of seeds that will be extended", "help": "HISAT2, like other aligners, uses seed-and-extend approaches. HISAT2 tries to extend seeds to full-length alignments. HISAT2 extends up to these many seeds and skips the rest of the seeds. Large values for --max-seeds may improve alignment sensitivity, but HISAT2 is not designed with large values for --max-seeds in mind, and when aligning reads to long repetitive genomes, a large --max-seeds can be very, very slow. Default: 5 (HFM) or 10 (HGFM)", "refresh_on_change": false, "min": 0, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "secondary", "argument": "--secondary", "type": "boolean", "label": "Report secondary alignments", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--secondary", "falsevalue": ""}]}], "test_param": {"model_class": "SelectToolParameter", "name": "reporting_options_selector", "argument": null, "type": "select", "label": "Reporting options", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "defaults", "options": [["Use default values", "defaults", false], ["Specify reporting options", "advanced", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "output_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "defaults", "inputs": []}, {"model_class": "ConditionalWhen", "value": "advanced", "inputs": [{"model_class": "BooleanToolParameter", "name": "unaligned_file", "argument": "--un/--un-conc", "type": "boolean", "label": "Write unaligned reads (in fastq format) to separate file(s)", "help": "This triggers --un parameter for single reads and --un-conc for paired reads", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}, {"model_class": "BooleanToolParameter", "name": "aligned_file", "argument": "--al/--al-conc", "type": "boolean", "label": "Write aligned reads (in fastq format) to separate file(s)", "help": "This triggers --al parameter for single reads and --al-conc for paired reads", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}]}], "test_param": {"model_class": "SelectToolParameter", "name": "output_options_selector", "argument": null, "type": "select", "label": "Output options", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "defaults", "options": [["Use default values", "defaults", false], ["Specify output options", "advanced", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "other_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "defaults", "inputs": []}, {"model_class": "ConditionalWhen", "value": "advanced", "inputs": [{"model_class": "IntegerToolParameter", "name": "seed", "argument": "--seed", "type": "integer", "label": "Use this number as the seed for pseudo-random number generator", "help": "Default=0", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "non_deterministic", "argument": "--non-deterministic", "type": "boolean", "label": "Re-initialize the pseudo-random generator for each read using the current time", "help": "see Help below for explanation of this option; default: False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--non-deterministic", "falsevalue": ""}]}], "test_param": {"model_class": "SelectToolParameter", "name": "other_options_selector", "argument": null, "type": "select", "label": "Other options", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "defaults", "options": [["Use default values", "defaults", false], ["Specify other options", "advanced", false]], "display": null, "multiple": false, "textable": false}}]}], "outputs": [{"model_class": "ToolOutput", "name": "output_alignments", "format": "bam", "label": "${tool.name} on ${on_string}: aligned reads (BAM)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_2572", "edam_data": "data_0863", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "output_unaligned_reads_l", "format": "fastqsanger", "label": "${tool.name} on ${on_string}: unaligned reads (L)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_1932", "edam_data": "data_2044", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "output_aligned_reads_l", "format": "fastqsanger", "label": "${tool.name} on ${on_string}: aligned reads (L)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_1932", "edam_data": "data_2044", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "output_unaligned_reads_r", "format": "fastqsanger", "label": "${tool.name} on ${on_string}: unaligned reads (R)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_1932", "edam_data": "data_2044", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "output_aligned_reads_r", "format": "fastqsanger", "label": "${tool.name} on ${on_string}: aligned reads (R)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_1932", "edam_data": "data_2044", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "summary_file", "format": "txt", "label": "${tool.name} on ${on_string}: Mapping summary", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "summary.txt", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}], "panel_section_id": "mapping", "panel_section_name": "Mapping", "form_style": "regular"}