{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/iuc/drep_compare/drep_compare/3.5.0+galaxy2", "name": "dRep compare", "version": "3.5.0+galaxy2", "description": "compare a list of genomes", "labels": [], "edam_operations": ["operation_3209"], "edam_topics": ["topic_0080", "topic_0622", "topic_3174"], "hidden": "", "is_workflow_compatible": true, "xrefs": [{"value": "drep", "reftype": "bio.tools"}], "tool_shed_repository": {"name": "drep_compare", "owner": "iuc", "changeset_revision": "c2f471480624", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "DataToolParameter", "name": "genomes", "argument": "--genomes", "type": "data", "label": "Genomes", "help": "One genome per input fasta. At least two genomes are needed.", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": true, "min": 2, "max": null, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "Section", "name": "comp_clust", "type": "section", "title": "Genome comparison and clustering", "help": null, "expanded": false, "inputs": [{"model_class": "Conditional", "name": "steps", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "default", "inputs": [{"model_class": "IntegerToolParameter", "name": "MASH_sketch", "argument": "--MASH_sketch", "type": "integer", "label": "MASH sketch size", "help": "", "help_format": "html", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1000", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "P_ani", "argument": "--P_ani", "type": "float", "label": "ANI threshold to form primary clusters", "help": "", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.9", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "multiround_primary_clustering", "argument": "--multiround_primary_clustering", "type": "boolean", "label": "Cluster each primary clunk separately and merge at the end with single linkage?", "help": "Decreases RAM usage and        increases speed, and the cost of a minor loss in precision and the inability to plot primary_clustering_dendrograms. Especially helpful when clustering 5000+ genomes. Will be done with single linkage clustering", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--multiround_primary_clustering", "falsevalue": ""}, {"model_class": "IntegerToolParameter", "name": "primary_chunksize", "argument": "--primary_chunksize", "type": "integer", "label": "Impacts multiround_primary_clusterings", "help": " If you have more than this many genomes, process them in chunks of this size", "help_format": "html", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "5000", "area": false, "datalist": []}, {"model_class": "Conditional", "name": "clustering", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "fastANI", "inputs": [{"model_class": "BooleanToolParameter", "name": "greedy_secondary_clustering", "argument": "--greedy_secondary_clustering", "type": "boolean", "label": "Use a heuristic to avoid pair-wise comparisons when doing secondary clustering?", "help": "Will be done with single linkage clustering", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--greedy_secondary_clustering", "falsevalue": ""}]}, {"model_class": "ConditionalWhen", "value": "ANImf", "inputs": [{"model_class": "SelectToolParameter", "name": "n_PRESET", "argument": "--n_PRESET", "type": "select", "label": "Presets to pass to nucmer", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "normal", "options": [["normal: default ANIn parameters", "normal", true], ["tight: only align highly conserved regions", "tight", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "coverage_method", "argument": "--coverage_method", "type": "select", "label": "Method to calculate coverage of an alignment", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "larger", "options": [["Larger = max((aligned length / genome 1), (aligned_length / genome2))", "larger", true], ["Total = 2*(aligned length) / (sum of total genome lengths)", "total", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "ANIn", "inputs": [{"model_class": "SelectToolParameter", "name": "n_PRESET", "argument": "--n_PRESET", "type": "select", "label": "Presets to pass to nucmer", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "normal", "options": [["normal: default ANIn parameters", "normal", true], ["tight: only align highly conserved regions", "tight", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "coverage_method", "argument": "--coverage_method", "type": "select", "label": "Method to calculate coverage of an alignment", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "larger", "options": [["Larger = max((aligned length / genome 1), (aligned_length / genome2))", "larger", true], ["Total = 2*(aligned length) / (sum of total genome lengths)", "total", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "gANI", "inputs": []}, {"model_class": "ConditionalWhen", "value": "goANI", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "S_algorithm", "argument": "--S_algorithm", "type": "select", "label": "Algorithm for secondary clustering comparisons", "help": "", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "ANImf", "options": [["fastANI: Kmer-based approach - very fast", "fastANI", false], ["ANImf: Align whole genomes with nucmer; filter alignment; compare aligned regions - RECOMMENDED", "ANImf", true], ["ANIn: Align whole genomes with nucmer; compare aligned regions", "ANIn", false], ["gANI: Identify and align ORFs; compare aligned ORFS", "gANI", false], ["Open source version of gANI; requires nsmimscan", "goANI", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "FloatToolParameter", "name": "S_ani", "argument": "--S_ani", "type": "float", "label": "ANI threshold to form secondary clusters", "help": "", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.99", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "cov_thresh", "argument": "--cov_thresh", "type": "float", "label": "Minmum level of overlap between genomes when doing secondary comparisons", "help": "", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.1", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "SkipMash", "inputs": [{"model_class": "Conditional", "name": "clustering", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "fastANI", "inputs": [{"model_class": "BooleanToolParameter", "name": "greedy_secondary_clustering", "argument": "--greedy_secondary_clustering", "type": "boolean", "label": "Use a heuristic to avoid pair-wise comparisons when doing secondary clustering?", "help": "Will be done with single linkage clustering", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--greedy_secondary_clustering", "falsevalue": ""}]}, {"model_class": "ConditionalWhen", "value": "ANImf", "inputs": [{"model_class": "SelectToolParameter", "name": "n_PRESET", "argument": "--n_PRESET", "type": "select", "label": "Presets to pass to nucmer", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "normal", "options": [["normal: default ANIn parameters", "normal", true], ["tight: only align highly conserved regions", "tight", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "coverage_method", "argument": "--coverage_method", "type": "select", "label": "Method to calculate coverage of an alignment", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "larger", "options": [["Larger = max((aligned length / genome 1), (aligned_length / genome2))", "larger", true], ["Total = 2*(aligned length) / (sum of total genome lengths)", "total", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "ANIn", "inputs": [{"model_class": "SelectToolParameter", "name": "n_PRESET", "argument": "--n_PRESET", "type": "select", "label": "Presets to pass to nucmer", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "normal", "options": [["normal: default ANIn parameters", "normal", true], ["tight: only align highly conserved regions", "tight", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "coverage_method", "argument": "--coverage_method", "type": "select", "label": "Method to calculate coverage of an alignment", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "larger", "options": [["Larger = max((aligned length / genome 1), (aligned_length / genome2))", "larger", true], ["Total = 2*(aligned length) / (sum of total genome lengths)", "total", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "gANI", "inputs": []}, {"model_class": "ConditionalWhen", "value": "goANI", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "S_algorithm", "argument": "--S_algorithm", "type": "select", "label": "Algorithm for secondary clustering comparisons", "help": "", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "ANImf", "options": [["fastANI: Kmer-based approach - very fast", "fastANI", false], ["ANImf: Align whole genomes with nucmer; filter alignment; compare aligned regions - RECOMMENDED", "ANImf", true], ["ANIn: Align whole genomes with nucmer; compare aligned regions", "ANIn", false], ["gANI: Identify and align ORFs; compare aligned ORFS", "gANI", false], ["Open source version of gANI; requires nsmimscan", "goANI", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "FloatToolParameter", "name": "S_ani", "argument": "--S_ani", "type": "float", "label": "ANI threshold to form secondary clusters", "help": "", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.99", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "cov_thresh", "argument": "--cov_thresh", "type": "float", "label": "Minmum level of overlap between genomes when doing secondary comparisons", "help": "", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.1", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "SkipSecondary", "inputs": [{"model_class": "IntegerToolParameter", "name": "MASH_sketch", "argument": "--MASH_sketch", "type": "integer", "label": "MASH sketch size", "help": "", "help_format": "html", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1000", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "P_ani", "argument": "--P_ani", "type": "float", "label": "ANI threshold to form primary clusters", "help": "", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.9", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "multiround_primary_clustering", "argument": "--multiround_primary_clustering", "type": "boolean", "label": "Cluster each primary clunk separately and merge at the end with single linkage?", "help": "Decreases RAM usage and        increases speed, and the cost of a minor loss in precision and the inability to plot primary_clustering_dendrograms. Especially helpful when clustering 5000+ genomes. Will be done with single linkage clustering", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--multiround_primary_clustering", "falsevalue": ""}, {"model_class": "IntegerToolParameter", "name": "primary_chunksize", "argument": "--primary_chunksize", "type": "integer", "label": "Impacts multiround_primary_clusterings", "help": " If you have more than this many genomes, process them in chunks of this size", "help_format": "html", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "5000", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "select", "argument": null, "type": "select", "label": "Steps in genome comparison", "help": "", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "default", "options": [["Default: Run MASH clustering and a secondary clustering", "default", true], ["Skip MASH clustering, just do secondary clustering on all genomes", "SkipMash", false], ["Skip secondary clustering, just perform MASH clustering", "SkipSecondary", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "SelectToolParameter", "name": "clusterAlg", "argument": "--clusterAlg", "type": "select", "label": "Algorithm used to cluster genomes", "help": "Passed to scipy.cluster.hierarchy.linkage", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "average", "options": [["average", "average", true], ["ward", "ward", false], ["single", "single", false], ["median", "median", false], ["centroid", "centroid", false], ["weighted", "weighted", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "BooleanToolParameter", "name": "run_tertiary_clustering", "argument": "--run_tertiary_clustering", "type": "boolean", "label": "Run an additional round of clustering on the final genome set?", "help": "This is especially useful when greedy clustering is performed and/or to handle cases where similar genomes end up in different primary clusters.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--run_tertiary_clustering", "falsevalue": ""}]}, {"model_class": "Section", "name": "warning", "type": "section", "title": "Warnings", "help": null, "expanded": false, "inputs": [{"model_class": "FloatToolParameter", "name": "warn_dist", "argument": "--warn_dist", "type": "float", "label": "How far from the threshold to throw cluster warnings", "help": "", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.25", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "warn_sim", "argument": "--warn_sim", "type": "float", "label": "Similarity threshold for warnings between dereplicated genomes", "help": "", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.98", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "warn_aln", "argument": "--warn_aln", "type": "float", "label": "Minimum aligned fraction for warnings between dereplicated genomes (ANIn)", "help": "", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.25", "area": false, "datalist": []}]}, {"model_class": "SelectToolParameter", "name": "select_outputs", "argument": null, "type": "select", "label": "Select outputs", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": ["log", "warnings", "Primary_clustering_dendrogram", "Clustering_scatterplots"], "options": [["log", "log", true], ["Warnings", "warnings", true], ["Primary_clustering_dendrogram.pdf", "Primary_clustering_dendrogram", true], ["Secondary_clustering_dendrograms.pdf", "Secondary_clustering_dendrograms", false], ["Secondary_clustering_MDS.pdf", "Secondary_clustering_MDS", false], ["Clustering_scatterplots.pdf", "Clustering_scatterplots", true]], "display": null, "multiple": true, "textable": false}], "outputs": [{"model_class": "ToolOutput", "name": "log", "format": "txt", "label": "${tool.name} on ${on_string}: Log", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "outdir/log/logger.log", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "warnings", "format": "txt", "label": "${tool.name} on ${on_string}: Warnings", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "outdir/log/warnings.txt", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "Primary_clustering_dendrogram", "format": "pdf", "label": "${tool.name} on ${on_string}: Primary_clustering_dendrogram.pdf", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "outdir/figures/Primary_clustering_dendrogram.pdf", "edam_format": "format_3508", "edam_data": "data_2968", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "Secondary_clustering_dendrograms", "format": "pdf", "label": "${tool.name} on ${on_string}: Secondary_clustering_dendrograms.pdf", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "outdir/figures/Secondary_clustering_dendrograms.pdf", "edam_format": "format_3508", "edam_data": "data_2968", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "Secondary_clustering_MDS", "format": "pdf", "label": "${tool.name} on ${on_string}: Secondary_clustering_MDS.pdf", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "outdir/figures/Secondary_clustering_MDS.pdf", "edam_format": "format_3508", "edam_data": "data_2968", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "Clustering_scatterplots", "format": "pdf", "label": "${tool.name} on ${on_string}: Clustering_scatterplots.pdf", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "outdir/figures/Clustering_scatterplots.pdf", "edam_format": "format_3508", "edam_data": "data_2968", "discover_datasets": []}], "panel_section_id": "metagenomic_analysis", "panel_section_name": "Metagenomic Analysis", "form_style": "regular"}