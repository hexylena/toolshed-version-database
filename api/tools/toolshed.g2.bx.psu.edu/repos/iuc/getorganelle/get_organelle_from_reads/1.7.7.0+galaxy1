{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/iuc/getorganelle/get_organelle_from_reads/1.7.7.0+galaxy1", "name": "Get organelle from reads", "version": "1.7.7.0+galaxy1", "description": "", "labels": [], "edam_operations": ["operation_2429", "operation_3192", "operation_0525", "operation_0523", "operation_0524"], "edam_topics": ["topic_0621", "topic_0196", "topic_0780", "topic_3673", "topic_2229"], "hidden": "", "is_workflow_compatible": true, "xrefs": [{"value": "getorganelle", "reftype": "bio.tools"}], "tool_shed_repository": {"name": "getorganelle", "owner": "iuc", "changeset_revision": "7348b69e5109", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "Conditional", "name": "fastq_input", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "single", "inputs": [{"model_class": "DataToolParameter", "name": "fastq_input1", "argument": null, "type": "data", "label": "Single-end fastq", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastqsanger", "fastqsanger.gz"], "edam": {"edam_formats": ["format_1932", "format_1932"], "edam_data": ["data_2044", "data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "paired", "inputs": [{"model_class": "DataToolParameter", "name": "fastq_input1", "argument": null, "type": "data", "label": "Forward fastq", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastqsanger", "fastqsanger.gz"], "edam": {"edam_formats": ["format_1932", "format_1932"], "edam_data": ["data_2044", "data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "fastq_input2", "argument": null, "type": "data", "label": "Reverse fastq", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastqsanger", "fastqsanger.gz"], "edam": {"edam_formats": ["format_1932", "format_1932"], "edam_data": ["data_2044", "data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "paired_collection", "inputs": [{"model_class": "DataCollectionToolParameter", "name": "paired_input", "argument": null, "type": "data_collection", "label": "Paired collection fastq", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastqsanger", "fastqsanger.gz"], "multiple": false, "options": {"hda": [], "hdca": [], "dce": []}, "tag": null}]}], "test_param": {"model_class": "SelectToolParameter", "name": "fastq_input_selector", "argument": null, "type": "select", "label": "Single-end or paired reads", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "single", "options": [["Single-end", "single", true], ["Paired", "paired", false], ["Paired collection", "paired_collection", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "organelle_type_input", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "embplant_pt", "inputs": [{"model_class": "DataToolParameter", "name": "s", "argument": "-s", "type": "data", "label": "Seed sequence(s)", "help": "Fasta file to use as initial seed. A seed sequence in GetOrganelle is only used for identifying initial organelle reads.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "genes", "argument": "--genes", "type": "data", "label": "Gene sequence(s)", "help": "Fasta file containing protein coding genes and ribosomal RNAs extracted from a reference genome that you want to assemble.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "embplant_mt", "inputs": [{"model_class": "DataToolParameter", "name": "s", "argument": "-s", "type": "data", "label": "Seed sequence(s)", "help": "Fasta file to use as initial seed. A seed sequence in GetOrganelle is only used for identifying initial organelle reads.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "genes", "argument": "--genes", "type": "data", "label": "Gene sequence(s)", "help": "Fasta file containing protein coding genes and ribosomal RNAs extracted from a reference genome that you want to assemble.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "embplant_nr", "inputs": [{"model_class": "DataToolParameter", "name": "s", "argument": "-s", "type": "data", "label": "Seed sequence(s)", "help": "Fasta file to use as initial seed. A seed sequence in GetOrganelle is only used for identifying initial organelle reads.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "genes", "argument": "--genes", "type": "data", "label": "Gene sequence(s)", "help": "Fasta file containing protein coding genes and ribosomal RNAs extracted from a reference genome that you want to assemble.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "fungus_mt", "inputs": [{"model_class": "DataToolParameter", "name": "s", "argument": "-s", "type": "data", "label": "Seed sequence(s)", "help": "Fasta file to use as initial seed. A seed sequence in GetOrganelle is only used for identifying initial organelle reads.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "genes", "argument": "--genes", "type": "data", "label": "Gene sequence(s)", "help": "Fasta file containing protein coding genes and ribosomal RNAs extracted from a reference genome that you want to assemble.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "fungus_nr", "inputs": [{"model_class": "DataToolParameter", "name": "s", "argument": "-s", "type": "data", "label": "Seed sequence(s)", "help": "Fasta file to use as initial seed. A seed sequence in GetOrganelle is only used for identifying initial organelle reads.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "genes", "argument": "--genes", "type": "data", "label": "Gene sequence(s)", "help": "Fasta file containing protein coding genes and ribosomal RNAs extracted from a reference genome that you want to assemble.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "animal_mt", "inputs": [{"model_class": "DataToolParameter", "name": "s", "argument": "-s", "type": "data", "label": "Seed sequence(s)", "help": "Fasta file to use as initial seed. A seed sequence in GetOrganelle is only used for identifying initial organelle reads.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "genes", "argument": "--genes", "type": "data", "label": "Gene sequence(s)", "help": "Fasta file containing protein coding genes and ribosomal RNAs extracted from a reference genome that you want to assemble.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "other_mt", "inputs": [{"model_class": "DataToolParameter", "name": "s", "argument": "-s", "type": "data", "label": "Seed sequence(s)", "help": "Fasta file to use as initial seed. A seed sequence in GetOrganelle is only used for identifying initial organelle reads.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "genes", "argument": "--genes", "type": "data", "label": "Gene sequence(s)", "help": "Fasta file containing protein coding genes and ribosomal RNAs extracted from a reference genome that you want to assemble.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "anonym", "inputs": [{"model_class": "DataToolParameter", "name": "s", "argument": "-s", "type": "data", "label": "Seed sequence(s)", "help": "Fasta file to use as initial seed. A seed sequence in GetOrganelle is only used for identifying initial organelle reads.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "genes", "argument": "--genes", "type": "data", "label": "Gene sequence(s)", "help": "Fasta file containing protein coding genes and ribosomal RNAs extracted from a reference genome that you want to assemble.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}], "test_param": {"model_class": "SelectToolParameter", "name": "F", "argument": "-F", "type": "select", "label": "Organelle type", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "embplant_pt", "options": [["Plant chloroplast", "embplant_pt", true], ["Plant mitochondrial", "embplant_mt", false], ["Plant ribosomal", "embplant_nr", false], ["Fungus mitochondrial", "fungus_mt", false], ["Fungus nuclear", "fungus_nr", false], ["Animal mitochondrial", "animal_mt", false], ["Other mitochondrial", "other_mt", false], ["Anonymous", "anonym", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "SelectToolParameter", "name": "config_dir", "argument": "--config-dir", "type": "select", "label": "Reference data", "help": "Contact the administrator of this Galaxy instance if you miss reference data", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": "getorganelle_2023_09_08", "options": [["GetOrganelleDB 0.0.1", "getorganelle_2023_09_08", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "settings", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "simple", "inputs": []}, {"model_class": "ConditionalWhen", "value": "advanced", "inputs": [{"model_class": "SelectToolParameter", "name": "out", "argument": null, "type": "select", "label": "Select output files", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "options": [["Raw assembly graph", "raw_assembly_graph", false], ["Simplified graph", "simplified_graph", false], ["Contig labels", "contig_labels", false], ["Seed fastq", "seed_fastq", false], ["Seed SAM", "seed_sam", false], ["Spades log", "spades_log", false]], "display": "checkboxes", "multiple": true, "textable": false}, {"model_class": "IntegerToolParameter", "name": "max_reads", "argument": "--max-reads", "type": "integer", "label": "Maximum number of reads", "help": "Maximum number of reads to be used. An input VALUE of 0 will be treated as infinity (INF). Default: 1.5E7 (plant chloroplast, plant ribosomal, fungus mitochondrial, fungus nuclear) 7.5E7 (Plant mitochondrial) 3E8 (Animal mitochondrial)", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "reduce_reads_for_coverage", "argument": "--reduce-reads-for-coverage", "type": "integer", "label": "Reduce reads for coverage", "help": "Maximum number of reads to be used according to target-hitting base coverage. If the estimated target-hitting base coverage is too high and over this VALUE, GetOrganelle automatically reduce the number of reads to generate a final assembly with base coverage close to this VALUE. This design could greatly save computational resources in many situations. A mean base coverage over 500 is extremely sufficient for most cases. This VALUE must be larger than 10. An input VALUE of 0 will be treated as infinity (INF). Default: 500.", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "w", "argument": "-w", "type": "integer", "label": "Word size", "help": "Word size for pre-grouping and extending process. This script would try to guess (auto-estimate) a proper word size using an empirical function based on average read length, reads quality, target genome coverage, and other variables that might influence the extending process. Default: estimated automatically", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "R", "argument": "-R", "type": "integer", "label": "Max rounds", "help": "Maximum number of extending rounds (suggested: >=2). Default: 15 (-F embplant_pt), 30 (-F embplant_mt/other_pt), 10 (-F embplant_nr/animal_mt/fungus_mt/fungus_nr), inf (-P 0).", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "k", "argument": "-k", "type": "text", "label": "Spades kmer settings", "help": "Use the same format as in SPAdes. Illegal kmer values would be automatically discarded by GetOrganelle. Default: 21,55,85,115", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "J", "argument": "-J", "type": "integer", "label": "Jump step", "help": "The length of step for checking words in reads during extending process (integer >= 1). When you have reads of high quality, the larger the number is, the faster the extension will be, the more risk of missing reads in low coverage area. Choose 1 to choose the slowest but safest extension strategy. Default: 3", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "M", "argument": "-M", "type": "integer", "label": "Mesh size", "help": "The length of step for building words from seeds during extending process (integer >= 1). When you have reads of high quality, the larger the number is, the faster the extension will be, the more risk of missing reads in low coverage area. Another usage of this mesh size is to choose a larger mesh size coupled with a smaller word size, which makes smaller word size feasible when memory is limited. Choose 1 to choose the slowest but safest extension strategy. Default: 2", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "P", "argument": "-P", "type": "integer", "label": "Pre-grouped", "help": "The maximum number (integer) of high-covered reads to be pre-grouped before extending process. pre_grouping is suggested when the whole genome coverage is shallow but the organ genome coverage is deep. The default value is 2E5. For personal computer with 8G memory, we suggest no more than 3E5. A larger number (ex. 6E5) would run faster but exhaust memory in the first few minutes. Choose 0 to disable this process.", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "max_extending_len", "argument": "--max-extending-len", "type": "integer", "label": "Max extending length", "help": "Maximum extending length(s) derived from the seed(s). A single value could be a non-negative number. An input VALUE of 0 will be treated as infinity (INF) and is the default. This is designed for properly stopping the extending from getting too long and saving computational resources. However, empirically, a maximum extending length value larger than 6000 would not be helpful for saving computational resources. This value would not be precise in controlling output size, especially when pre-group (followed by '-P') is turn on. A sequence of a closely related species would be preferred for estimating a better maximum extending length value. If you are using limited loci, e.g. rbcL gene as the seed for assembling the whole plastome (with extending length ca. 75000 >> 6000), you should set maximum extending length to inf. Default: inf.", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "fast", "argument": "--fast", "type": "boolean", "label": "Fast", "help": "='-R 10 -t 4 -J 5 -M 7 --max-n-words 3E7 --larger-auto-ws --disentangle-time-limit 360' This option is suggested for homogeneously and highly covered data (very fine data). You can overwrite the value of a specific option listed above by adding that option along with the '--fast' flag. You could try GetOrganelle with this option for a list of samples and run a second time without this option for the rest with incomplete results.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--fast", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "memory_save", "argument": "--memory-save", "type": "boolean", "label": "Memory save", "help": "='--out-per-round -P 0 --remove-duplicates 0' You can overwrite the value of a specific option listed above by adding that option along with the '--memory-save' flag. A larger '-R' value is suggested when '--memory-save' is chosen.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--memory-save", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "larger_auto_ws", "argument": "--larger-auto-ws", "type": "boolean", "label": "Larger auto ws", "help": "By using this flag, the empirical function for estimating W would tend to produce a relative larger W, which would speed up the matching in extending, reduce the memory cost in extending, but increase the risk of broken final graph. Suggested when the data is good with high and homogenous coverage.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--larger-auto-ws", "falsevalue": ""}]}], "test_param": {"model_class": "SelectToolParameter", "name": "advanced", "argument": null, "type": "select", "label": "Specify advanced parameters", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "simple", "options": [["No, use program defaults.", "simple", true], ["Yes, see full parameter list.", "advanced", false]], "display": null, "multiple": false, "textable": false}}], "outputs": [{"model_class": "ToolOutputCollection", "name": "path_sequence_list", "format": null, "label": "${tool.name} on ${on_string}: Path sequences", "hidden": false, "output_type": "collection", "default_format": "data", "default_format_source": null, "default_metadata_source": null, "inherit_format": false, "inherit_metadata": false, "structure": {"collection_type": "list", "collection_type_source": null, "collection_type_from_rules": null, "structured_like": null, "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": "fasta", "visible": false, "assign_primary_output": false, "directory": "results_directory", "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "(?P<designation>.+)\\.path_sequence.fasta", "sort_by": "filename"}]}}, {"model_class": "ToolOutput", "name": "logfile", "format": "txt", "label": "${tool.name} on ${on_string}: Logfile", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "results_directory/get_org.log.txt", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "selected_graph", "format": "gfa1", "label": "${tool.name} on ${on_string}: Selected graph", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "results_directory/*.selected_graph.gfa", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "raw_assembly_graph", "format": "fastg", "label": "${tool.name} on ${on_string}: Raw assembly graph", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "results_directory/extended_K*.assembly_graph.fastg", "edam_format": "format_3823", "edam_data": "data_2044", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "simplified_graph", "format": "fastg", "label": "${tool.name} on ${on_string}: Simplified graph", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "results_directory/extended_K*.assembly_graph.fastg.extend-*.fastg", "edam_format": "format_3823", "edam_data": "data_2044", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "assembly_csv", "format": "tsv", "label": "${tool.name} on ${on_string}: Contig labels", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "results_directory/extended_K*.assembly_graph.fastg.extend-*.csv", "edam_format": "format_3475", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "seed_fastq", "format": "fastq", "label": "${tool.name} on ${on_string}: Seed fastq", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "results_directory/seed/*.fq", "edam_format": "format_1930", "edam_data": "data_2044", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "seed_sam", "format": "sam", "label": "${tool.name} on ${on_string}: Seed sam", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "results_directory/seed/*.sam", "edam_format": "format_2573", "edam_data": "data_0863", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "spades_log", "format": "txt", "label": "${tool.name} on ${on_string}: Spades log", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "results_directory/extended_spades/spades.log", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}], "panel_section_id": "assembly", "panel_section_name": "Assembly", "form_style": "regular"}