{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/iuc/preprocess_muon/preprocess_muon/0.1.6+galaxy0", "name": "muon filter and  normalize", "version": "0.1.6+galaxy0", "description": "", "labels": [], "edam_operations": [], "edam_topics": [], "hidden": "", "is_workflow_compatible": true, "xrefs": [], "tool_shed_repository": {"name": "preprocess_muon", "owner": "iuc", "changeset_revision": "678260997e94", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "DataToolParameter", "name": "mdata", "argument": null, "type": "data", "label": "MuData input file", "help": "", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["h5ad"], "edam": {"edam_formats": ["format_3590"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "Conditional", "name": "method", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "pp.intersect_obs", "inputs": []}, {"model_class": "ConditionalWhen", "value": "pp.l2norm", "inputs": [{"model_class": "TextToolParameter", "name": "mod", "argument": "mod", "type": "text", "label": "Names of the modalities to normalize", "help": "Leave empty to use all modalities", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "rep", "argument": "rep", "type": "text", "label": "The representation to normalize.", "help": "X or any key for .obsm is valid, for all modalities", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "n_pcs", "argument": "n_pcs", "type": "integer", "label": "The number of principal components to use.", "help": "This affects the result only if a PCA representation is being normalized", "help_format": "html", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "pp.neighbors", "inputs": [{"model_class": "IntegerToolParameter", "name": "n_neighbors", "argument": "n_neighbors", "type": "integer", "label": "Number of nearest neighbors to find", "help": "If not set, arithmetic mean of per-modality neighbors will be used", "help_format": "html", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "n_bandwidth_neighbors", "argument": "n_bandwidth_neighbors", "type": "integer", "label": "Number of nearest neighbors to use for bandwidth selection", "help": "", "help_format": "html", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "20", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "n_multineighbors", "argument": "n_multineighbors", "type": "integer", "label": "Number of nearest neighbors in each modality to consider as candidates for multimodal nearest neighbors", "help": "Only points in the union of per-modality nearest neighbors are candidates for multimodal nearest neighbors.                     This will use the same metric that was used for the nearest neighbor search in the respective modality.", "help_format": "html", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "200", "area": false, "datalist": []}, {"model_class": "Conditional", "name": "n_keys", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "same", "inputs": [{"model_class": "TextToolParameter", "name": "neighbor_keys", "argument": "neighbor_keys", "type": "text", "label": "Keys in .uns where per-modality neighborhood information is stored", "help": "", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "neighbors", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "separate", "inputs": [{"model_class": "Repeat", "name": "modalities", "type": "repeat", "title": "Modalities", "help": null, "default": 2, "min": 2, "max": "__Infinity__", "inputs": [{"model_class": "TextToolParameter", "name": "mod_name", "argument": null, "type": "text", "label": "Modality name", "help": "", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "neighbor_keys", "argument": "neighbor_keys", "type": "text", "label": "Keys in .uns where neighborhood information is stored", "help": "", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "neighbors", "area": false, "datalist": []}]}]}], "test_param": {"model_class": "SelectToolParameter", "name": "type", "argument": null, "type": "select", "label": "Same or separate neighborhood information for each modality?", "help": "", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "same", "options": [["Same neighborhood key for all modalities", "same", false], ["Separate neighborhood keys per modality", "separate", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "SelectToolParameter", "name": "metric", "argument": "metric", "type": "select", "label": "Distance measure to use", "help": "This will only be used in the final step to search for nearest neighbors in the set of candidates.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "euclidean", "options": [["euclidean", "euclidean", true], ["braycurtis", "braycurtis", false], ["canberra", "canberra", false], ["chebyshev", "chebyshev", false], ["cityblock", "cityblock", false], ["correlation", "correlation", false], ["cosine", "cosine", false], ["dice", "dice", false], ["hamming", "hamming", false], ["jaccard", "jaccard", false], ["jensenshannon", "jensenshannon", false], ["kulsinski", "kulsinski", false], ["mahalanobis", "mahalanobis", false], ["matching", "matching", false], ["minkowski", "minkowski", false], ["rogerstanimoto", "rogerstanimoto", false], ["russellrao", "russellrao", false], ["seuclidean", "seuclidean", false], ["sokalmichener", "sokalmichener", false], ["sokalsneath", "sokalsneath", false], ["sqeuclidean", "sqeuclidean", false], ["wminkowski", "wminkowski", false], ["yule", "yule", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "TextToolParameter", "name": "key_added", "argument": "key_added", "type": "text", "label": "Key to be added to store neighbors, distances and connectivities data", "help": "If not specified, the multimodal neighbors data is stored in .uns['neighbors'], distances and connectivities are stored in .obsp['distances'] and .obsp['connectivities'], respectively.             If specified, the neighbors data is added to .uns[key_added], distances are stored in .obsp[key_added + '_distances'] and connectivities in .obsp[key_added + '_connectivities'].", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "weight_key", "argument": "weight_key", "type": "text", "label": "Weight key to add to each modality\u2019s .obs or to mdata.obs", "help": "", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "mod_weight", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "add_weights_to_modalities", "argument": "add_weights_to_modalities", "type": "boolean", "label": "If to add weights to individual modalities", "help": "By default, the weights will be added to mdata.obs", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "True", "falsevalue": "False"}, {"model_class": "FloatToolParameter", "name": "eps", "argument": "eps", "type": "float", "label": "Small number to avoid numerical errors", "help": "", "help_format": "html", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.0001", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "random_state", "argument": "random_state", "type": "integer", "label": "Random seed for the optimization", "help": "", "help_format": "html", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "42", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "pp.sample_obs", "inputs": [{"model_class": "FloatToolParameter", "name": "frac", "argument": "frac", "type": "float", "label": "A fraction of observations to return", "help": "", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.1", "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "groupby", "argument": "groupby", "type": "text", "label": "Categorical column in .obs that is used for prior grouping before sampling observations", "help": "", "help_format": "html", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "min_n", "argument": "min_n", "type": "integer", "label": "Return min_n observations if fraction frac of observations is below min_n", "help": "When groupby is not None, min_n is applied per group.", "help_format": "html", "refresh_on_change": false, "min": 0, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "method", "argument": null, "type": "select", "label": "Method used for plotting", "help": "", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "pp.intersect_obs", "options": [["Subset: Subset observations present only in all modalities, using 'muon.pp.intersect_obs'", "pp.intersect_obs", false], ["Normalize: Normalize observations to unit L2 norm, using 'muon.pp.l2norm'", "pp.l2norm", false], ["Search: Multimodal nearest neighbor search, using 'muon.pp.neighbors'", "pp.neighbors", false], ["Return an object with some of the observations (subsampling). 'muon.pp.sample_obs'", "pp.sample_obs", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Section", "name": "advanced_common", "type": "section", "title": "Advanced Options", "help": null, "expanded": false, "inputs": [{"model_class": "BooleanToolParameter", "name": "show_log", "argument": null, "type": "boolean", "label": "Output Log?", "help": "", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}]}], "outputs": [{"model_class": "ToolOutput", "name": "mudata_out", "format": "h5ad", "label": "${tool.name} (${method.method}) on ${on_string}: MuData", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "mudata.h5mu", "edam_format": "format_3590", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "hidden_output", "format": "txt", "label": "Log file", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}], "panel_section_id": "single-cell", "panel_section_name": "Single-cell", "form_style": "regular"}