{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/iuc/iqtree/iqtree/1.5.5", "name": "IQ-TREE", "version": "1.5.5", "description": "Phylogenomic / evolutionary tree construction from multiple sequences", "labels": [], "edam_operations": ["operation_2403", "operation_0324"], "edam_topics": ["topic_3293"], "hidden": "", "is_workflow_compatible": true, "xrefs": [{"value": "iqtree", "reftype": "bio.tools"}], "tool_shed_repository": {"name": "iqtree", "owner": "iuc", "changeset_revision": "05ee0a74faef", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "Section", "name": "general_options", "type": "section", "title": "General options", "help": null, "expanded": true, "inputs": [{"model_class": "DataToolParameter", "name": "s", "argument": "-s", "type": "data", "label": "Specify input alignment file in PHYLIP, FASTA, NEXUS, CLUSTAL or MSF format.", "help": "", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["txt"], "edam": {"edam_formats": ["format_2330"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "SelectToolParameter", "name": "st", "argument": "-st", "type": "select", "label": "Specify sequence type as either of DNA, AA, BIN, MORPH, CODON or NT2AA for DNA, amino-acid, binary, morphological, codon or DNA-to-AA-translated sequences", "help": "Note that -st CODON is always necessary when using codon models and you also need to specify a genetic code like this if differed from the standard genetic code.<br /><i>-st</i> NT2AA tells IQ-TREE to translate protein-coding DNA into AA sequences and then subsequent analysis will work on the AA sequences. You can also use a genetic code like -st NT2AA5 for the Invertebrate Mitochondrial Code (see genetic code table).", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "DNA", "options": [["DNA", "DNA", false], ["AA", "AA", false], ["BIN", "BIN", false], ["MORPH", "MORPH", false], ["CODON", "CODON", false], ["NT2AA", "NT2AA", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "DataToolParameter", "name": "t", "argument": "-t", "type": "data", "label": "Specify a file containing starting tree for tree search", "help": "", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["nhx"], "edam": {"edam_formats": ["format_1910"], "edam_data": ["data_0872"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "te", "argument": "-te", "type": "data", "label": "Like -t but fixing user tree", "help": "That means, no tree search is performed and IQ-TREE computes the log-likelihood of the fixed user tree.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["nhx"], "edam": {"edam_formats": ["format_1910"], "edam_data": ["data_0872"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "IntegerToolParameter", "name": "seed", "argument": "-seed", "type": "integer", "label": "Specify a random number seed to reproduce a previous run (leave blank to randomize)", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "keep_ident", "argument": "-keep_ident", "type": "boolean", "label": "Keep identical sequences in the alignment", "help": "By default: IQ-TREE will remove them during the analysis and add them in the end.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-keep-ident", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "safe", "argument": "-safe", "type": "boolean", "label": "Turn on safe numerical mode to avoid numerical underflow for large data sets with many sequences (typically in the order of thousands)", "help": "This mode is automatically turned on when having more than 2000 sequences.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-safe", "falsevalue": ""}]}, {"model_class": "Section", "name": "likelihood_mapping", "type": "section", "title": "Likelihood mapping analysis", "help": null, "expanded": false, "inputs": [{"model_class": "IntegerToolParameter", "name": "lmap", "argument": "-lmap", "type": "integer", "label": "Specify the number of quartets to be randomly drawn", "help": "If you specify -lmap ALL, all unique quartets will be drawn, instead.", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "DataToolParameter", "name": "lmclust", "argument": "-lmclust", "type": "data", "label": "Specify a NEXUS file containing taxon clusters (see below for example) for quartet mapping analysis.", "help": "", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["txt"], "edam": {"edam_formats": ["format_2330"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "BooleanToolParameter", "name": "wql", "argument": "-wql", "type": "boolean", "label": "Write quartet log-likelihoods into .lmap.quartetlh file (typically not needed).", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-wql", "falsevalue": ""}]}, {"model_class": "Section", "name": "modelling_parameters", "type": "section", "title": "Modelling Parameters", "help": null, "expanded": false, "inputs": [{"model_class": "Section", "name": "automatic_model", "type": "section", "title": "Automatic model selection", "help": null, "expanded": false, "inputs": [{"model_class": "Conditional", "name": "cond_model", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "true", "inputs": [{"model_class": "TextToolParameter", "name": "m", "argument": "-m", "type": "text", "label": "Model", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "false", "inputs": [{"model_class": "SelectToolParameter", "name": "m", "argument": "-m", "type": "select", "label": "Perform standard model selection like jModelTest (for DNA) and ProtTest (for protein)", "help": "Moreover, IQ-TREE also works for codon, binary and morphogical data.<table>    <tr>        <td><i>TESTONLY</i></td>        <td>Perform standard model selection like jModelTest (for DNA) and ProtTest (for protein). Moreover, IQ-TREE also works for codon, binary and morphogical data.</td>    </tr>    <tr>        <td><i>TEST</i></td>        <td>Like -m TESTONLY but immediately followed by tree reconstruction using the best-fit model found. So this performs both model selection and tree inference within a single run.</td>    </tr>    <tr>        <td><i>TESTNEWONLY</i></td>        <td>Perform an extended model selection that additionally includes FreeRate model compared with -m TESTONLY. Recommended as replacement for -m TESTONLY. Note that LG4X is a FreeRate model, but by default is not included because it is also a protein mixture model. To include it, use -madd option (see table below).</td>    </tr>    <tr>        <td><i>TESTNEW</i></td>        <td>Like -m MF but immediately followed by tree reconstruction using the best-fit model found.</td>    </tr>    <tr>        <td><i>TESTMERGEONLY</i></td>        <td>Select best-fit partitioning scheme like PartitionFinder.</td>    </tr>    <tr>        <td><i>TESTMERGE</i></td>        <td>Like -m TESTMERGEONLY but immediately followed by tree reconstruction using the best partitioning scheme found.</td>    </tr>    <tr>        <td><i>TESTNEWMERGEONLY</i></td>        <td>Like -m TESTMERGEONLY but additionally includes FreeRate model.</td>    </tr>    <tr>        <td><i>TESTNEWMERGE</i></td>        <td>Like -m MF+MERGE but immediately followed by tree reconstruction using the best partitioning scheme found.</td>    </tr></table>", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "TESTONLY", "options": [["TESTONLY", "TESTONLY", false], ["TEST", "TEST", false], ["TESTNEWONLY", "TESTNEWONLY", false], ["TESTNEW", "TESTNEW", false], ["TESTMERGEONLY", "TESTMERGEONLY", false], ["TESTMERGE", "TESTMERGE", false], ["TESTNEWMERGEONLY", "TESTNEWMERGEONLY", false], ["TESTNEWMERGE", "TESTNEWMERGE", false]], "display": null, "multiple": false, "textable": false}]}], "test_param": {"model_class": "BooleanToolParameter", "name": "opt_custommodel", "argument": null, "type": "boolean", "label": "Use Custom Model", "help": "See http://www.iqtree.org/doc/Substitution-Models", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}}, {"model_class": "IntegerToolParameter", "name": "rcluster", "argument": "-rcluster", "type": "integer", "label": "Specify the percentage for the relaxed clustering algorithm (Lanfear et al., 2014)", "help": "This is similar to --rcluster-percent option of PartitionFinder. For example, with -rcluster 10 only the top 10% partition schemes are considered to save computations.", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "mset", "argument": "-mset", "type": "text", "label": "Specify the name of a program (raxml, phyml or mrbayes) to restrict to only those models supported by the specified program", "help": "Alternatively, one can specify a comma-separated list of base models. For example, -mset WAG,LG,JTT will restrict model selection to WAG, LG, and JTT instead of all 18 AA models to save computations.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "msub", "argument": "-msub", "type": "select", "label": "Specify either nuclear, mitochondrial, chloroplast or viral to restrict to those AA models designed for specified source.", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "nuclear", "options": [["nuclear", "nuclear", false], ["mitochondrial", "mitochondrial", false], ["chloroplast", "chloroplast", false], ["viral", "viral", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "TextToolParameter", "name": "mfreq", "argument": "-mfreq", "type": "text", "label": "Specify a comma-separated list of frequency types for model selection", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "mrate", "argument": "-mrate", "type": "text", "label": "Specify a comma-separated list of rate heterogeneity types for model selection", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "cmin", "argument": "-cmin", "type": "integer", "label": "Specify minimum number of categories for FreeRate model", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "2", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "cmax", "argument": "-cmax", "type": "integer", "label": "Specify maximum number of categories for FreeRate model", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "10", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "merit", "argument": "-merit", "type": "select", "label": "Specify either AIC, AICc or BIC for the optimality criterion to apply for new procedure", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "AIC", "options": [["AIC", "AIC", false], ["AICc", "AICc", false], ["BIC", "BIC", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "BooleanToolParameter", "name": "mtree", "argument": "-mtree", "type": "boolean", "label": "Turn on full tree search for each model considered, to obtain more accurate result", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-mtree", "falsevalue": ""}, {"model_class": "TextToolParameter", "name": "madd", "argument": "-madd", "type": "text", "label": "Specify a comma-separated list of mixture models to additionally consider for model selection", "help": "For example, -madd LG4M,LG4X to additionally include these two protein mixture models.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "DataToolParameter", "name": "mdef", "argument": "-mdef", "type": "data", "label": "Specify a NEXUS model file to define new models.", "help": "", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["txt"], "edam": {"edam_formats": ["format_2330"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "Section", "name": "specifying_substitution", "type": "section", "title": "Specifying substitution models", "help": null, "expanded": false, "inputs": [{"model_class": "BooleanToolParameter", "name": "mwopt", "argument": "-mwopt", "type": "boolean", "label": "Turn on optimizing weights of mixture models", "help": "Note that for models like LG+C20+F+G this mode is automatically turned on, but not for LG+C20+G.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-mwopt", "falsevalue": ""}]}, {"model_class": "Section", "name": "rate_heterogeneity", "type": "section", "title": "Rate heterogeneity", "help": null, "expanded": false, "inputs": [{"model_class": "TextToolParameter", "name": "a", "argument": "-a", "type": "text", "label": "Specify the Gamma shape parameter (default: estimate)", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "gmedian", "argument": "-gmedian", "type": "boolean", "label": "Perform the median approximation for Gamma rate heterogeneity instead of the default mean approximation (Yang, 1994)", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-gmedian", "falsevalue": ""}, {"model_class": "TextToolParameter", "name": "i", "argument": "-i", "type": "text", "label": "Specify the proportion of invariable sites (default: estimate)", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "opt_gamma_inv", "argument": "--opt_gamma_inv", "type": "boolean", "label": "Perform more thorough estimation for +I+G model parameters", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--opt-gamma-inv", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "wsr", "argument": "-wsr", "type": "boolean", "label": "Write per-site rates to .rate file", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-wsr", "falsevalue": ""}]}, {"model_class": "Section", "name": "partition_model", "type": "section", "title": "Partition model options", "help": null, "expanded": false, "inputs": [{"model_class": "DataToolParameter", "name": "q", "argument": "-q", "type": "data", "label": "Specify partition file for edge-equal partition model", "help": "That means, all partitions share the same set of branch lengths (like -q option of RAxML).", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["txt"], "edam": {"edam_formats": ["format_2330"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "BooleanToolParameter", "name": "spp", "argument": "-spp", "type": "boolean", "label": "Like -q but allowing partitions to have different evolutionary speeds (edge-proportional partition model).", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-spp", "falsevalue": ""}, {"model_class": "DataToolParameter", "name": "sp", "argument": "-sp", "type": "data", "label": "Specify partition file for edge-unlinked partition model", "help": "That means, each partition has its own set of branch lengths (like -M option of RAxML). This is the most parameter-rich partition model to accomodate heterotachy.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["txt"], "edam": {"edam_formats": ["format_2330"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "Section", "name": "site_specific_frequency", "type": "section", "title": "Site-specific frequency model options", "help": null, "expanded": false, "inputs": [{"model_class": "DataToolParameter", "name": "ft", "argument": "-ft", "type": "data", "label": "Specify a guide tree to infer site frequency profiles.", "help": "", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["nhx"], "edam": {"edam_formats": ["format_1910"], "edam_data": ["data_0872"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "FloatToolParameter", "name": "fs", "argument": "-fs", "type": "float", "label": "Specify a site frequency file, e.g", "help": "the .sitefreq file obtained from -ft run. This will save memory used for the first phase of the analysis.", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "fmax", "argument": "-fmax", "type": "boolean", "label": "Switch to posterior maximum mode for obtaining site-specific profiles", "help": "Default: posterior mean.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-fmax", "falsevalue": ""}]}]}, {"model_class": "Section", "name": "tree_parameters", "type": "section", "title": "Tree Parameters", "help": null, "expanded": false, "inputs": [{"model_class": "Section", "name": "tree_search", "type": "section", "title": "Tree search parameters", "help": null, "expanded": false, "inputs": [{"model_class": "IntegerToolParameter", "name": "n", "argument": "-n", "type": "integer", "label": "Skip subsequent tree search (n = 0), useful when you only want to assess the phylogenetic information of the alignment. Otherwise specify number of iterations to stop (this option overrides -nstop criterion).", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "ninit", "argument": "-ninit", "type": "integer", "label": "Specify number of initial parsimony trees", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "100", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "ntop", "argument": "-ntop", "type": "integer", "label": "Specify number of top initial parsimony trees to optimize with ML nearest neighbor interchange (NNI) search to initialize the candidate set", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "20", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "nbest", "argument": "-nbest", "type": "integer", "label": "Specify number of trees in the candidate set to maintain during ML tree search", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "5", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "nstop", "argument": "-nstop", "type": "integer", "label": "Specify number of unsuccessful iterations to stop", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "100", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "sprrad", "argument": "-sprrad", "type": "integer", "label": "Specify SPR radius for the initial parsimony tree search", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "6", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "pers", "argument": "-pers", "type": "float", "label": "Specify perturbation strength (between 0 and 1) for randomized NNI", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "0.5", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "allnni", "argument": "-allnni", "type": "boolean", "label": "Turn on more thorough and slower NNI search", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-allnni", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "djc", "argument": "-djc", "type": "boolean", "label": "Avoid computing ML pairwise distances and BIONJ tree.", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-djc", "falsevalue": ""}, {"model_class": "DataToolParameter", "name": "g", "argument": "-g", "type": "data", "label": "Specify a topological constraint tree file in NEWICK format", "help": "The constraint tree can be a multifurcating tree and need not to include all taxa.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["txt"], "edam": {"edam_formats": ["format_2330"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "Section", "name": "single_branch", "type": "section", "title": "Single branch tests", "help": null, "expanded": false, "inputs": [{"model_class": "IntegerToolParameter", "name": "alrt", "argument": "-alrt", "type": "integer", "label": "Specify number of replicates (>=1000) to perform SH-like approximate likelihood ratio test (SH-aLRT) (Guindon et al., 2010)", "help": "If number of replicates is set to 0 (-alrt 0), then the parametric aLRT test (Anisimova and Gascuel 2006) is performed, instead of SH-aLRT.", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "abayes", "argument": "-abayes", "type": "boolean", "label": "Perform approximate Bayes test (Anisimova et al., 2011).", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-abayes", "falsevalue": ""}, {"model_class": "IntegerToolParameter", "name": "lbp", "argument": "-lbp", "type": "integer", "label": "Specify number of replicates (>=1000) to perform fast local bootstrap probability method (Adachi and Hasegawa, 1996).", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}, {"model_class": "Section", "name": "tree_topology", "type": "section", "title": "Tree topology tests", "help": null, "expanded": false, "inputs": [{"model_class": "DataToolParameter", "name": "z", "argument": "-z", "type": "data", "label": "Specify a file containing a set of trees", "help": "IQ-TREE will compute the log-likelihoods of all trees.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["txt"], "edam": {"edam_formats": ["format_2330"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "IntegerToolParameter", "name": "zb", "argument": "-zb", "type": "integer", "label": "Specify the number of RELL (Kishino et al., 1990) replicates (>=1000) to perform several tree topology tests for all trees passed via -z", "help": "The tests include bootstrap proportion (BP), KH test (Kishino and Hasegawa, 1989), SH test (Shimodaira and Hasegawa, 1999) and expected likelihood weights (ELW) (Strimmer and Rambaut, 2002).", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "zw", "argument": "-zw", "type": "boolean", "label": "Used together with -zb to additionally perform the weighted-KH and weighted-SH tests.", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-zw", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "au", "argument": "-au", "type": "boolean", "label": "Used together with -zb to additionally perform the approximately unbiased (AU) test (Shimodaira, 2002)", "help": "Note that you have to specify the number of replicates for the AU test via -zb.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-au", "falsevalue": ""}]}, {"model_class": "Section", "name": "constructing_consensus", "type": "section", "title": "Constructing consensus tree", "help": null, "expanded": false, "inputs": [{"model_class": "BooleanToolParameter", "name": "con", "argument": "-con", "type": "boolean", "label": "Compute consensus tree of the trees passed via -t", "help": "Resulting consensus tree is written to .contree file.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-con", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "net", "argument": "-net", "type": "boolean", "label": "Compute consensus network of the trees passed via -t", "help": "Resulting consensus network is written to .nex file.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-net", "falsevalue": ""}, {"model_class": "FloatToolParameter", "name": "minsup", "argument": "-minsup", "type": "float", "label": "Specify a minimum threshold (between 0 and 1) to keep branches in the consensus tree", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "0.0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "bi", "argument": "-bi", "type": "integer", "label": "Specify a burn-in, which is the number of beginning trees passed via -t to discard before consensus construction", "help": "This is useful e.g. when summarizing trees from MrBayes analysis.", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "DataToolParameter", "name": "sup", "argument": "-sup", "type": "data", "label": "Specify an input \u201ctarget\u201d tree file", "help": "That means, support values are first extracted from the trees passed via -t, and then mapped onto the target tree. Resulting tree with assigned support values is written to .suptree file. This option is useful to map and compare support values from different approaches onto a single tree.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["nhx"], "edam": {"edam_formats": ["format_1910"], "edam_data": ["data_0872"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "TextToolParameter", "name": "suptag", "argument": "-suptag", "type": "text", "label": "Specify name of a node in -sup target tree", "help": "The corresponding node of .suptree will then be assigned with IDs of trees where this node appears. Special option -suptag ALL will assign such IDs for all nodes of the target tree.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}, {"model_class": "Section", "name": "computing_robinson_foulds", "type": "section", "title": "Computing Robinson-Foulds distance", "help": null, "expanded": false, "inputs": [{"model_class": "DataToolParameter", "name": "rf", "argument": "-rf", "type": "data", "label": "Specify a second set of trees", "help": "IQ-TREE computes all pairwise RF distances between two tree sets passed via -t and -rf", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["nhx"], "edam": {"edam_formats": ["format_1910"], "edam_data": ["data_0872"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "BooleanToolParameter", "name": "rf_all", "argument": "-rf_all", "type": "boolean", "label": "Compute all-to-all RF distances between all trees passed via -t", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-rf_all", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "rf_adj", "argument": "-rf_adj", "type": "boolean", "label": "Compute RF distances between adjacent trees passed via -t", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-rf_adj", "falsevalue": ""}]}, {"model_class": "Section", "name": "generating_random", "type": "section", "title": "Generating random trees", "help": null, "expanded": false, "inputs": [{"model_class": "IntegerToolParameter", "name": "r", "argument": "-r", "type": "integer", "label": "Specify number of taxa", "help": "IQ-TREE will create a random tree under Yule-Harding model with specified number of taxa", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "ru", "argument": "-ru", "type": "boolean", "label": "Like -r, but a random tree is created under uniform model.", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-ru", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "rcat", "argument": "-rcat", "type": "boolean", "label": "Like -r, but a random caterpillar tree is created.", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-rcat", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "rbal", "argument": "-rbal", "type": "boolean", "label": "Like -r, but a random balanced tree is created.", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-rbal", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "rcsg", "argument": "-rcsg", "type": "boolean", "label": "Like -r, bur a random circular split network is created.", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-rcsg", "falsevalue": ""}, {"model_class": "TextToolParameter", "name": "rlen", "argument": "-rlen", "type": "text", "label": "Specify three numbers: minimum, mean and maximum branch lengths of the random tree", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}]}, {"model_class": "Section", "name": "bootstrap_parameters", "type": "section", "title": "Bootstrap Parameters", "help": null, "expanded": false, "inputs": [{"model_class": "Section", "name": "ultrafast_bootstrap", "type": "section", "title": "Ultrafast bootstrap parameters", "help": null, "expanded": false, "inputs": [{"model_class": "IntegerToolParameter", "name": "bb", "argument": "-bb", "type": "integer", "label": "Specify number of bootstrap replicates (>=1000).", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "wbt", "argument": "-wbt", "type": "boolean", "label": "Turn on writing bootstrap trees to .ufboot file", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-wbt", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "wbtl", "argument": "-wbtl", "type": "boolean", "label": "Like -wbt but bootstrap trees written with branch lengths", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-wbtl", "falsevalue": ""}, {"model_class": "IntegerToolParameter", "name": "nm", "argument": "-nm", "type": "integer", "label": "Specify maximum number of iterations to stop", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "1000", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "bcor", "argument": "-bcor", "type": "float", "label": "Specify minimum correlation coefficient for UFBoot convergence criterion", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "0.99", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "nstep", "argument": "-nstep", "type": "integer", "label": "Specify iteration interval checking for UFBoot convergence", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "100", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "beps", "argument": "-beps", "type": "float", "label": "Specify a small epsilon to break tie in RELL evaluation for bootstrap trees", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "0.5", "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "bspec", "argument": "-bspec", "type": "text", "label": "Specify the resampling strategies for partitioned analysis", "help": "By default, IQ-TREE resamples alignment sites within partitions. With -bspec GENE IQ-TREE will resample partitions. With -bspec GENESITE IQ-TREE will resample partitions and then resample sites within resampled partitions (Gadagkar et al., 2005).", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "bnni", "argument": "-bnni", "type": "boolean", "label": "Perform an additional step to further optimize UFBoot trees by nearest neighbor interchange (NNI) based directly on bootstrap alignments", "help": "This option is recommended in the presence of severe model violations. It increases computing time by 2-fold but reduces the risk of overestimating branch supports due to severe model violations. Introduced in IQ-TREE 1.6.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-bnni", "falsevalue": ""}]}, {"model_class": "Section", "name": "nonparametric_bootstrap", "type": "section", "title": "Nonparametric bootstrap", "help": null, "expanded": false, "inputs": [{"model_class": "IntegerToolParameter", "name": "b", "argument": "-b", "type": "integer", "label": "Specify number of bootstrap replicates (recommended >=100)", "help": "This will perform both bootstrap and analysis on original alignment and provide a consensus tree.", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "bc", "argument": "-bc", "type": "boolean", "label": "Like -b but omit analysis on original alignment.", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-bc", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "bo", "argument": "-bo", "type": "boolean", "label": "Like -b but only perform bootstrap analysis (no analysis on original alignment and no consensus tree).", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "-bo", "falsevalue": ""}]}]}, {"model_class": "Section", "name": "miscellaneous_options", "type": "section", "title": "Miscellaneous options", "help": null, "expanded": false, "inputs": [{"model_class": "TextToolParameter", "name": "fconst", "argument": "-fconst", "type": "text", "label": "Specify a list of comma-separated integer numbers", "help": "The number of entries should be equal to the number of states in the model (e.g. 4 for DNA and 20 for protein). IQ-TREE will then add a number of constant sites accordingly. For example, -fconst 10,20,15,40 will add 10 constant sites of all A, 20 constant sites of all C, 15 constant sites of all G and 40 constant sites of all T into the alignment.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}], "outputs": [{"model_class": "ToolOutput", "name": "bionj", "format": "nhx", "label": "${tool.name} on ${on_string}: BIONJ Tree", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "*.bionj", "edam_format": "format_1910", "edam_data": "data_0872", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "treefile", "format": "nhx", "label": "${tool.name} on ${on_string}: MaxLikelihood Tree", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "*.treefile", "edam_format": "format_1910", "edam_data": "data_0872", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "contree", "format": "nhx", "label": "${tool.name} on ${on_string}: Consensus Tree", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "*.contree", "edam_format": "format_1910", "edam_data": "data_0872", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "mldist", "format": "mldist", "label": "${tool.name} on ${on_string}: MaxLikelihood Distance Matrix", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "*.mldist", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "splits.nex", "format": "nex", "label": "${tool.name} on ${on_string}: Occurence Frequencies in Bootstrap Trees", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "*.splits.nex", "edam_format": "format_1912", "edam_data": "data_0872", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "iqtree", "format": "iqtree", "label": "${tool.name} on ${on_string}: Report and Final Tree", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "*.iqtree", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}], "panel_section_id": "evolution", "panel_section_name": "Evolution", "form_style": "regular"}