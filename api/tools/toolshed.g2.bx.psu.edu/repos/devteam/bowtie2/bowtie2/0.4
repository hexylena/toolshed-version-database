{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/0.4", "name": "Bowtie2", "version": "0.4", "description": "- map reads against reference genome", "labels": [], "edam_operations": [], "edam_topics": [], "hidden": "", "is_workflow_compatible": true, "xrefs": [], "tool_shed_repository": {"name": "bowtie2", "owner": "devteam", "changeset_revision": "ceb6467e276c", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "Conditional", "name": "library", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "single", "inputs": [{"model_class": "DataToolParameter", "name": "input_1", "argument": null, "type": "data", "label": "FASTQ file", "help": "Nucleotide-space: Must have Sanger-scaled quality values with ASCII offset 33", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastqsanger"], "edam": {"edam_formats": ["format_1932"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "BooleanToolParameter", "name": "unaligned_file", "argument": null, "type": "boolean", "label": "Write unaligned reads (in fastq format) to separate file(s)", "help": "--un/--un-conc; This triggers --un parameter for single reads and --un-conc for paired reads", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}]}, {"model_class": "ConditionalWhen", "value": "paired", "inputs": [{"model_class": "DataToolParameter", "name": "input_1", "argument": null, "type": "data", "label": "FASTQ file", "help": "Nucleotide-space: Must have Sanger-scaled quality values with ASCII offset 33", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastqsanger"], "edam": {"edam_formats": ["format_1932"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "input_2", "argument": null, "type": "data", "label": "FASTQ file", "help": "Nucleotide-space: Must have Sanger-scaled quality values with ASCII offset 33", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastqsanger"], "edam": {"edam_formats": ["format_1932"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "BooleanToolParameter", "name": "unaligned_file", "argument": null, "type": "boolean", "label": "Write unaligned reads (in fastq format) to separate file(s)", "help": "--un/--un-conc; This triggers --un parameter for single reads and --un-conc for paired reads", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}, {"model_class": "Conditional", "name": "paired_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": [{"model_class": "IntegerToolParameter", "name": "I", "argument": null, "type": "integer", "label": "Set the minimum fragment length for valid paired-end alignments", "help": "-I/--minins;  E.g. if `-I 60` is specified and a paired-end alignment consists of two 20-bp alignments in the appropriate orientation with a 20-bp gap between them, that alignment is considered valid (as long as `-X` is also satisfied).  A 19-bp gap would not be valid in that case.  If trimming options `-3` or `-5` are also used, the `-I` constraint is applied with respect to the untrimmed mates. The larger the difference between `-I` and `-X`, the slower Bowtie 2 will run.  This is because larger differences bewteen `-I` and `-X` require that Bowtie 2 scan a larger window to determine if a concordant alignment exists. For typical fragment length ranges (200 to 400 nucleotides), Bowtie 2 is very efficient. Default=0", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "X", "argument": null, "type": "integer", "label": "Set the maximum fragment length for valid paired-end alignments", "help": "-X/--maxins; E.g. if `-X 100` is specified and a paired-end alignment consists of two 20-bp alignments in the proper orientation with a 60-bp gap between them, that alignment is considered valid (as long as `-I` is also satisfied).  A 61-bp gap would not be valid in that case.  If trimming options `-3` or `-5` are also used, the `-X` constraint is applied with respect to the untrimmed mates, not the trimmed mates; Default=500", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "500", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "fr_rf_ff", "argument": null, "type": "select", "label": "Select the upstream/downstream mate orientations for a valid paired-end alignment against the forward reference strand", "help": "--fr, --rf, or --ff; E.g., if `--fr` is specified and there is a candidate paired-end alignment where mate 1 appears upstream of the reverse complement of mate 2 and the fragment length constraints (`-I` and `-X`) are met, that alignment is valid.  Also, if mate 2 appears upstream of the reverse complement of mate 1 and all other constraints are met, that too is valid. `--rf` likewise requires that an upstream mate1 be reverse-complemented and a downstream mate2 be forward-oriented. `--ff` requires both an upstream mate 1 and a downstream mate 2 to be forward-oriented; Default=--fr (appropriate for Illumina's Paired-end Sequencing Assay)", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "--fr", "options": [["--fr", "--fr", true], ["--rf", "--rf", false], ["--ff", "--ff", false]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "BooleanToolParameter", "name": "no_mixed", "argument": null, "type": "boolean", "label": "Disable no-mixed behavior", "help": "--no-mixed; By default, when `bowtie2` cannot find a concordant or discordant alignment for a pair, it then tries to find alignments for the individual mates; default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-mixed", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "no_discordant", "argument": null, "type": "boolean", "label": "Disable no-discordant behavior", "help": "--no-discordant; By default, `bowtie2` looks for discordant alignments if it cannot find any concordant alignments. A discordant alignment is an alignment where both mates align uniquely, but that does not satisfy the paired-end constraints (`--fr`/`--rf`/`--ff`, `-I`, `-X`); default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-discordant", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "dovetail", "argument": null, "type": "boolean", "label": "Allow mate dovetailing", "help": "--dovetail; If the mates `dovetail`, that is if one mate alignment extends past the beginning of the other such that the wrong mate begins upstream, consider that to be concordant. Default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--dovetail", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "no_contain", "argument": null, "type": "boolean", "label": "Allow one mate alignment to contain another", "help": "--no-contain; If one mate alignment contains the other, consider that to be non-concordant. Default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-contain", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "no_overlap", "argument": null, "type": "boolean", "label": "Allow mate alignments to overlap", "help": "--no-overlap; If one mate alignment overlaps the other at all, consider that to be non-concordant. Default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-overlap", "falsevalue": ""}]}, {"model_class": "ConditionalWhen", "value": "no", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "paired_options_selector", "argument": null, "type": "select", "label": "Do you want to set paired-end options?", "help": "See \"Alignment Options\" section of Help below for information", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "no", "options": [["No", "no", true], ["Yes", "yes", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "paired_collection", "inputs": [{"model_class": "DataCollectionToolParameter", "name": "input_1", "argument": null, "type": "data_collection", "label": "FASTQ Paired Dataset", "help": "Nucleotide-space: Must have Sanger-scaled quality values with ASCII offset 33", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastqsanger"], "multiple": false, "options": {"hda": [], "hdca": [], "dce": []}, "tag": null}, {"model_class": "BooleanToolParameter", "name": "unaligned_file", "argument": null, "type": "boolean", "label": "Write unaligned reads (in fastq format) to separate file(s)", "help": "--un/--un-conc; This triggers --un parameter for single reads and --un-conc for paired reads", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}, {"model_class": "Conditional", "name": "paired_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": [{"model_class": "IntegerToolParameter", "name": "I", "argument": null, "type": "integer", "label": "Set the minimum fragment length for valid paired-end alignments", "help": "-I/--minins;  E.g. if `-I 60` is specified and a paired-end alignment consists of two 20-bp alignments in the appropriate orientation with a 20-bp gap between them, that alignment is considered valid (as long as `-X` is also satisfied).  A 19-bp gap would not be valid in that case.  If trimming options `-3` or `-5` are also used, the `-I` constraint is applied with respect to the untrimmed mates. The larger the difference between `-I` and `-X`, the slower Bowtie 2 will run.  This is because larger differences bewteen `-I` and `-X` require that Bowtie 2 scan a larger window to determine if a concordant alignment exists. For typical fragment length ranges (200 to 400 nucleotides), Bowtie 2 is very efficient. Default=0", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "X", "argument": null, "type": "integer", "label": "Set the maximum fragment length for valid paired-end alignments", "help": "-X/--maxins; E.g. if `-X 100` is specified and a paired-end alignment consists of two 20-bp alignments in the proper orientation with a 60-bp gap between them, that alignment is considered valid (as long as `-I` is also satisfied).  A 61-bp gap would not be valid in that case.  If trimming options `-3` or `-5` are also used, the `-X` constraint is applied with respect to the untrimmed mates, not the trimmed mates; Default=500", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "500", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "fr_rf_ff", "argument": null, "type": "select", "label": "Select the upstream/downstream mate orientations for a valid paired-end alignment against the forward reference strand", "help": "--fr, --rf, or --ff; E.g., if `--fr` is specified and there is a candidate paired-end alignment where mate 1 appears upstream of the reverse complement of mate 2 and the fragment length constraints (`-I` and `-X`) are met, that alignment is valid.  Also, if mate 2 appears upstream of the reverse complement of mate 1 and all other constraints are met, that too is valid. `--rf` likewise requires that an upstream mate1 be reverse-complemented and a downstream mate2 be forward-oriented. `--ff` requires both an upstream mate 1 and a downstream mate 2 to be forward-oriented; Default=--fr (appropriate for Illumina's Paired-end Sequencing Assay)", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "--fr", "options": [["--fr", "--fr", true], ["--rf", "--rf", false], ["--ff", "--ff", false]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "BooleanToolParameter", "name": "no_mixed", "argument": null, "type": "boolean", "label": "Disable no-mixed behavior", "help": "--no-mixed; By default, when `bowtie2` cannot find a concordant or discordant alignment for a pair, it then tries to find alignments for the individual mates; default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-mixed", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "no_discordant", "argument": null, "type": "boolean", "label": "Disable no-discordant behavior", "help": "--no-discordant; By default, `bowtie2` looks for discordant alignments if it cannot find any concordant alignments. A discordant alignment is an alignment where both mates align uniquely, but that does not satisfy the paired-end constraints (`--fr`/`--rf`/`--ff`, `-I`, `-X`); default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-discordant", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "dovetail", "argument": null, "type": "boolean", "label": "Allow mate dovetailing", "help": "--dovetail; If the mates `dovetail`, that is if one mate alignment extends past the beginning of the other such that the wrong mate begins upstream, consider that to be concordant. Default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--dovetail", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "no_contain", "argument": null, "type": "boolean", "label": "Allow one mate alignment to contain another", "help": "--no-contain; If one mate alignment contains the other, consider that to be non-concordant. Default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-contain", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "no_overlap", "argument": null, "type": "boolean", "label": "Allow mate alignments to overlap", "help": "--no-overlap; If one mate alignment overlaps the other at all, consider that to be non-concordant. Default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-overlap", "falsevalue": ""}]}, {"model_class": "ConditionalWhen", "value": "no", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "paired_options_selector", "argument": null, "type": "select", "label": "Do you want to set paired-end options?", "help": "See \"Alignment Options\" section of Help below for information", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "no", "options": [["No", "no", true], ["Yes", "yes", false]], "display": null, "multiple": false, "textable": false}}]}], "test_param": {"model_class": "SelectToolParameter", "name": "type", "argument": null, "type": "select", "label": "Is this single or paired library", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "single", "options": [["Single-end", "single", false], ["Paired-end", "paired", false], ["Paired-end Dataset Collection", "paired_collection", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "reference_genome", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "indexed", "inputs": [{"model_class": "SelectToolParameter", "name": "index", "argument": null, "type": "select", "label": "Select reference genome", "help": "If your genome of interest is not listed, contact the Galaxy team", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": "apiMel3", "options": [["A. mellifera genome (apiMel3, Baylor HGSC Amel_3.0)", "apiMel3", false], ["ARS1 Aug. 2016 Capra hircus (goat) (San Clemente 2016 USDA) (GCF_001704415.2)", "GCF_001704415.2", false], ["Actinidia chinensis FEI Lab v1.0", "Actinidia_chinensis_FEI_Lab_v1.0", false], ["African Clawed Frog (xenLae9.2)", "xenLae9.2", false], ["Ananas comosus JGI v3.0", "Ananas_comosus_JGI_v3.0", false], ["Arabidopsis lyrata JGI v1.0", "Arabidopsis_lyrata_JGI_v1.0", false], ["Arabidopsis lyrata JGI v2.1", "Arabidopsis_lyrata_JGI_v2.1", false], ["Arabidopsis thaliana (TAIR10)", "TAIR10", false], ["Arabidopsis thaliana COL-0 Araport11", "Arabidopsis_thaliana_COL-0_Araport11", false], ["Arabidopsis thaliana COL-0 TAIR10", "Arabidopsis_thaliana_COL-0_TAIR10", false], ["Arachis ipaensis Peanut Base v1.0", "Arachis_ipaensis_Peanut_Base_v1.0", false], ["Asparagus officinalis v1.1", "Asparagus_officinalis_v1.1", false], ["Beta vulgaris RefBeet 1.1", "Beta_vulgaris_RefBeet_1.1", false], ["Beta vulgaris RefBeet v1.2", "Beta_vulgaris_RefBeet_v1.2", false], ["Brachypodium distachyon JGI v3.1", "Brachypodium_distachyon_JGI_v3.1", false], ["Brachypodium distachyon MIPS 1.2", "Brachypodium_distachyon_MIPS_1.2", false], ["Brassica oleracea Ensembl Genomes v2.1", "Brassica_oleracea_Ensembl_Genomes_v2.1", false], ["Brassica rapa Annotation v1.2 on assembly v1.1 (Phytozome 9.1)", "Brassica_rapa_Annotation_v1.2_on_assembly_v1.1_Phytozome_9.1", false], ["Brassica rapa JGI FPsc1.3", "Brassica_rapa_JGI_FPsc1.3", false], ["Caenorhabditis elegans Feb. 2013 (WBcel235/ce11)", "ce11", false], ["Cajanus cajan Penguin Genomics v5.0", "Cajanus_cajan_Penguin_Genomics_v5.0", false], ["Capsella rubella JGI annotation v1.0 on assembly v1", "Capsella_rubella_JGI_annotation_v1.0_on_assembly_v1", false], ["Capsella rubella JGI v1.0", "Capsella_rubella_JGI_v1.0", false], ["Carica papaya Hawaii Agriculture Research Center", "Carica_papaya_Hawaii_Agriculture_Research_Center", false], ["Carica papaya JGI ASGPB0.4", "Carica_papaya_JGI_ASGPB0.4", false], ["Cat Nov. 2017 (Felis catus, domestic cat): felCat9", "felCat9", false], ["Cat Nov. 2017 (Felis catus, domestic cat): felCat9", "felCat9", false], ["Chicken (Gallus gallus): galGal6", "galGal6", false], ["Chicken Oct. 2021 (bGalGal1.pat.whiteleghornlayer.GRCg7w_WZ) (GCF_016700215.2)", "GCF_016700215.2", false], ["Chlamydomonas reinhardtii JGI v5.0 assembly, annot v5.3.1 based on Augustus u11.6", "Chlamydomonas_reinhardtii_JGI_v5.0_assembly_annot_v5.3.1_based_on_Augustus_u11.6", false], ["Chlamydomonas reinhardtii JGI v5.5", "Chlamydomonas_reinhardtii_JGI_v5.5", false], ["Cicer arietinum LIS v1.0", "Cicer_arietinum_LIS_v1.0", false], ["Citrullus lanatus Cucurbit Genomics Database", "Citrullus_lanatus_Cucurbit_Genomics_Database", false], ["Citrullus lanatus Cucurbit Genomics Database v1.0", "Citrullus_lanatus_Cucurbit_Genomics_Database_v1.0", false], ["Citrus clementina JGI v1.0", "Citrus_clementina_JGI_v1.0", false], ["Citrus sinensis JGI v1 assembly and v1.0 annotation", "Citrus_sinensis_JGI_v1_assembly_and_v1.0_annotation", false], ["Coffea canephora Coffee Genome Hub v1", "Coffea_canephora_Coffee_Genome_Hub_v1", false], ["Corchorus olitorius GenBank v1.0", "Corchorus_olitorius_GenBank_v1.0", false], ["Cucumis melo Melonomics v3.5", "Cucumis_melo_Melonomics_v3.5", false], ["Daucus carota JGI v2.0", "Daucus_carota_JGI_v2.0", false], ["Dog (canFam3)", "canFam3", false], ["Dog Oct. 2020 (Dog10K_Boxer_Tasha/canFam6) (canFam6)", "canFam6", false], ["Drosophila melanogaster: dm3", "dm3", false], ["Drosophila melanogaster: dm6", "dm6", false], ["Elaeis guineensis EG5.1", "Elaeis_guineensis_EG5.1", false], ["Elaeis guineensis NCBI Genome v1.0", "Elaeis_guineensis_NCBI_Genome_v1.0", false], ["Erythranthe guttata JGI v2.0", "Erythranthe_guttata_JGI_v2.0", false], ["Escherichia coli K12 (eschColi_K12)", "eschColi_K12", false], ["Eucalyptus grandis JGI v2.0", "Eucalyptus_grandis_JGI_v2.0", false], ["Foshan strain genomic contigs sequences, AaloF1 assembly.", "AaloF1", false], ["Fragaria vesca JGI v1.1", "Fragaria_vesca_JGI_v1.1", false], ["Glycine max JGI Glyma1.1 annotation of the chromosome-based Glyma1 assembly", "Glycine_max_JGI_Glyma1.1_annotation_of_the_chromosome-based_Glyma1_assembly", false], ["Glycine max JGI Wm82.a2.v1", "Glycine_max_JGI_Wm82.a2.v1", false], ["Gossypium raimondii JGI annotation v2.1 on assembly v2.0", "Gossypium_raimondii_JGI_annotation_v2.1_on_assembly_v2.0", false], ["Gossypium raimondii JGI v2.1", "Gossypium_raimondii_JGI_v2.1", false], ["Hevea brasiliensis NCBI Genomes v1", "Hevea_brasiliensis_NCBI_Genomes_v1", false], ["Homo sapiens isolate CHM13 (T2T Consortium) female (chr1-X)", "CHM13_T2T_v1.0", false], ["Hordeum vulgare Ensembl Genomes ASM32608v1", "Hordeum_vulgare_Ensembl_Genomes_ASM32608v1", false], ["Horse Jan. 2018 (EquCab3.0/equCab3)", "equCab3", false], ["Human (Homo sapiens): hg18", "hg18", false], ["Human (Homo sapiens): hg19", "hg19", false], ["Human (Homo sapiens): hg19chrM Mitochondrial DNA", "hg19chrM", false], ["Human (Homo sapiens): hg38 Canonical", "hg38canon", false], ["Human (Homo sapiens): hg38 Full", "hg38full", false], ["Human CHM13 2.0 (T2T Consortium) Jan. 2022", "CHM13_T2T_v2.0", false], ["Human Dec. 2013 (GRCh38/hg38) (hg38)", "hg38", false], ["Influenza A virus (A/seal/Mass/1-SC35M/1980(H7N7))", "h7n7_360722", false], ["Lotus japonicus Kazusa 2.5", "Lotus_japonicus_Kazusa_2.5", false], ["Malus domestica IASMA", "Malus_domestica_IASMA", false], ["Manihot esculenta Cassava4", "Manihot_esculenta_Cassava4", false], ["Manihot esculenta JGI v6.1", "Manihot_esculenta_JGI_v6.1", false], ["Marchantia polymorpha JGI v3.1", "Marchantia_polymorpha_JGI_v3.1", false], ["Medicago truncatula JCVI 4.0", "Medicago_truncatula_JCVI_4.0", false], ["Medicago truncatula JGI Mt4.0v1", "Medicago_truncatula_JGI_Mt4.0v1", false], ["Micromonas commoda JGI v3.0", "Micromonas_commoda_JGI_v3.0", false], ["Mouse (Mus Musculus): mm39 Full", "mm39", false], ["Mouse (Mus musculus): mm10", "mm10", false], ["Mouse (Mus musculus): mm10 with ERCC spike-in", "mm10_ERCC", false], ["Mouse (Mus musculus): mm9", "mm9", false], ["Mouse (Mus musculus): mm9 with ERCC spike-in", "mm9_ERCC", false], ["Musa acuminata Banana Genome v1.0", "Musa_acuminata_Banana_Genome_v1.0", false], ["Musa acuminata Banana Genome v2.0", "Musa_acuminata_Banana_Genome_v2.0", false], ["Musa acuminata Genescope-Cirad", "Musa_acuminata_Genescope-Cirad", false], ["Nelumbo nucifera LOTUS-DB v1.1", "Nelumbo_nucifera_LOTUS-DB_v1.1", false], ["Oikopleura dioica (od01)", "od01", false], ["Oropetium thomaeum JGI v1.0", "Oropetium_thomaeum_JGI_v1.0", false], ["Oryza brachyantha Ensembl Plants v1.4b", "Oryza_brachyantha_Ensembl_Plants_v1.4b", false], ["Oryza sativa ssp. indica 9311_BGF_2005", "Oryza_sativa_ssp._indica_9311_BGF_2005", false], ["Oryza sativa ssp. indica MBKBASE v1.0", "Oryza_sativa_ssp._indica_MBKBASE_v1.0", false], ["Oryza sativa ssp. japonica JGI v7.0", "Oryza_sativa_ssp._japonica_JGI_v7.0", false], ["Ostreococcus lucimarinus JGI 2.0", "Ostreococcus_lucimarinus_JGI_2.0", false], ["Ostreococcus lucimarinus JGI v2.0 assembly and annotation", "Ostreococcus_lucimarinus_JGI_v2.0_assembly_and_annotation", false], ["Petunia axillaris Sol Genomics v1.6.2", "Petunia_axillaris_Sol_Genomics_v1.6.2", false], ["Phalaenopsis equestris Genomics v1.0", "Phalaenopsis_equestris_Genomics_v1.0", false], ["Phyllostachys edulis NCGR v1.0", "Phyllostachys_edulis_NCGR_v1.0", false], ["Physcomitrella patens JGI assembly release v1.1 and COSMOSS annotation v1.6", "Physcomitrella_patens_JGI_assembly_release_v1.1_and_COSMOSS_annotation_v1.6", false], ["Physcomitrella patens JGI v3.3", "Physcomitrella_patens_JGI_v3.3", false], ["Physcomitrella patens assembly version 1.2b (2014/03/27): pp1.2b", "pp1.2b", false], ["Pig Feb. 2017 (Sscrofa11.1/susScr11) (susScr11)", "susScr11", false], ["Populus trichocarpa JGI assembly release v3.0, annotation v3.0", "Populus_trichocarpa_JGI_assembly_release_v3.0_annotation_v3.0", false], ["Populus trichocarpa JGI v3.1", "Populus_trichocarpa_JGI_v3.1", false], ["Pyrus bretschneideri Pear Genome Project v1.0", "Pyrus_bretschneideri_Pear_Genome_Project_v1.0", false], ["Rat (Rattus norvegicus): rn5", "rn5", false], ["Rat Jul. 2014 (RGSC 6.0/rn6) (rn6)", "rn6", false], ["Rattus norvegicus Nov. 2020 (mRatBN7.2/rn7)", "rn7", false], ["Ricinus communis JCVI 1.0", "Ricinus_communis_JCVI_1.0", false], ["Rock pigeon Dec 2017 (Cliv_2.1/colLiv2)", "colLiv2.1", false], ["S. cerevisiae Apr. 2011 (SacCer_Apr2011/sacCer3) (sacCer3)", "sacCer3", false], ["S. lycopersicum (Tomato) Feb 2019 (SL4.0)", "SL4.0", false], ["SARS-CoV-2 isolate Wuhan-Hu-1, complete genome (NC_045512)", "NC_045512.2", false], ["Saccharum spontaneum v20190103", "Saccharum_spontaneum_v20190103", false], ["Schrenkiella parvula Thellungiella v2.0 (TpV84)", "Schrenkiella_parvula_Thellungiella_v2.0_TpV84", false], ["Selaginella moellendorffii JGI v1.0", "Selaginella_moellendorffii_JGI_v1.0", false], ["Selaginella moellendorffii NCBIr100", "Selaginella_moellendorffii_NCBIr100", false], ["Setaria italica JGI v2.2", "Setaria_italica_JGI_v2.2", false], ["Solanum lycopersicum ITAG 2.3", "Solanum_lycopersicum_ITAG_2.3", false], ["Solanum lycopersicum Sol Genomics itag2.4", "Solanum_lycopersicum_Sol_Genomics_itag2.4", false], ["Solanum tuberosum ITAG 001", "Solanum_tuberosum_ITAG_001", false], ["Solanum tuberosum JGI v4.03", "Solanum_tuberosum_JGI_v4.03", false], ["Sorghum bicolor JGI 1.4", "Sorghum_bicolor_JGI_1.4", false], ["Sorghum bicolor JGI v3.1", "Sorghum_bicolor_JGI_v3.1", false], ["Spirodela polyrhiza JGI v2.0", "Spirodela_polyrhiza_JGI_v2.0", false], ["Tarenaya hassleriana RefSeq v1", "Tarenaya_hassleriana_RefSeq_v1", false], ["Thellungiella parvula TpV84", "Thellungiella_parvula_TpV84", false], ["Theobroma cacao D. Gilbert public gene set 8 Mar 2012 on assembly v1.1", "Theobroma_cacao_D._Gilbert_public_gene_set_8_Mar_2012_on_assembly_v1.1", false], ["Theobroma cacao RefSeq v1.1", "Theobroma_cacao_RefSeq_v1.1", false], ["Trifolium pratense JGI v2", "Trifolium_pratense_JGI_v2", false], ["Utricularia gibba CoGe v4", "Utricularia_gibba_CoGe_v4", false], ["Vigna radiata var. radiata LIS v6", "Vigna_radiata_var._radiata_LIS_v6", false], ["Vitis vinifera JGI 12xMarch2010", "Vitis_vinifera_JGI_12xMarch2010", false], ["West African lungfish Jul 2021 (Protopterus annectens, PAN1.0) (GCF_019279795.1)", "GCF_019279795.1", false], ["White-tailed deer Apr 2017 (Odocoileus virginianus) (GCF_002102435.1, Ovir.te_1.0)", "GCF_002102435.1", false], ["White-tailed deer Apr 2017 (Odocoileus virginianus) (GCF_002102435.1, Ovir.te_1.0)", "GCF_002102435.1", false], ["Xenopus tropicalis (xenTro9.1)", "xenTro9.1", false], ["Zea mays B73 AGP v4.0", "Zea_mays_B73_AGP_v4.0", false], ["Zea mays PH207 v1.0", "Zea_mays_PH207_v1.0", false], ["Zebrafish (GRCz11/danRer11) without alt contigs", "danRer11_wo_alt", false], ["Zebrafish Jul. 2010 (Zv9/danRer7) (danRer7)", "danRer7", false], ["Zebrafish May 2017 (GRCz11/danRer11) (danRer11)", "danRer11", false], ["Zebrafish Sep. 2014 (GRCz10/danRer10) (danRer10)", "danRer10", false], ["Zostera marina JGI v2.2", "Zostera_marina_JGI_v2.2", false], ["anoGam3", "anoGam3", false], ["bosTau8", "bosTau8", false], ["bosTau9", "bosTau9", false], ["oviAri4 Sheep (oviAri4, International Sheep Genome Consortium) ((Oar_v4.0/oviAri4))", "oviAri4", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "history", "inputs": [{"model_class": "DataToolParameter", "name": "own_file", "argument": null, "type": "data", "label": "Select reference genome", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}], "test_param": {"model_class": "SelectToolParameter", "name": "source", "argument": null, "type": "select", "label": "Will you select a reference genome from your history or use a built-in index?", "help": "Built-ins were indexed using default options. See `Indexes` section of help below", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "indexed", "options": [["Use a built-in genome index", "indexed", false], ["Use a genome from the history and build index", "history", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "read_group", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": [{"model_class": "TextToolParameter", "name": "rgid", "argument": null, "type": "text", "label": "Read group identi\ufb01er (ID). Each @RG line must have a unique ID. The value of ID is used in the RG tags of alignment records. Must be unique among all read groups in header section.", "help": "--rg-id; Required if RG specified. Read group IDs may be modi\ufb01ed when merging SAM \ufb01les in order to handle collisions.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "rglb", "argument": null, "type": "text", "label": "Library name (LB)", "help": "--rg; Required if RG specified", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "rgpl", "argument": null, "type": "text", "label": "Platform/technology used to produce the reads (PL)", "help": "--rg; Required if RG specified. Valid values : CAPILLARY, LS454, ILLUMINA, SOLID, HELICOS, IONTORRENT and PACBIO", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "rgsm", "argument": null, "type": "text", "label": "Sample (SM)", "help": "--rg; Required if RG specified. Use pool name where a pool is being sequenced", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "no", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "read_group_selector", "argument": null, "type": "select", "label": "Specify the read group for this file?", "help": "Specifying readgroup information can greatly simplify your downstream analyses by allowing combining multiple datasets. See help below for more details", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "no", "options": [["Yes", "yes", false], ["No", "no", true]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "analysis_type", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "simple", "inputs": [{"model_class": "SelectToolParameter", "name": "presets", "argument": null, "type": "select", "label": "Do you want to use presets?", "help": "Allow selecting among several preset parameter settings. Choosing between these will result in dramatic changes in runtime. See help below to understand effects of these presets.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "no_presets", "options": [["No, just use defaults", "no_presets", true], ["Very fast end-to-end (--very-fast)", "--very-fast", false], ["Fast end-to-end (--fast)", "--fast", false], ["Sensitive end-to-end (--sensitive)", "--sensitive", false], ["Very sensitive end-to-end (--very-sensitive)", "--very-sensitive", false], ["Very fast local (--very-fast-local)", "--very-fast-local", false], ["Fast local (--fast-local)", "--fast-local", false], ["Sensitive local (--sensitive-local)", "--sensitive-local", false], ["Very sensitive local (--very-sensitive-local)", "--very-sensitive-local", false]], "display": "radio", "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "full", "inputs": [{"model_class": "Conditional", "name": "input_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": [{"model_class": "IntegerToolParameter", "name": "skip", "argument": null, "type": "integer", "label": "Skip (i.e. do not align) the first that many reads or pairs in the input", "help": "-s/--skip; default=0", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "qupto", "argument": null, "type": "integer", "label": "Align the first that many reads or read pairs from the input (after the -s/--skip reads or pairs have been skipped), then stop", "help": "-u/--qupto; for default behavior (no limit) leave this value very large", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "100000000", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "trim5", "argument": null, "type": "integer", "label": "Trim that many bases from 5' (left) end of each read before alignment", "help": "-5/--trim5; default=0", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "trim3", "argument": null, "type": "integer", "label": "Trim that many bases from 3' (right) end of each read before alignment", "help": "-3/--trim3; default=0", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "qv_encoding", "argument": null, "type": "select", "label": "Select quality score encoding", "help": "See help below for more details", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "--phred33", "options": [["Input qualities are ASCII chars equal to the Phred quality plus 33. This is also called the \"Phred+33\" encoding, which is used by the very latest Illumina pipelines (--phred33)", "--phred33", true], ["Input qualities are ASCII chars equal to the Phred quality plus 64. This is also called the \"Phred+64\" encoding (--phred64)", "--phred64", false]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "BooleanToolParameter", "name": "solexa_quals", "argument": null, "type": "boolean", "label": "Convert input qualities from Solexa (which can be negative) to Phred (which can't). This scheme was used in older Illumina GA Pipeline versions (prior to 1.3)", "help": "--solexa-quals; default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--solexa-quals", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "int_quals", "argument": null, "type": "boolean", "label": "Quality values are represented in the read input file as space-separated ASCII integers, e.g., 40 40 30 40..., rather than ASCII characters, e.g., II?I.... Integers are treated as being on the Phred quality scale unless --solexa-quals is also specified", "help": "--int-quals; default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--int-quals", "falsevalue": ""}]}, {"model_class": "ConditionalWhen", "value": "no", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "input_options_selector", "argument": null, "type": "select", "label": "Do you want to tweak input options?", "help": "See \"Input Options\" section of Help below for information", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "no", "options": [["Yes", "yes", false], ["No", "no", true]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "alignment_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": [{"model_class": "IntegerToolParameter", "name": "N", "argument": null, "type": "integer", "label": "Set the number of mismatches to be allowed in a seed alignment during multiseed alignment (see `Multiseed alignment` section of help below)", "help": "-N; Can be set to 0 or 1. Setting this higher makes alignment slower (often much slower) but increases sensitivity; default=0", "refresh_on_change": false, "min": 0, "max": 1, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "L", "argument": null, "type": "integer", "label": "Sets the length of the seed substrings to align during multiseed alignment (see `Multiseed alignment` section of help below)", "help": "-L; Smaller values make alignment slower but more sensitive. Default=22", "refresh_on_change": false, "min": 0, "max": 32, "optional": false, "hidden": false, "is_dynamic": false, "value": "22", "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "i", "argument": null, "type": "text", "label": "Set a function governing the interval between seed substrings to use during multiseed alignment (see `Multiseed alignment` section of help below). Also see description of this option below in the help section", "help": "-i; Since it's best to use longer intervals for longer reads, this parameter sets the interval as a function of the read length, rather than a single one-size-fits-all number. For instance, specifying `-i S,1,2.5` sets the interval function `f` to `f(x) = 1 + 2.5 * sqrt(x)`, where x is the read length. If the function returns a result less than 1, it is rounded up to 1. Default=`S,1,1.15`", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "S,1,1.15", "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "n_ceil", "argument": null, "type": "text", "label": "Set a function governing the maximum number of ambiguous characters (usually `N`s and/or `.`s) allowed in a read as a function of read length", "help": "--n-ceil; For instance, specifying `L,0,0.15` sets the N-ceiling function `f` to `f(x) = 0 + 0.15 * x`, where x is the read length. Reads exceeding this ceiling are filtered out. Default=`L,0,0.15`", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "L,0,0.15", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "dpad", "argument": null, "type": "integer", "label": "Pad dynamic programming problems by that many columns on either side to allow gaps", "help": "--dpad; default=15", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "15", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "gbar", "argument": null, "type": "integer", "label": "Disallow gaps within that many positions of the beginning or end of the read", "help": "--gbar; default=4", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "4", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "ignore_quals", "argument": null, "type": "boolean", "label": "When calculating a mismatch penalty, always consider the quality value at the mismatched position to be the highest possible, regardless of the actual value", "help": "--ignore-quals; input is treated as though all quality values are high; default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--ignore-quals", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "nofw", "argument": null, "type": "boolean", "label": "Do not attempt to align unpaired reads to the forward (Watson) reference strand", "help": "In paired-end mode, `--nofw` and `--norc` pertain to the fragments; i.e. specifying `--nofw` causes `bowtie2` to explore only those paired-end configurations corresponding to fragments from the reverse-complement (Crick) strand. Default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--nofw", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "norc", "argument": null, "type": "boolean", "label": "Do not attempt to align unpaired reads to the reverse (Crick) reference strand", "help": "In paired-end mode, `--nofw` and `--norc` pertain to the fragments; i.e. specifying `--nofw` causes `bowtie2` to explore only those paired-end configurations corresponding to fragments from the reverse-complement (Crick) strand. Default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--norc", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "no_1mm_upfront", "argument": null, "type": "boolean", "label": "Prevent searching for 1-mismatch end-to-end alignments before using the multiseed heuristic (see `Multiseed alignment` section of help below)", "help": "--no-1mm-upfront; By default, Bowtie 2 will attempt to find either an exact or a 1-mismatch end-to-end alignment for the read *before* trying the multiseed heuristic.  Such alignments can be found very quickly, and many short read alignments have exact or near-exact end-to-end alignments.  However, this can lead to unexpected alignments when the user also sets options governing the multiseed heuristic, like `-L` and `-N`.  For instance, if the user specifies `-N 0` and `-L` equal to the length of the read, the user will be surprised to find 1-mismatch alignments reported.  This option prevents Bowtie 2 from searching for 1-mismatch end-to-end alignments before using the multiseed heuristic, which leads to the expected behavior when combined with options such as `-L` and `-N`. This comes at the expense of speed; Default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-1mm-upfront", "falsevalue": ""}, {"model_class": "Conditional", "name": "align_mode", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "end-to-end", "inputs": [{"model_class": "TextToolParameter", "name": "score_min_ete", "argument": null, "type": "text", "label": "Set a function governing the minimum alignment score needed for an alignment to be considered `valid` (i.e. good enough to report)", "help": "--score-min; This is a function of read length. For instance, specifying `L,0,-0.6` sets the minimum-score function `f` to `f(x) = 0 + -0.6 * x`, where `x` is the read length. The default in `--end-to-end` mode is `L,-0.6,-0.6` and the default in `--local` mode is `G,20,8`", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "L,-0.6,-0.6", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "local", "inputs": [{"model_class": "TextToolParameter", "name": "score_min_loc", "argument": null, "type": "text", "label": "Set a function governing the minimum alignment score needed for an alignment to be considered `valid` (i.e. good enough to report)", "help": "--score-min; This is a function of read length. For instance, specifying `L,0,-0.6` sets the minimum-score function `f` to `f(x) = 0 + -0.6 * x`, where `x` is the read length. The default in `--end-to-end` mode is `L,-0.6,-0.6` and the default in `--local` mode is `G,20,8`", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "G,20,8", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "align_mode_selector", "argument": null, "type": "select", "label": "Select between `--local` and `--end-to-end` alignment modes", "help": "--local and --end-to-end; see help below for detailed explanation; default=--end-to-end", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "end-to-end", "options": [["End to End (--end-to-end)", "end-to-end", true], ["Local (--local)", "local", false]], "display": "radio", "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "no", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "alignment_options_selector", "argument": null, "type": "select", "label": "Do you want to tweak alignment options?", "help": "See \"Alignment Options\" section of Help below for information", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "no", "options": [["Yes", "yes", false], ["No", "no", true]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "scoring_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": [{"model_class": "IntegerToolParameter", "name": "ma", "argument": null, "type": "integer", "label": "Set the match bonus", "help": "--ma;  In `--local` mode match bonus is added to the alignment score for each position where a read character aligns to a reference character and the characters match. Not used in `--end-to-end` mode; Default=2", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "2", "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "mp", "argument": null, "type": "text", "label": "Set the maximum (`MX`) and minimum (`MN`) mismatch penalties, both integers", "help": "--mp; A number less than or equal to `MX` and greater than or equal to `MN` is subtracted from the alignment score for each position where a read character aligns to a reference character, the characters do not match, and neither is an `N`.  If `--ignore-quals` is specified, the number subtracted quals `MX`. Otherwise, the number subtracted is `MN + floor( (MX-MN)(MIN(Q, 40.0)/40.0) )` where Q is the Phred quality value; Default=6,2", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "6,2", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "np", "argument": null, "type": "integer", "label": "Sets penalty for positions where the read, reference, or both, contain an ambiguous character such as `N`", "help": "--np; Default=1", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "rdg_read_open", "argument": null, "type": "integer", "label": "Set the read gap opening penalty", "help": "--rdg; this is the first component of --rdg flag - opening penalty; Default=5", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "5", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "rdg_read_extend", "argument": null, "type": "integer", "label": "Set the read gap extension penalty", "help": "--rdg; this is the second component of --rdg flag - extension penalty; Default=3", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "3", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "rfg_ref_open", "argument": null, "type": "integer", "label": "Set the reference gap opening penalty", "help": "--rfg; this is the first component of --rfg flag - opening penalty; Default=5", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "5", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "rfg_ref_extend", "argument": null, "type": "integer", "label": "Set the reference gap extension penalty", "help": "--rfg; this is the second component of --rfg flag - extension penalty; Default=3", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "3", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "no", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "scoring_options_selector", "argument": null, "type": "select", "label": "Do you want to tweak scoring options?", "help": "See \"Scoring Options\" section of Help below for information", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "no", "options": [["Yes", "yes", false], ["No", "no", true]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "reporting_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "no", "inputs": []}, {"model_class": "ConditionalWhen", "value": "k", "inputs": [{"model_class": "IntegerToolParameter", "name": "k", "argument": null, "type": "integer", "label": "Searches for at most that many distinct, valid alignments for each read", "help": "-k; see detailed description of this option in the help section below. Note: Bowtie 2 is not designed with large values for `-k` in mind, and when aligning reads to long, repetitive genomes large `-k` can be very, very slow", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "a", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "reporting_options_selector", "argument": null, "type": "select", "label": "Do you want to use -a or -k options", "help": "Make sure you understand implications of setting -k and -a. See \"Reporting Options\" section of Help below for information on -k and -a options", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "no", "options": [["No, do not set", "no", true], ["Set -k option and enter -k value", "k", false], ["Set -a option", "a", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "effort_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": [{"model_class": "IntegerToolParameter", "name": "D", "argument": null, "type": "integer", "label": "Attempt that many consecutive seed extension attempts to `fail` before Bowtie 2 moves on, using the alignments found so far", "help": "-D; A seed extension `fails` if it does not yield a new best or a new second-best alignment.  This limit is automatically adjusted up when -k or -a are specified. Default=15", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "15", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "R", "argument": null, "type": "integer", "label": "Set the maximum number of times Bowtie 2 will `re-seed` reads with repetitive seeds", "help": "When `re-seeding`, Bowtie 2 simply chooses a new set of reads (same length, same number of mismatches allowed) at different offsets and searches for more alignments.  A read is considered to have repetitive seeds if the total number of seed hits divided by the number of seeds that aligned at least once is greater than 300.  Default=2", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "2", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "no", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "effort_options_selector", "argument": null, "type": "select", "label": "Do you want to tweak effort options?", "help": "See \"Effort Options\" section of Help below for information", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "no", "options": [["Yes", "yes", false], ["No", "no", true]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "sam_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": [{"model_class": "BooleanToolParameter", "name": "no_unal", "argument": null, "type": "boolean", "label": "Suppress SAM records for reads that failed to align", "help": "--no-unal; Default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--no-unal", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "omit_sec_seq", "argument": null, "type": "boolean", "label": "Suppress SEQ and QUAL strings for secondary alignments", "help": "--omit-sec-seq; Default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--omit-sec-seq", "falsevalue": ""}]}, {"model_class": "ConditionalWhen", "value": "no", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "sam_options_selector", "argument": null, "type": "select", "label": "Do you want to tweak SAM/BAM Options?", "help": "See \"Output Options\" section of Help below for information", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "no", "options": [["Yes", "yes", false], ["No", "no", true]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "other_options", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": [{"model_class": "IntegerToolParameter", "name": "seed", "argument": null, "type": "integer", "label": "Use this number as the seed for pseudo-random number generator", "help": "--seed; Default=0", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "non_deterministic", "argument": null, "type": "boolean", "label": "Re-initialize the pseudo-random generator for each read using the current time", "help": "--non-deterministic; see Help below for explanation of this option; default=False", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--non-deterministic", "falsevalue": ""}]}, {"model_class": "ConditionalWhen", "value": "no", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "other_options_selector", "argument": null, "type": "select", "label": "Do you want to tweak Other Options?", "help": "See \"Other Options\" section of Help below for information", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "no", "options": [["Yes", "yes", false], ["No", "no", true]], "display": null, "multiple": false, "textable": false}}]}], "test_param": {"model_class": "SelectToolParameter", "name": "analysis_type_selector", "argument": null, "type": "select", "label": "Select analysis mode", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "simple", "options": [["1: Default setting only", "simple", false], ["2: Full parameter list", "full", false]], "display": null, "multiple": false, "textable": false}}], "outputs": [{"model_class": "ToolOutput", "name": "output_unaligned_reads_l", "format": "fastqsanger", "label": "${tool.name} on ${on_string}: unaligned reads (L)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_1932", "edam_data": "data_2044", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "output_unaligned_reads_r", "format": "fastqsanger", "label": "${tool.name} on ${on_string}: unaligned reads (R)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_1932", "edam_data": "data_2044", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "output", "format": "bam", "label": "${tool.name} on ${on_string}: aligned reads (sorted BAM)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_2572", "edam_data": "data_0863", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}], "panel_section_id": "mapping", "panel_section_name": "Mapping", "form_style": "regular"}