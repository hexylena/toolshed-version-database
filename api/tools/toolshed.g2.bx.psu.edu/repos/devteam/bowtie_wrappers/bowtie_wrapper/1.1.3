{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie_wrappers/bowtie_wrapper/1.1.3", "name": "Map with Bowtie for Illumina", "version": "1.1.3", "description": "", "labels": [], "edam_operations": ["operation_0292"], "edam_topics": ["topic_0622", "topic_0102", "topic_0196", "topic_3168"], "hidden": "", "is_workflow_compatible": true, "xrefs": [{"value": "bowtie", "reftype": "bio.tools"}], "tool_shed_repository": {"name": "bowtie_wrappers", "owner": "devteam", "changeset_revision": "df86f29bedee", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "Conditional", "name": "refGenomeSource", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "indexed", "inputs": [{"model_class": "SelectToolParameter", "name": "index", "argument": null, "type": "select", "label": "Select a reference genome", "help": "if your genome of interest is not listed - contact Galaxy team", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": "dm3", "options": [["Drosophila melanogaster: dm3", "dm3", false], ["Human (Homo sapiens): hg18", "hg18", false], ["Human (Homo sapiens): hg19", "hg19", false], ["Human (Homo sapiens): hg19chrM Mitochondrial DNA", "hg19chrM", false], ["Human (Homo sapiens): hg38 Canonical", "hg38canon", false], ["Human (Homo sapiens): hg38 Full", "hg38full", false], ["Mouse (Mus musculus): mm10", "mm10", false], ["Mouse (Mus musculus): mm9", "mm9", false], ["Physcomitrella patens assembly version 1.2b (2014/03/27): pp1.2b", "pp1.2b", false], ["Rat (Rattus norvegicus): rn5", "rn5", false], ["Zebrafish Jul. 2010 (Zv9/danRer7) (danRer7)", "danRer7", false], ["Zebrafish May 2017 (GRCz11/danRer11) (danRer11)", "danRer11", false], ["Zebrafish Sep. 2014 (GRCz10/danRer10) (danRer10)", "danRer10", false], ["canFam3", "canFam3", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "history", "inputs": [{"model_class": "DataToolParameter", "name": "ownFile", "argument": null, "type": "data", "label": "Select the reference genome", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["bowtie_base_index", "fasta"], "edam": {"edam_formats": ["format_2331", "format_1929"], "edam_data": ["data_0006", "data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "Conditional", "name": "indexParams", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "indexPreSet", "inputs": []}, {"model_class": "ConditionalWhen", "value": "indexFull", "inputs": [{"model_class": "Conditional", "name": "autoBehavior", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "auto", "inputs": []}, {"model_class": "ConditionalWhen", "value": "set", "inputs": [{"model_class": "SelectToolParameter", "name": "packed", "argument": null, "type": "select", "label": "Whether or not to use a packed representation for DNA strings (--packed)", "help": "Packed representation saves memory but makes indexing 2-3 times slower", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "unpacked", "options": [["Use regular representation", "unpacked", false], ["Use packed representation", "packed", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "IntegerToolParameter", "name": "bmax", "argument": null, "type": "integer", "label": "Maximum number of suffixes allowed in a block (--bmax)", "help": "-1 for not specified. Must be at least 1", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-1", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "bmaxdivn", "argument": null, "type": "integer", "label": "Maximum number of suffixes allowed in a block as a fraction of the length of the reference (--bmaxdivn)", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "4", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "dcv", "argument": null, "type": "integer", "label": "The period for the difference-cover sample (--dcv)", "help": "A larger period yields less memory overhead, but may make suffix sorting slower, especially if repeats are present", "refresh_on_change": false, "min": 3, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1024", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "autoB", "argument": null, "type": "select", "label": "Choose to use automatic or specified behavior for some parameters (-a)", "help": "Allows you to set --packed, --bmax, --bmaxdivn, and --dcv", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "auto", "options": [["Automatic behavior", "auto", false], ["Set values (sets --noauto and allows others to be set)", "set", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "SelectToolParameter", "name": "nodc", "argument": null, "type": "select", "label": "Whether or not to disable the use of the difference-cover sample (--nodc)", "help": "Suffix sorting becomes quadratic-time in the worst case (with a very repetitive reference)", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "dc", "options": [["Use difference-cover sample", "dc", false], ["Disable difference-cover sample", "nodc", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "noref", "argument": null, "type": "select", "label": "Whether or not to build the part of the reference index used only in paired-end alignment (-r)", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "ref", "options": [["Build all index files", "ref", false], ["Do not build paired-end alignment index files", "noref", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "IntegerToolParameter", "name": "offrate", "argument": null, "type": "integer", "label": "The indexer will mark every 2^n Burrows-Wheeler rows with their corresponding location on the genome (-o)", "help": "Marking more rows makes reference-position lookups faster, but requires more memory to hold the annotations at runtime", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "5", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "ftab", "argument": null, "type": "integer", "label": "The size of the ftab lookup table used to calculate an initial Burrows-Wheeler range with respect to the first n characters of the query (-t)", "help": "ftab size is 4^(n+1) bytes", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "10", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "ntoa", "argument": null, "type": "select", "label": "Whether or not to convert Ns in the reference sequence to As (--ntoa)", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "no", "options": [["Do not convert Ns", "no", false], ["Convert Ns to As", "yes", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "endian", "argument": null, "type": "select", "label": "Endianness to use when serializing integers to the index file (--big/--little)", "help": "Little is most appropriate for Intel- and AMD-based architecture", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "little", "options": [["Little", "little", false], ["Big", "big", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "IntegerToolParameter", "name": "seed", "argument": null, "type": "integer", "label": "Seed for the pseudorandom number generator (--seed)", "help": "Use -1 to use default", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-1", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "indexSettings", "argument": null, "type": "select", "label": "Choose whether to use Default options for building indices or to Set your own", "help": "These settings are ignored when using a prebuilt index", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "indexPreSet", "options": [["Default", "indexPreSet", false], ["Set your own", "indexFull", false]], "display": null, "multiple": false, "textable": false}}]}], "test_param": {"model_class": "SelectToolParameter", "name": "genomeSource", "argument": null, "type": "select", "label": "Will you select a reference genome from your history or use a built-in index?", "help": "Built-ins were indexed using default options", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "indexed", "options": [["Use a built-in index", "indexed", false], ["Use one from the history", "history", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "singlePaired", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "single", "inputs": [{"model_class": "DataToolParameter", "name": "sInput1", "argument": null, "type": "data", "label": "FASTQ file", "help": "Must have ASCII encoded quality scores", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastqsanger", "fastqillumina", "fastqsolexa"], "edam": {"edam_formats": ["format_1932", "format_1931", "format_1933"], "edam_data": ["data_2044", "data_2044", "data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "Conditional", "name": "sParams", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "preSet", "inputs": []}, {"model_class": "ConditionalWhen", "value": "full", "inputs": [{"model_class": "IntegerToolParameter", "name": "sSkip", "argument": null, "type": "integer", "label": "Skip the first n reads (-s)", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "sAlignLimit", "argument": null, "type": "integer", "label": "Only align the first n reads (-u)", "help": "-1 for off", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-1", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "sTrimH", "argument": null, "type": "integer", "label": "Trim n bases from high-quality (left) end of each read before alignment (-5)", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "sTrimL", "argument": null, "type": "integer", "label": "Trim n bases from low-quality (right) end of each read before alignment (-3)", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "Conditional", "name": "alignModeOption", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "nMode", "inputs": [{"model_class": "IntegerToolParameter", "name": "sMismatchSeed", "argument": null, "type": "integer", "label": "Maximum number of mismatches permitted in the seed (-n)", "help": "May be 0, 1, 2, or 3", "refresh_on_change": false, "min": 0, "max": 3, "optional": false, "hidden": false, "is_dynamic": false, "value": "2", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "sMismatchQual", "argument": null, "type": "integer", "label": "Maximum permitted total of quality values at all mismatched read positions (-e)", "help": "", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "70", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "sSeedLen", "argument": null, "type": "integer", "label": "Seed length (-l)", "help": "Minimum value is 5", "refresh_on_change": false, "min": 5, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "28", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "sRounding", "argument": null, "type": "select", "label": "Whether or not to round to the nearest 10 and saturating at 30 (--nomaqround)", "help": "Maq accepts quality values in the Phred quality scale, but internally rounds values to the nearest 10, with a maximum of 30. By default, bowtie also rounds this way", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "round", "options": [["Round to nearest 10", "round", false], ["Do not round to nearest 10", "noRound", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "vMode", "inputs": [{"model_class": "IntegerToolParameter", "name": "maxMismatches", "argument": null, "type": "integer", "label": "Maximum number of mismatches (-v)", "help": "May be 0, 1, 2, or 3", "refresh_on_change": false, "min": 0, "max": 3, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "alignMode", "argument": null, "type": "select", "label": "Alignment mode", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "nMode", "options": [["Maq-like: quality-aware, limit mismatches in seed (-n)", "nMode", false], ["ignore qualities, limit end-to-end mismatches (-v)", "vMode", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "SelectToolParameter", "name": "sForwardAlign", "argument": null, "type": "select", "label": "Choose whether or not to attempt to align against the forward reference strand (--nofw)", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "forward", "options": [["Align against the forward reference strand", "forward", false], ["Do not align against the forward reference strand", "noForward", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "sReverseAlign", "argument": null, "type": "select", "label": "Choose whether or not to attempt to align against the reverse-complement reference strand (--norc)", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "reverse", "options": [["Align against the reverse-complement reference strand", "reverse", false], ["Do not align against the reverse-complement reference strand", "noReverse", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "sBestOption", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "noBest", "inputs": [{"model_class": "Conditional", "name": "sTryHardOption", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "noTryHard", "inputs": [{"model_class": "IntegerToolParameter", "name": "snMaxBacktracks", "argument": null, "type": "integer", "label": "Maximum number of backtracks permitted when aligning a read (--maxbts)", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "125", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "doTryHard", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "sTryHard", "argument": null, "type": "select", "label": "Whether or not to try as hard as possible to find valid alignments when they exist (-y)", "help": "Tryhard mode is much slower than regular mode", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "noTryHard", "options": [["Do not try hard", "noTryHard", false], ["Try hard", "doTryHard", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "doBest", "inputs": [{"model_class": "SelectToolParameter", "name": "sdStrata", "argument": null, "type": "select", "label": "Whether or not to report only those alignments that fall in the best stratum if many valid alignments exist and are reportable (--strata)", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "noStrata", "options": [["Do not use strata option", "noStrata", false], ["Use strata option", "doStrata", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "sTryHardOption", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "noTryHard", "inputs": [{"model_class": "IntegerToolParameter", "name": "sdMaxBacktracks", "argument": null, "type": "integer", "label": "Maximum number of backtracks permitted when aligning a read (--maxbts)", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "800", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "doTryHard", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "sTryHard", "argument": null, "type": "select", "label": "Whether or not to try as hard as possible to find valid alignments when they exist (-y)", "help": "Tryhard mode is much slower than regular mode", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "noTryHard", "options": [["Do not try hard", "noTryHard", false], ["Try hard", "doTryHard", false]], "display": null, "multiple": false, "textable": false}}]}], "test_param": {"model_class": "SelectToolParameter", "name": "sBest", "argument": null, "type": "select", "label": "Whether or not to make Bowtie guarantee that reported singleton alignments are 'best' in terms of stratum and in terms of the quality values at the mismatched positions (--best)", "help": "Removes all strand bias. Only affects which alignments are reported by Bowtie. Runs slower with best option", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "noBest", "options": [["Do not use best", "noBest", false], ["Use best", "doBest", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "sAllValAlignsOption", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "noAllValAligns", "inputs": [{"model_class": "IntegerToolParameter", "name": "sValAlign", "argument": null, "type": "integer", "label": "Report up to n valid alignments per read (-k)", "help": "", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "doAllValAligns", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "sAllValAligns", "argument": null, "type": "select", "label": "Whether or not to report all valid alignments per read (-a)", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "noAllValAligns", "options": [["Do not report all valid alignments", "noAllValAligns", false], ["Report all valid alignments", "doAllValAligns", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "IntegerToolParameter", "name": "sSuppressAlign", "argument": null, "type": "integer", "label": "Suppress all alignments for a read if more than n reportable alignments exist (-m)", "help": "-1 for no limit", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-1", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "sMaxFile", "argument": null, "type": "boolean", "label": "Write all reads with a number of valid alignments exceeding the limit set with the -m option to a file (--max)", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}, {"model_class": "BooleanToolParameter", "name": "sUnmappedFile", "argument": null, "type": "boolean", "label": "Write all reads that could not be aligned to a file (--un)", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}, {"model_class": "IntegerToolParameter", "name": "sOffrate", "argument": null, "type": "integer", "label": "Override the offrate of the index to n (-o)", "help": "-1 for default", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-1", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "sSeed", "argument": null, "type": "integer", "label": "Seed for pseudo-random number generator (--seed)", "help": "-1 for default", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-1", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "sSettingsType", "argument": null, "type": "select", "label": "Bowtie settings to use", "help": "For most mapping needs use Commonly used settings. If you want full control use Full parameter list", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "preSet", "options": [["Commonly used", "preSet", false], ["Full parameter list", "full", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "paired", "inputs": [{"model_class": "DataToolParameter", "name": "pInput1", "argument": null, "type": "data", "label": "Forward FASTQ file", "help": "Must have ASCII encoded quality scores", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastqsanger", "fastqillumina", "fastqsolexa"], "edam": {"edam_formats": ["format_1932", "format_1931", "format_1933"], "edam_data": ["data_2044", "data_2044", "data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "pInput2", "argument": null, "type": "data", "label": "Reverse FASTQ file", "help": "File format must match the Forward FASTQ file", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": true, "value": null, "extensions": ["fastqsanger", "fastqillumina", "fastqsolexa"], "edam": {"edam_formats": ["format_1932", "format_1931", "format_1933"], "edam_data": ["data_2044", "data_2044", "data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "IntegerToolParameter", "name": "pMaxInsert", "argument": null, "type": "integer", "label": "Maximum insert size for valid paired-end alignments (-X)", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1000", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "pMateOrient", "argument": null, "type": "select", "label": "The upstream/downstream mate orientation for valid paired-end alignment against the forward reference strand (--fr/--rf/--ff)", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "fr", "options": [["FR (for Illumina)", "fr", false], ["RF", "rf", false], ["FF (for SOLiD)", "ff", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "pParams", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "preSet", "inputs": []}, {"model_class": "ConditionalWhen", "value": "full", "inputs": [{"model_class": "IntegerToolParameter", "name": "pSkip", "argument": null, "type": "integer", "label": "Skip the first n pairs (-s)", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "pAlignLimit", "argument": null, "type": "integer", "label": "Only align the first n pairs (-u)", "help": "-1 for off", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-1", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "pTrimH", "argument": null, "type": "integer", "label": "Trim n bases from high-quality (left) end of each read before alignment (-5)", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "pTrimL", "argument": null, "type": "integer", "label": "Trim n bases from low-quality (right) end of each read before alignment (-3)", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "Conditional", "name": "alignModeOption", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "nMode", "inputs": [{"model_class": "IntegerToolParameter", "name": "pMismatchSeed", "argument": null, "type": "integer", "label": "Maximum number of mismatches permitted in the seed (-n)", "help": "May be 0, 1, 2, or 3", "refresh_on_change": false, "min": 0, "max": 3, "optional": false, "hidden": false, "is_dynamic": false, "value": "2", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "pMismatchQual", "argument": null, "type": "integer", "label": "Maximum permitted total of quality values at all mismatched read positions (-e)", "help": "", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "70", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "pSeedLen", "argument": null, "type": "integer", "label": "Seed length (-l)", "help": "Minimum value is 5", "refresh_on_change": false, "min": 5, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "28", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "pRounding", "argument": null, "type": "select", "label": "Whether or not to round to the nearest 10 and saturating at 30 (--nomaqround)", "help": "Maq accepts quality values in the Phred quality scale, but internally rounds values to the nearest 10, with a maximum of 30. By default, bowtie also rounds this way", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "round", "options": [["Round to nearest 10", "round", false], ["Do not round to nearest 10", "noRound", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "vMode", "inputs": [{"model_class": "IntegerToolParameter", "name": "maxMismatches", "argument": null, "type": "integer", "label": "Maximum number of mismatches (-v)", "help": "May be 0, 1, 2, or 3", "refresh_on_change": false, "min": 0, "max": 3, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "alignMode", "argument": null, "type": "select", "label": "Alignment mode", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "nMode", "options": [["Maq-like: quality-aware, limit mismatches in seed (-n)", "nMode", false], ["ignore qualities, limit end-to-end mismatches (-v)", "vMode", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "IntegerToolParameter", "name": "pMinInsert", "argument": null, "type": "integer", "label": "Minimum insert size for valid paired-end alignments (-I)", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "pForwardAlign", "argument": null, "type": "select", "label": "Choose whether or not to attempt to align against the forward reference strand (--nofw)", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "forward", "options": [["Align against the forward reference strand", "forward", false], ["Do not align against the forward reference strand", "noForward", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "pReverseAlign", "argument": null, "type": "select", "label": "Choose whether or not to attempt to align against the reverse-complement reference strand (--norc)", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "reverse", "options": [["Align against the reverse-complement reference strand", "reverse", false], ["Do not align against the reverse-complement reference strand", "noReverse", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "pBestOption", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "noBest", "inputs": [{"model_class": "Conditional", "name": "pTryHardOption", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "noTryHard", "inputs": [{"model_class": "IntegerToolParameter", "name": "pMaxAlignAttempt", "argument": null, "type": "integer", "label": "Maximum number of attempts Bowtie will make to match an alignment for one mate with an alignment for the opposite mate (--pairtries)", "help": "", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "100", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "pnMaxBacktracks", "argument": null, "type": "integer", "label": "Maximum number of backtracks permitted when aligning a read (--maxbts)", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "125", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "doTryHard", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "pTryHard", "argument": null, "type": "select", "label": "Whether or not to try as hard as possible to find valid alignments when they exist (-y)", "help": "Tryhard mode is much slower than regular mode", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "noTryHard", "options": [["Do not try hard", "noTryHard", false], ["Try hard", "doTryHard", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "doBest", "inputs": [{"model_class": "SelectToolParameter", "name": "pdStrata", "argument": null, "type": "select", "label": "Whether or not to report only those alignments that fall in the best stratum if many valid alignments exist and are reportable (--strata)", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "noStrata", "options": [["Do not use strata option", "noStrata", false], ["Use strata option", "doStrata", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "pTryHardOption", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "noTryHard", "inputs": [{"model_class": "IntegerToolParameter", "name": "pMaxAlignAttempt", "argument": null, "type": "integer", "label": "Maximum number of attempts Bowtie will make to match an alignment for one mate with an alignment for the opposite mate (--pairtries)", "help": "", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "100", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "pdMaxBacktracks", "argument": null, "type": "integer", "label": "Maximum number of backtracks permitted when aligning a read (--maxbts)", "help": "", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "800", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "doTryHard", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "pTryHard", "argument": null, "type": "select", "label": "Whether or not to try as hard as possible to find valid alignments when they exist (-y)", "help": "Tryhard mode is much slower than regular mode", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "noTryHard", "options": [["Do not try hard", "noTryHard", false], ["Try hard", "doTryHard", false]], "display": null, "multiple": false, "textable": false}}]}], "test_param": {"model_class": "SelectToolParameter", "name": "pBest", "argument": null, "type": "select", "label": "Whether or not to make Bowtie guarantee that reported singleton alignments are 'best' in terms of stratum and in terms of the quality values at the mismatched positions (--best)", "help": "Removes all strand bias. Only affects which alignments are reported by Bowtie. Runs slower with best option", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "noBest", "options": [["Do not use best", "noBest", false], ["Use best", "doBest", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "pAllValAlignsOption", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "noAllValAligns", "inputs": [{"model_class": "IntegerToolParameter", "name": "pValAlign", "argument": null, "type": "integer", "label": "Report up to n valid alignments per pair (-k)", "help": "", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "1", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "doAllValAligns", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "pAllValAligns", "argument": null, "type": "select", "label": "Whether or not to report all valid alignments per pair (-a)", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "noAllValAligns", "options": [["Do not report all valid alignments", "noAllValAligns", false], ["Report all valid alignments", "doAllValAligns", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "IntegerToolParameter", "name": "pSuppressAlign", "argument": null, "type": "integer", "label": "Suppress all alignments for a pair if more than n reportable alignments exist (-m)", "help": "-1 for no limit", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-1", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "pMaxFile", "argument": null, "type": "boolean", "label": "Write all reads with a number of valid alignments exceeding the limit set with the -m option to a file (--max)", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}, {"model_class": "BooleanToolParameter", "name": "pUnmappedFile", "argument": null, "type": "boolean", "label": "Write all reads that could not be aligned to a file (--un)", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}, {"model_class": "IntegerToolParameter", "name": "pOffrate", "argument": null, "type": "integer", "label": "Override the offrate of the index to n (-o)", "help": "-1 for default", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-1", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "pSeed", "argument": null, "type": "integer", "label": "Seed for pseudo-random number generator (--seed)", "help": "-1 for default", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "-1", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "pSettingsType", "argument": null, "type": "select", "label": "Bowtie settings to use", "help": "For most mapping needs use Commonly used settings. If you want full control use Full parameter list", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "preSet", "options": [["Commonly used", "preSet", false], ["Full parameter list", "full", false]], "display": null, "multiple": false, "textable": false}}]}], "test_param": {"model_class": "SelectToolParameter", "name": "sPaired", "argument": null, "type": "select", "label": "Is this library mate-paired?", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "single", "options": [["Single-end", "single", false], ["Paired-end", "paired", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "BooleanToolParameter", "name": "suppressHeader", "argument": null, "type": "boolean", "label": "Suppress the header in the output SAM file (--sam-nohead)", "help": "Bowtie produces SAM with several lines of header information by default", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}], "outputs": [{"model_class": "ToolOutput", "name": "output", "format": "sam", "label": "${tool.name} on ${on_string}: mapped reads", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_2573", "edam_data": "data_0863", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "output_suppressed_reads_l", "format": "fastq", "label": "${tool.name} on ${on_string}: suppressed reads (L)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_1930", "edam_data": "data_2044", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "output_suppressed_reads_r", "format": "fastq", "label": "${tool.name} on ${on_string}: suppressed reads (R)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_1930", "edam_data": "data_2044", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "output_unmapped_reads_l", "format": "fastq", "label": "${tool.name} on ${on_string}: unmapped reads (L)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_1930", "edam_data": "data_2044", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "output_unmapped_reads_r", "format": "fastq", "label": "${tool.name} on ${on_string}: unmapped reads (R)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_1930", "edam_data": "data_2044", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}], "panel_section_id": "mapping", "panel_section_name": "Mapping", "form_style": "regular"}