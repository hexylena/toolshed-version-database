{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.10.1+galaxy0", "name": "Alevin", "version": "1.10.1+galaxy0", "description": "Quantification and analysis of 3-prime tagged-end single-cell sequencing data", "labels": [], "edam_operations": [], "edam_topics": [], "hidden": "", "is_workflow_compatible": true, "xrefs": [{"value": "Alevin", "reftype": "bio.tools"}], "tool_shed_repository": {"name": "alevin", "owner": "bgruening", "changeset_revision": "e32b215b7c04", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "Conditional", "name": "refTranscriptSource", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "indexed", "inputs": [{"model_class": "SelectToolParameter", "name": "index", "argument": null, "type": "select", "label": "Select a reference transcriptome", "help": "If your transcriptome of interest is not listed, contact your Galaxy admin", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": "hg38", "options": [["Human Dec. 2013 (GRCh38/hg38) (hg38)", "hg38", false], ["Human Feb. 2009 (GRCh37/hg19) (hg19)", "hg19", false], ["Mouse (Mus Musculus): mm10 Full", "mm10", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "history", "inputs": [{"model_class": "Section", "name": "s_index", "type": "section", "title": "Salmon index", "help": null, "expanded": true, "inputs": [{"model_class": "DataToolParameter", "name": "fasta", "argument": null, "type": "data", "label": "Transcripts FASTA file", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "genome", "argument": null, "type": "data", "label": "Reference genome", "help": "The reference genome is required for generating a decoy-away index. The decoy sequences are regions of the target genome                              that are sequence similar to annotated transcripts. These are the regions of the genome most likely to cause mismapping.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fasta"], "edam": {"edam_formats": ["format_1929"], "edam_data": ["data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "IntegerToolParameter", "name": "kmer", "argument": null, "type": "integer", "label": "Kmer length", "help": "", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "31", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "phash", "argument": null, "type": "boolean", "label": "Perfect Hash", "help": "Build the index using a perfect hash rather than a dense hash.  This will require less memory (especially during quantification),                              but will take longer to construct", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--perfectHash", "falsevalue": ""}]}]}], "test_param": {"model_class": "SelectToolParameter", "name": "TranscriptSource", "argument": null, "type": "select", "label": "Select a reference transcriptome from your history or use a built-in index?", "help": "Built-ins were indexed using default options", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "history", "options": [["Use a built-in index", "indexed", false], ["Use one from the history", "history", true]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "pairstraight", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "paired", "inputs": [{"model_class": "DataToolParameter", "name": "file1", "argument": null, "type": "data", "label": "Mate pair 1", "help": "CB+UMI raw sequence file(s)", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastq", "fastq.gz", "fastqsanger.gz", "fastq.bz2"], "edam": {"edam_formats": ["format_1930", "format_1930", "format_1932", "format_1930"], "edam_data": ["data_2044", "data_2044", "data_2044", "data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "file2", "argument": null, "type": "data", "label": "Mate pair 2", "help": "Read-sequence file(s)", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastq", "fastq.gz", "fastqsanger.gz", "fastq.bz2"], "edam": {"edam_formats": ["format_1930", "format_1930", "format_1932", "format_1930"], "edam_data": ["data_2044", "data_2044", "data_2044", "data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "Conditional", "name": "libtype", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "A", "inputs": []}, {"model_class": "ConditionalWhen", "value": "U", "inputs": [{"model_class": "SelectToolParameter", "name": "orientation", "argument": null, "type": "select", "label": "Relative orientation of reads within a pair", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "I", "options": [["Mates are oriented in the same direction (M = matching)", "M", false], ["Mates are oriented away from each other (O = outward)", "O", false], ["Mates are oriented toward each other (I = inward)", "I", true]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "SF", "inputs": [{"model_class": "SelectToolParameter", "name": "orientation", "argument": null, "type": "select", "label": "Relative orientation of reads within a pair", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "I", "options": [["Mates are oriented in the same direction (M = matching)", "M", false], ["Mates are oriented away from each other (O = outward)", "O", false], ["Mates are oriented toward each other (I = inward)", "I", true]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "SR", "inputs": [{"model_class": "SelectToolParameter", "name": "orientation", "argument": null, "type": "select", "label": "Relative orientation of reads within a pair", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "I", "options": [["Mates are oriented in the same direction (M = matching)", "M", false], ["Mates are oriented away from each other (O = outward)", "O", false], ["Mates are oriented toward each other (I = inward)", "I", true]], "display": null, "multiple": false, "textable": false}]}], "test_param": {"model_class": "SelectToolParameter", "name": "strandedness", "argument": null, "type": "select", "label": "Specify the strandedness of the reads", "help": "--libtype", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "A", "options": [["Infer automatically (A)", "A", true], ["Not stranded (U)", "U", false], ["read comes from the forward strand (SF)", "SF", false], ["read comes from the reverse strand (SR)", "SR", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "unmated", "inputs": [{"model_class": "DataToolParameter", "name": "unmatedreads", "argument": null, "type": "data", "label": "Unmated reads files", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["fastq", "fastq.gz", "fastqsanger.gz", "fastq.bz2"], "edam": {"edam_formats": ["format_1930", "format_1930", "format_1932", "format_1930"], "edam_data": ["data_2044", "data_2044", "data_2044", "data_2044"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "Conditional", "name": "libtype", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "A", "inputs": []}, {"model_class": "ConditionalWhen", "value": "U", "inputs": []}, {"model_class": "ConditionalWhen", "value": "SF", "inputs": []}, {"model_class": "ConditionalWhen", "value": "SR", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "strandedness", "argument": null, "type": "select", "label": "Specify the strandedness of the reads", "help": "--libtype", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "A", "options": [["Infer automatically (A)", "A", true], ["Not stranded (U)", "U", false], ["read comes from the forward strand (SF)", "SF", false], ["read comes from the reverse strand (SR)", "SR", false]], "display": null, "multiple": false, "textable": false}}]}], "test_param": {"model_class": "SelectToolParameter", "name": "readselect", "argument": null, "type": "select", "label": "Single or paired-end reads?", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "paired", "options": [["Paired-end", "paired", false], ["Single-end", "unmated", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "protocol_cond", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "--dropseq", "inputs": []}, {"model_class": "ConditionalWhen", "value": "--chromium", "inputs": []}, {"model_class": "ConditionalWhen", "value": "--chromiumV3", "inputs": []}, {"model_class": "ConditionalWhen", "value": "--gemcode", "inputs": []}, {"model_class": "ConditionalWhen", "value": "--celseq", "inputs": []}, {"model_class": "ConditionalWhen", "value": "--celseq2", "inputs": []}, {"model_class": "ConditionalWhen", "value": "--sciseq3", "inputs": []}, {"model_class": "ConditionalWhen", "value": "--indropV2", "inputs": [{"model_class": "TextToolParameter", "name": "w1", "argument": "--w1", "type": "text", "label": "w1 adapters", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "--splitSeqV1", "inputs": []}, {"model_class": "ConditionalWhen", "value": "--splitSeqV2", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "protocol", "argument": null, "type": "select", "label": "Type of single-cell protocol", "help": "In cases where single-cell protocol supports variable length cellbarcodes, alevin adds nucleotide padding to make the lengths uniform. Furthermore, the padding scheme ensures that there are no collisions added in the process.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "--dropseq", "options": [["DropSeq Single Cell protocol", "--dropseq", false], ["10x chromium v2 Single Cell protocol", "--chromium", false], ["10x chromium v3 Single Cell protocol", "--chromiumV3", false], ["Gemcode v1 Single Cell protocol", "--gemcode", false], ["CEL-Seq Single Cell protocol", "--celseq", false], ["CEL-Seq2 Single Cell protocol", "--celseq2", false], ["Sci-RNA-seq3 protocol", "--sciseq3", false], ["InDrop v2 protocol", "--indropV2", false], ["SplitSeqV1 protocol", "--splitSeqV1", false], ["SplitSeqV2 protocol", "--splitSeqV2", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "DataToolParameter", "name": "tgmap", "argument": null, "type": "data", "label": "Transcript to gene map file", "help": "Tsv with no header, containing two columns mapping each transcript present in the reference to the corresponding gene (the first column is a transcript and the second is the corresponding gene).", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["tsv", "tabular"], "edam": {"edam_formats": ["format_3475", "format_3475"], "edam_data": ["data_0006", "data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "SelectToolParameter", "name": "output_files", "argument": null, "type": "select", "label": "Extra output files", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "options": [["Salmon Quant log file", "salmon_log", false], ["Observed fragment length distribution", "fragment_length", false], ["Auxiliar info files", "auxiliar_info", false], ["Per cell level parsimonious Umi graph (--dumpUmiGraph)", "dumpUmiGraph", false], ["Features used by the CB classification and their counts at each cell level (--dumpFeatures)", "dumpFeatures", false], ["Full CB-EC-UMI-count data-structure (--dumpBfh)", "dumpBfh", false], ["Commands info file", "commands", false]], "display": "checkboxes", "multiple": true, "textable": false}, {"model_class": "Section", "name": "optional", "type": "section", "title": "Advanced options", "help": null, "expanded": false, "inputs": [{"model_class": "DataToolParameter", "name": "whitelist", "argument": "--whitelist", "type": "data", "label": "Whitelist file", "help": "Explicitly specify whitelist CP for cell detection and CB sequence correction. If not specified, putative CBs generated.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["tsv", "tabular"], "edam": {"edam_formats": ["format_3475", "format_3475"], "edam_data": ["data_0006", "data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "BooleanToolParameter", "name": "noDedup", "argument": "--noDedup", "type": "boolean", "label": "Skip deduplication step", "help": "Causes pipeline to only perform CB correction, then maps the read-sequences to the transcriptome generating the interim data-structure of CB-EqClass-UMI-count. Used in parallel with --dumpBarcodeEq or --dumpBfh for the purposes of obtaining raw information or debugging.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--noDedup", "falsevalue": ""}, {"model_class": "DataToolParameter", "name": "mrna", "argument": "--mrna", "type": "data", "label": "Mito-RNA genes file", "help": "Single column tsv of mitochondrial genes which are to be used as a feature for CB whitelising naive Bayes classification.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["tsv"], "edam": {"edam_formats": ["format_3475"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "rrna", "argument": "--rrna", "type": "data", "label": "Ribosomal RNA file", "help": "Single column tsv of ribosomal genes which are to be used as a feature for CB whitelising naive Bayes classification.", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["tsv"], "edam": {"edam_formats": ["format_3475"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "BooleanToolParameter", "name": "dumpMtx", "argument": "--dumpMtx", "type": "boolean", "label": " Dump cell v transcripts count matrix in MTX format", "help": "Converts the default binary format of alevin for gene-count matrix into a human readable mtx (matrix market exchange) sparse format.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--dumpMtx", "falsevalue": ""}, {"model_class": "IntegerToolParameter", "name": "forceCells", "argument": "--forceCells", "type": "integer", "label": "Number of cells", "help": "Explicitly specify the number of cells.", "refresh_on_change": false, "min": 0, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "expectCells", "argument": "--expectCells", "type": "integer", "label": "Upper bound on expected number of cells", "help": "define a close upper bound on expected number of cells.", "refresh_on_change": false, "min": 0, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "numCellBootstraps", "argument": "--numCellBootstraps", "type": "integer", "label": "Generate mean and variance for cell x gene matrix by boostrap", "help": "Performs certain number of bootstrap and generate the mean and variance of the count matrix", "refresh_on_change": false, "min": 0, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "minScoreFraction", "argument": "--minScoreFraction", "type": "float", "label": "Minimum allowed score for a mapping", "help": "This value controls the minimum allowed score for a mapping to be considered valid. It matters only when --validateMappings has been passed to Salmon. The maximum possible score for a fragment is ms = read_len * ma (or ms = (left_read_len + right_read_len) * ma for paired-end reads).                 The argument to --minScoreFraction determines what fraction of the maximum score s a mapping must achieve to be potentially retained. For a minimum score fraction of f, only mappings with a score less than (f * s) will be kept. Mappings with lower scores will be considered as low-quality, and will be discarded.", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "keepCBFraction", "argument": "--keepCBFraction", "type": "float", "label": "Fraction of cellular barcodes to keep", "help": "Use 1 to quantify all", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "maxNumBarcodes", "argument": "--maxNumBarcodes", "type": "integer", "label": "Maximum allowable limit to process the cell barcodes", "help": "Default: 100000", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "100000", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "freqThreshold", "argument": "--freqThreshold", "type": "integer", "label": "Minimum frequency for a barcode to be considered", "help": "Default: 10", "refresh_on_change": false, "min": 0, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "10", "area": false, "datalist": []}]}], "outputs": [{"model_class": "ToolOutputCollection", "name": "umigraphs", "format": null, "label": "${tool.name} on ${on_string}: UMI graph PDFs", "hidden": false, "output_type": "collection", "default_format": "data", "default_format_source": null, "default_metadata_source": null, "inherit_format": false, "inherit_metadata": false, "structure": {"collection_type": "list", "collection_type_source": null, "collection_type_from_rules": null, "structured_like": null, "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": "pdf", "visible": false, "assign_primary_output": false, "directory": "fixed", "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "(?P<name>.+)\\.pdf", "sort_by": "filename"}]}}, {"model_class": "ToolOutput", "name": "quants_mat_tsv", "format": "txt", "label": "${tool.name} on ${on_string}: per-cell gene-count matrix (tabular)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "quants_mat.tsv", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "quants_mat_mtx", "format": "mtx", "label": "${tool.name} on ${on_string}: per-cell gene-count matrix (MTX)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output/alevin/quants_mat.mtx", "edam_format": "format_3475", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "quants_mat_gz", "format": "gz", "label": "${tool.name} on ${on_string}: per-cell level gene-count matrix (binary)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output/alevin/quants_mat.gz", "edam_format": "format_2333", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "quants_mat_cols_txt", "format": "txt", "label": "${tool.name} on ${on_string}: column headers (gene-ids)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output/alevin/quants_mat_cols.txt", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "quants_mat_rows_txt", "format": "txt", "label": "${tool.name} on ${on_string}: row index (CB-ids)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output/alevin/quants_mat_rows.txt", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "quants_tier_mat", "format": "gz", "label": "${tool.name} on ${on_string}: tier categorization", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output/alevin/quants_tier_mat.gz", "edam_format": "format_2333", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "featureDump_txt", "format": "txt", "label": "${tool.name} on ${on_string}: cell-level information (featureDump)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output/alevin/featureDump.txt", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "raw_cb_frequency_txt", "format": "txt", "label": "${tool.name} on ${on_string}: raw CB classification frequencies", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output/alevin/raw_cb_frequency.txt", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "whitelist_txt", "format": "txt", "label": "${tool.name} on ${on_string}: whitelist", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output/alevin/whitelist.txt", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "auxiliar_files", "format": "tgz", "label": "${tool.name} on ${on_string}: auxiliar info files", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "aux_info.tar.gz", "edam_format": "format_2333", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "salmon_quant_log", "format": "txt", "label": "${tool.name} on ${on_string}: Salmon log file", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output/logs/salmon_quant.log", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "cmd_info", "format": "json", "label": "${tool.name} on ${on_string}: command info (JSON)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output/cmd_info.json", "edam_format": "format_3464", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "flenDist_txt", "format": "txt", "label": "${tool.name} on ${on_string}: observed fragment length distribution", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output/libParams/flenDist.txt", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "bfh_txt", "format": "txt", "label": "${tool.name} on ${on_string}: full CB-EC-UMI-count data-structure", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output/alevin/bfh.txt", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "quants_mean_mat", "format": "gz", "label": "${tool.name} on ${on_string}: count matrix mean file", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output/alevin/quants_mean_mat.gz", "edam_format": "format_2333", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "quants_var_mat", "format": "gz", "label": "${tool.name} on ${on_string}: count matrix variance file", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output/alevin/quants_var_mat.gz", "edam_format": "format_2333", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "quants_boot_rows_txt", "format": "txt", "label": "${tool.name} on ${on_string}: bootstraps rows", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output/alevin/quants_boot_rows.txt", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}], "panel_section_id": "single-cell", "panel_section_name": "Single-cell", "form_style": "regular"}