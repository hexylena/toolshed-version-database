{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/bgruening/cp_measure_image_quality/cp_measure_image_quality/3.1.9", "name": "MeasureImageQuality", "version": "3.1.9", "description": "measure features that indicate image quality", "labels": [], "edam_operations": [], "edam_topics": [], "hidden": "", "is_workflow_compatible": true, "xrefs": [{"value": "CellProfiler", "reftype": "bio.tools"}], "tool_shed_repository": {"name": "cp_measure_image_quality", "owner": "bgruening", "changeset_revision": "e972e07c7845", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "DataToolParameter", "name": "input_pipeline", "argument": null, "type": "data", "label": "Select the input CellProfiler pipeline", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["data"], "edam": {"edam_formats": ["format_1915"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "TextToolParameter", "name": "calc_for_images", "argument": null, "type": "text", "label": "Calculate metrics for which images?", "help": "Image names are separated by comma and correspond to the values in the section NameAndType of the 'Starting module' tool.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "All loaded images", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "include_rescaling_value", "argument": null, "type": "select", "label": "Include the image rescaling value?", "help": "Select 'Yes' to add the image\u2019s rescaling value as a quality control metric. This value is recorded only for images loaded using the Input modules. This is useful in confirming that all images are rescaled by the same value, given that some acquisition device vendors may output this value differently. ", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "Yes", "options": [["Yes", "Yes", false], ["No", "No", false]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "con_calc_blur_metrics", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "Yes", "inputs": [{"model_class": "Repeat", "name": "rpt_blur_measurements", "type": "repeat", "title": "new scale", "help": null, "default": 1, "min": 1, "max": "__Infinity__", "inputs": [{"model_class": "IntegerToolParameter", "name": "blur_measurements", "argument": null, "type": "integer", "label": "Spatial scale for blur measurements", "help": "Enter an integer for the window size N, in units of pixels. The LocalFocusScore is measured within an N \u00d7 N pixel window applied to the image, and the Correlation of a pixel is measured with respect to its neighbors N pixels away.                            A higher number for the window size N measures larger patterns of image blur whereas smaller numbers measure more localized patterns of blur. We suggest selecting a window size that is on the order of the feature of interest (e.g., the object diameter). You can measure these metrics for multiple window sizes by selecting additional scales for each image.", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "20", "area": false, "datalist": []}]}]}, {"model_class": "ConditionalWhen", "value": "No", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "calc_blur_metrics", "argument": null, "type": "select", "label": "Calculate blur metrics?", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "No", "options": [["Yes", "Yes", false], ["No", "No", true]], "display": "radio", "multiple": false, "textable": false}}, {"model_class": "SelectToolParameter", "name": "calc_intensity_metrics", "argument": null, "type": "select", "label": "Calculate intensity metrics?", "help": "Select 'Yes' to calculate image-based intensity measures, namely the mean, maximum, minimum, standard deviation and median absolute deviation of pixel intensities. These measures are identical to those calculated by MeasureImageIntensity.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "Yes", "options": [["Yes", "Yes", false], ["No", "No", false]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "calc_saturation_metrics", "argument": null, "type": "select", "label": "Calculate saturation metrics", "help": "Select 'Yes' to calculate the saturation metrics PercentMaximal and PercentMinimal, i.e., the percentage of pixels at the upper or lower limit of each individual image.                For this calculation, the hard limits of 0 and 1 are not used because images often have undergone some kind of transformation such that no pixels ever reach the absolute maximum or minimum of the image format. Given the noise typical in images, both these measures should be a low percentage but if the images were saturated during imaging, a higher than usual PercentMaximal will be observed, and if there are no objects, the PercentMinimal value will increase.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "Yes", "options": [["Yes", "Yes", false], ["No", "No", false]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "con_calc_threshold", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "Yes", "inputs": [{"model_class": "Conditional", "name": "con_use_all_methods", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "Yes", "inputs": []}, {"model_class": "ConditionalWhen", "value": "No", "inputs": [{"model_class": "Repeat", "name": "rpt_threshold_method", "type": "repeat", "title": "new threshold method", "help": null, "default": 1, "min": 1, "max": "__Infinity__", "inputs": [{"model_class": "Conditional", "name": "con_threshold_methods", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "Otsu", "inputs": [{"model_class": "SelectToolParameter", "name": "otsu_weighted_entropy", "argument": null, "type": "select", "label": "Minimize the weighted variance or the entropy?", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "Weighted variance", "options": [["Weighted variance", "Weighted variance", false], ["Entropy", "Entropy", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "con_threshold_classes", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "Three classes", "inputs": [{"model_class": "SelectToolParameter", "name": "pixel_foreground_or_background", "argument": null, "type": "select", "label": "Assign pixels in the middle intensity class to the foreground or the background?", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "Foreground", "options": [["Foreground", "Foreground", false], ["Background", "Background", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "Two classes", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "threshold_classes", "argument": null, "type": "select", "label": "Two-class or three-class thresholding?", "help": "Select Two classes if the grayscale levels are readily distinguishable into foreground (i.e., objects) and background.                         Select Three classes if there is a middle set of grayscale levels that belongs to neither the foreground nor background.                        For example, three-class thresholding may be useful for images in which you have nuclear staining along with a low-intensity non-specific cell staining.                         Where two-class thresholding might incorrectly assign this intermediate staining to the nuclei objects, three-class thresholding allows you to assign it to the foreground or background as desired.                         However, in extreme cases where either there are almost no objects or the entire field of view is covered with objects, three-class thresholding may perform worse than two-class.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "Two classes", "options": [["Two classes", "Two classes", false], ["Three classes", "Three classes", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "MoG", "inputs": [{"model_class": "FloatToolParameter", "name": "mog_fraction_cover", "argument": null, "type": "float", "label": "Typical fraction of the image covered by objects", "help": "", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.1", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "Background", "inputs": []}, {"model_class": "ConditionalWhen", "value": "RobustBackground", "inputs": []}, {"model_class": "ConditionalWhen", "value": "RidlerCalvard", "inputs": []}, {"model_class": "ConditionalWhen", "value": "Kapur", "inputs": []}, {"model_class": "ConditionalWhen", "value": "MCT", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "select_threshold_method", "argument": null, "type": "select", "label": "Select a thresholding method", "help": "This setting allows you to apply automatic thresholding methods used in the Identify modules.                                    Only the global methods are applied. For more help on thresholding, see the Identify modules.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "Otsu", "options": [["Otsu", "Otsu", false], ["MoG", "MoG", false], ["Background", "Background", false], ["Robust background", "RobustBackground", false], ["Ridler Calvard", "RidlerCalvard", false], ["Kapur", "Kapur", false], ["MCT", "MCT", false]], "display": null, "multiple": false, "textable": false}}]}]}], "test_param": {"model_class": "SelectToolParameter", "name": "use_all_methods", "argument": null, "type": "select", "label": "Use all thresholding methods?", "help": "Select 'Yes' to calculate thresholds using all the available methods. Only the global methods are used. While most methods are straightfoward, some methods have additional parameters that require special handling:                            <br> - Otsu: Thresholds for all combinations of class number, minimization parameter and middle class assignment are computed.                            <br> - Mixture of Gaussians (MoG): Thresholds for image coverage fractions of 0.05, 0.25, 0.75 and 0.95 are computed.                            See the IdentifyPrimaryObjects module for more information on thresholding methods.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "Yes", "options": [["Yes", "Yes", false], ["No", "No", false]], "display": "radio", "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "No", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "calc_threshold", "argument": null, "type": "select", "label": "Calculate thresholds?", "help": "Automatically calculate a suggested threshold for each image. One indicator of image quality is that these threshold values lie within a typical range. Outlier images with high or low thresholds often contain artifacts.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "Yes", "options": [["Yes", "Yes", false], ["No", "No", false]], "display": "radio", "multiple": false, "textable": false}}], "outputs": [{"model_class": "ToolOutput", "name": "output_pipeline", "format": "txt", "label": "", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output.cppipe", "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}], "panel_section_id": "imaging", "panel_section_name": "Imaging", "form_style": "regular"}