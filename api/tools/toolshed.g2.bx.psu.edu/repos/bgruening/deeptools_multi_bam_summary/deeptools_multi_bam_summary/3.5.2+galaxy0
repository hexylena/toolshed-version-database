{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/bgruening/deeptools_multi_bam_summary/deeptools_multi_bam_summary/3.5.2+galaxy0", "name": "multiBamSummary", "version": "3.5.2+galaxy0", "description": "calculates average read coverages for a list of two or more BAM/CRAM files", "labels": [], "edam_operations": ["operation_0337", "operation_3435"], "edam_topics": ["topic_3169", "topic_0622"], "hidden": "", "is_workflow_compatible": true, "xrefs": [{"value": "deeptools", "reftype": "bio.tools"}], "tool_shed_repository": {"name": "deeptools_multi_bam_summary", "owner": "bgruening", "changeset_revision": "1fcb7adc39b8", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "Conditional", "name": "multibam_conditional", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "No", "inputs": [{"model_class": "DataToolParameter", "name": "bamfiles", "argument": "--bamfiles", "type": "data", "label": "BAM/CRAM file", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["bam", "cram"], "edam": {"edam_formats": ["format_2572", "format_3462"], "edam_data": ["data_0863", "data_0863"]}, "multiple": true, "min": 2, "max": null, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "Yes", "inputs": [{"model_class": "Repeat", "name": "multibam_repeats", "type": "repeat", "title": "BAM/CRAM Files", "help": null, "default": 2, "min": 2, "max": "__Infinity__", "inputs": [{"model_class": "DataToolParameter", "name": "bamfiles", "argument": "--bamfiles", "type": "data", "label": "BAM/CRAM file", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["bam", "cram"], "edam": {"edam_formats": ["format_2572", "format_3462"], "edam_data": ["data_0863", "data_0863"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}]}], "test_param": {"model_class": "SelectToolParameter", "name": "orderMatters", "argument": null, "type": "select", "label": "Sample order matters", "help": "By default, the order of samples given to the program is dependent on their order in your history. If the order of the samples is vital to you, select Yes below.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "No", "options": [["No", "No", true], ["Yes", "Yes", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "custom_sample_labels_conditional", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "No", "inputs": []}, {"model_class": "ConditionalWhen", "value": "Yes", "inputs": [{"model_class": "TextToolParameter", "name": "labels", "argument": "--labels", "type": "text", "label": "Sample Labels", "help": "Labels, separated by a space. If your labels themselves contain spaces then please enclose them in quotes (e.g., \"sample 1\" \"sample 2\")", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "custom_labels_select", "argument": null, "type": "select", "label": "Would you like custom sample labels?", "help": "By default, the names of the samples in your history are used.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "No", "options": [["No, use sample names in the history", "No", true], ["Yes, I want to specify new labels", "Yes", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "mode", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "bins", "inputs": [{"model_class": "IntegerToolParameter", "name": "binSize", "argument": null, "type": "integer", "label": "Bin size in bp", "help": "Length in bases of the window used to sample the genome. (--binSize)", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "10000", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "distanceBetweenBins", "argument": "--distanceBetweenBins", "type": "integer", "label": "Distance between bins", "help": "By default, multiBamSummary considers consecutive bins of                 the specified 'Bin size'. However, to reduce the                 computation time, a larger distance between bins can                 be given. Larger distances result in fewer bins being                 considered.", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "BED-file", "inputs": [{"model_class": "DataToolParameter", "name": "region_file", "argument": null, "type": "data", "label": "Region file in BED or INTERVAL format", "help": "Coverage is computed for the number of reads that overlap such regions.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["bed", "gtf"], "edam": {"edam_formats": ["format_3003", "format_2306"], "edam_data": ["data_3002", "data_1255"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}], "test_param": {"model_class": "SelectToolParameter", "name": "modeOpt", "argument": null, "type": "select", "label": "Choose computation mode", "help": "In the bins mode, the coverage is computed for equally                     sized bins. \\nIn BED file mode, a list of genomic regions                     in BED or INTERVAL format has to be given. For each region                     in the BED file, the number of overlapping reads from each BAM file is counted.                     ", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "bins", "options": [["Bins", "bins", true], ["Limit calculation to certain regions (BED file)", "BED-file", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "TextToolParameter", "name": "region", "argument": "--region", "type": "text", "label": "Region of the genome to limit the operation to", "help": "This is useful when testing parameters to reduce the time required. The format is chr:start:end, for example \"chr10\" or \"chr10:456700:891000\".", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}, {"model_class": "Conditional", "name": "advancedOpt", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "no", "inputs": []}, {"model_class": "ConditionalWhen", "value": "yes", "inputs": [{"model_class": "Conditional", "name": "doExtendCustom", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "no", "inputs": []}, {"model_class": "ConditionalWhen", "value": "yes", "inputs": []}, {"model_class": "ConditionalWhen", "value": "custom", "inputs": [{"model_class": "IntegerToolParameter", "name": "extendReadsValue", "argument": null, "type": "integer", "label": "Extend reads to the given average fragment size", "help": "Extend all reads to this length", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "300", "area": false, "datalist": []}]}], "test_param": {"model_class": "SelectToolParameter", "name": "doExtend", "argument": null, "type": "select", "label": "Extend reads to the given average fragment size.", "help": "If selected : Single-end reads and singletons are extended to match the given length and Paired-end reads are extended to match the fragment size.                      By default *each* read mate is extended.                      This can be modified using the SAM flags (see --samFlagInclude and --samFlagExclude options) to keep only the first or the second mate.                      Unmated reads, mate reads that map to different chromosomes or too far apart are extended to the given value.                      Reads are only extended if --extendReads is set to a value greater than the read length. *NOTE*: For spliced-read data, this option is not                      recommended as it will extend reads over skipped regions, e.g. introns in RNA-seq data.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "no", "options": [["No extension. The default value and most typically appropriate.", "no", true], ["Paired-end extension. Suitable only for paired-end datasets.", "yes", false], ["A custom length, which will be applied to ALL reads.", "custom", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "BooleanToolParameter", "name": "ignoreDuplicates", "argument": "--ignoreDuplicates", "type": "boolean", "label": "Ignore duplicates", "help": "If set, reads that have the same orientation and start position will be considered only once. If reads are paired, the mate position also has to coincide to ignore a read.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--ignoreDuplicates", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "centerReads", "argument": "--centerReads", "type": "boolean", "label": "Center regions with respect to the fragment length", "help": "For paired-end data the fragment is defined by the bounds of the reads. For single-end data the bounds are defined by the read and the user-definable fragment/extension length. This option is useful to get a sharper signal around enriched regions.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--centerReads", "falsevalue": ""}, {"model_class": "IntegerToolParameter", "name": "minMappingQuality", "argument": "--minMappingQuality", "type": "integer", "label": "Minimum mapping quality", "help": "If set, only reads with a mapping quality score at least this high are considered.", "refresh_on_change": false, "min": 0, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "1", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "samFlagInclude", "argument": "--samFlagInclude", "type": "integer", "label": "Include reads based on the SAM flag", "help": "For example, to get only reads that are the first mate use a flag of 64. This is useful to count properly paired reads only once, otherwise the second mate will be also considered for the coverage.", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "samFlagExclude", "argument": "--samFlagExclude", "type": "integer", "label": "Exclude reads based on the SAM flag", "help": "For example, to get only reads that map to the forward strand, use --samFlagExclude 16, where 16 is the SAM flag for reads that map to the reverse strand.", "refresh_on_change": false, "min": null, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "minFragmentLength", "argument": "--minFragmentLength", "type": "integer", "label": "Minimum fragment length for inclusion.", "help": "This is primarily useful in things like ATACseq, where one would like to look specifically at mono- or di-nucleosome fragments.", "refresh_on_change": false, "min": 0, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "maxFragmentLength", "argument": "--maxFragmentLength", "type": "integer", "label": "Maximum fragment length for inclusion.", "help": "A value of 0 (the default) is equivalent to no maximum.", "refresh_on_change": false, "min": 0, "max": null, "optional": true, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "metagene", "argument": "--metagene", "type": "boolean", "label": "Use a metagene model", "help": "If set and a BED12 or GTF file or files is used to provide regions, only exons will be used. This is convenient for looking at coverage over mature mRNA transcripts or similar uses where introns should be ignored.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--metagene", "falsevalue": ""}, {"model_class": "TextToolParameter", "name": "transcriptID", "argument": "--transcriptID", "type": "text", "label": "transcript designator", "help": "When a GTF file is used to provide regions, only entries with this value as their feature (column 3) will be processed as transcripts. Default: transcript", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "transcript", "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "exonID", "argument": "--exonID", "type": "text", "label": "exon designator", "help": "When a GTF file is used to provide regions, only entries with this value as their feature (column 3) will be processed as exons. CDS would be another common value for this. Default: exon", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "exon", "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "transcript_id_designator", "argument": "--transcript_id_designator", "type": "text", "label": "transcriptID key designator", "help": "Each region has an ID (e.g., ACTB) assigned to it, which for BED files is either column 4 (if it exists)                   or the interval bounds. For GTF files this is instead stored in the last column as a key:value pair (e.g.,                   as 'transcript_id ACTB', for a key of transcript_id and a value of ACTB). In some cases it can be                   convenient to use a different identifier. To do so, set this to the desired key. Default: transcript_id", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "transcript_id", "area": false, "datalist": []}, {"model_class": "DataToolParameter", "name": "blackListFileName", "argument": "--blackListFileName", "type": "data", "label": "Blacklisted regions in BED/GTF format", "help": "One or more files containing regions to exclude from the analysis", "refresh_on_change": true, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["bed", "gtf"], "edam": {"edam_formats": ["format_3003", "format_2306"], "edam_data": ["data_3002", "data_1255"]}, "multiple": true, "min": 0, "max": null, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}], "test_param": {"model_class": "SelectToolParameter", "name": "showAdvancedOpt", "argument": null, "type": "select", "label": "Show advanced options", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "no", "options": [["no", "no", true], ["yes", "yes", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "BooleanToolParameter", "name": "outRawCounts", "argument": "--outRawCounts", "type": "boolean", "label": "Save raw counts (coverages) to file", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}, {"model_class": "BooleanToolParameter", "name": "scalingFactors", "argument": "--scalingFactors", "type": "boolean", "label": "Save scaling factors", "help": "Scaling factors calculated as in DESeq2 and made directly compatible with bamCoverage.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}], "outputs": [{"model_class": "ToolOutput", "name": "outFile", "format": "deeptools_coverage_matrix", "label": "${tool.name} on ${on_string}: correlation matrix", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_2333", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "outFileRawCounts", "format": "tabular", "label": "${tool.name} on ${on_string}: bin counts", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_3475", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "scalingFactorsFile", "format": "tabular", "label": "${tool.name} on ${on_string}: scaling factors", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_3475", "edam_data": "data_0006", "discover_datasets": []}], "panel_section_id": "deeptools", "panel_section_name": "deepTools", "form_style": "regular"}