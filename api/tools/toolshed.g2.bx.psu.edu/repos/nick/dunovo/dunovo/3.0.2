{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/nick/dunovo/dunovo/3.0.2", "name": "Du Novo: Make consensus reads", "version": "3.0.2", "description": "from duplex sequencing alignments", "labels": [], "edam_operations": [], "edam_topics": [], "hidden": "", "is_workflow_compatible": true, "xrefs": [], "tool_shed_repository": {"name": "dunovo", "owner": "nick", "changeset_revision": "0f8e0dc73d1d", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "DataToolParameter", "name": "input", "argument": null, "type": "data", "label": "Aligned input reads", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["tabular"], "edam": {"edam_formats": ["format_3475"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "IntegerToolParameter", "name": "min_reads", "argument": null, "type": "integer", "label": "Minimum reads for a consensus", "help": "This many reads are necessary to form a single-strand consensus sequence. Families smaller than this will be skipped and no consensus (single or duplex) will be produced.", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "3", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "cons_thres", "argument": null, "type": "float", "label": "Consensus % threshold", "help": "Each consensus base must be present in more than this fraction of the reads, or \"N\" will be used instead.", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.7", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "min_cons_reads", "argument": null, "type": "integer", "label": "Minimum number of reads for a consensus base.", "help": "Each consensus base must be present in more than this absolute number of reads, or \"N\" will be used instead. The \"Consensus % threshold\" sets a threshold based on the number of reads in the family, while this threshold is a fixed, absolute number. If both are used, the consensus base must pass both requirements.", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "qual_thres", "argument": null, "type": "integer", "label": "Minimum base quality", "help": "Bases with a PHRED score less than this will not be counted in the consensus making.", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "25", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "qual_format", "argument": null, "type": "select", "label": "Input quality score format", "help": "Format of the FASTQ files of the raw reads. Solexa should also work for Illumina 1.3+ and 1.5+, and Sanger should work for Illumina 1.8+", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "sanger", "options": [["Sanger (PHRED 0 = \"!\")", "sanger", true], ["Solexa (PHRED 0 = \"@\")", "solexa", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "out_format", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "fastq", "inputs": [{"model_class": "IntegerToolParameter", "name": "qual", "argument": null, "type": "integer", "label": "Output PHRED score", "help": "There is currently no way to output a meaningful quality score for consensus bases. You'll have to specify an artificial one, which will be given to every base. A good value is 40, the maximum score normally output by sequencers. This means the bases won't be inadvertently filtered out by some downstream tool.", "refresh_on_change": false, "min": 0, "max": 93, "optional": false, "hidden": false, "is_dynamic": false, "value": "40", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "fasta", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "type", "argument": null, "type": "select", "label": "Output format", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "fasta", "options": [["FASTA", "fasta", true], ["FASTQ", "fastq", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "BooleanToolParameter", "name": "keep_sscs", "argument": null, "type": "boolean", "label": "Output single-strand consensus sequences as well", "help": "", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": ""}, {"model_class": "BooleanToolParameter", "name": "phone", "argument": null, "type": "boolean", "label": "Send usage data", "help": "Report helpful usage data to the developer, to better understand the use cases and performance of the tool. The only data which will be recorded is the name and version of the tool, the size of the input data, the number of processes used, the time and memory taken to process it, and the IP address of the machine running it. Also, if the tool fails, it will report the name of the exception thrown and the line of code it occurred in. The parameters and input/output dataset names are not sent. All the reporting and recording code is available at https://github.com/NickSto/ET.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "--phone-home", "falsevalue": ""}, {"model_class": "Section", "name": "advanced", "type": "section", "title": "Advanced Options", "help": null, "expanded": false, "inputs": [{"model_class": "SelectToolParameter", "name": "aligner", "argument": null, "type": "select", "label": "Pairwise sequence aligner", "help": "Which pairwise alignment library to use. \"BioPython\" uses BioPython's PairwiseAligner and a substitution matrix built by Bioconductor's Biostrings package. \"swalign\" is a custom Smith-Waterman implementation by Nicolaus Lance Hepler. It is deprecated and kept only for backward compatibility.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "biopython", "options": [["BioPython", "biopython", false], ["swalign", "swalign", false]], "display": null, "multiple": false, "textable": false}]}], "outputs": [{"model_class": "ToolOutput", "name": "dcs1", "format": "data", "label": "$tool.name on $on_string (mate 1)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_1915", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "dcs2", "format": "data", "label": "$tool.name on $on_string (mate 2)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_1915", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "sscs1", "format": "data", "label": "$tool.name on $on_string (SSCS mate 1)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_1915", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}, {"model_class": "ToolOutput", "name": "sscs2", "format": "data", "label": "$tool.name on $on_string (SSCS mate 2)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_1915", "edam_data": "data_0006", "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": null, "visible": false, "assign_primary_output": false, "directory": null, "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "primary_DATASET_ID_(?P<designation>[^_]+)_(?P<visible>[^_]+)_(?P<ext>[^_]+)(_(?P<dbkey>[^_]+))?", "sort_by": "filename"}]}], "panel_section_id": "du_novo", "panel_section_name": "Du Novo", "form_style": "regular"}