{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/recetox/bioconductor_scp/bioconductor_scp/1.16.0+galaxy0", "name": "bioconductor-scp", "version": "1.16.0+galaxy0", "description": "single cell proteomics data analysis workflow", "labels": [], "edam_operations": [], "edam_topics": [], "hidden": "", "is_workflow_compatible": true, "xrefs": [{"value": "scp", "reftype": "bio.tools"}], "tool_shed_repository": {"name": "bioconductor_scp", "owner": "recetox", "changeset_revision": "cd2f3a280463", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "DataToolParameter", "name": "input_data", "argument": null, "type": "data", "label": "Input evidence table", "help": "Input file is the evidence.txt table from MaxQuant", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["tabular"], "edam": {"edam_formats": ["format_3475"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "DataToolParameter", "name": "input_annotations", "argument": null, "type": "data", "label": "Sample annotations table", "help": "A data table specifying metadata; sample annotations.", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["tabular"], "edam": {"edam_formats": ["format_3475"], "edam_data": ["data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "ColumnListParameter", "name": "runcol", "argument": null, "type": "data_column", "label": "Which column specifies the run identifier and batch name?", "help": "Column to specify both the run identifier and batch name, has to be present in both tables.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": null, "options": [], "display": null, "multiple": false, "textable": false, "data_ref": "input_data", "numerical": false}, {"model_class": "BooleanToolParameter", "name": "remove_empty_columns", "argument": null, "type": "boolean", "label": "Remove empty columns?", "help": "Whether the empty columns should be removed.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": true, "truevalue": "TRUE", "falsevalue": "FALSE"}, {"model_class": "BooleanToolParameter", "name": "generate_QC_plots", "argument": null, "type": "boolean", "label": "Generate QC plots?", "help": "Whether to generate quality-control plots (distribution of the average SCR, distribution of median CV and median intensities).", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": true, "truevalue": "TRUE", "falsevalue": "FALSE"}, {"model_class": "Section", "name": "filtering_data", "type": "section", "title": "Data Filtering", "help": null, "expanded": true, "inputs": [{"model_class": "BooleanToolParameter", "name": "filter_reverse", "argument": null, "type": "boolean", "label": "Filter reverse sequences?", "help": "Whether to filter the proteins labelled as 'reverse'.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": true, "truevalue": "TRUE", "falsevalue": "FALSE"}, {"model_class": "BooleanToolParameter", "name": "filter_contaminants", "argument": null, "type": "boolean", "label": "Filter potential contaminants?", "help": "Whether to filter the proteins labelled as 'potential contaminant'.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": true, "truevalue": "TRUE", "falsevalue": "FALSE"}, {"model_class": "FloatToolParameter", "name": "PIF_threshold", "argument": null, "type": "float", "label": "Parental ion fraction (PIF) threshold", "help": "The threshold for parental ion fraction (PIF).", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.8", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "minimum_features", "argument": null, "type": "integer", "label": "Minimum number of PSMs per assay required", "help": "What is the minimum number of peptide-to-spectrum matches per assay to keep the assay?", "help_format": "html", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "150", "area": false, "datalist": []}, {"model_class": "IntegerToolParameter", "name": "count_cell_carrier", "argument": null, "type": "integer", "label": "Number of cells in the carrier channel", "help": "What is the number of cells in the carrier channel?", "help_format": "html", "refresh_on_change": false, "min": 0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "200", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "single_cells", "argument": null, "type": "select", "label": "Single-cell channels present in the experiment", "help": "What are the single-cell channels present in the experiment? At least one channel must be selected!", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": null, "options": [], "display": null, "multiple": true, "textable": false}, {"model_class": "FloatToolParameter", "name": "SCR_threshold", "argument": null, "type": "float", "label": "Mean SCR threshold", "help": "Mean sample-to-carrier (SCR) threshold. 0.1 corresponds to 10%.", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.1", "area": false, "datalist": []}, {"model_class": "SelectToolParameter", "name": "qvalue_level", "argument": null, "type": "select", "label": "Filter based on PSM, peptide or protein-level q-values?", "help": "Whether to perform the q-value computation and filtration on the PSM, peptide or protein level.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "Leading.razor.protein", "options": [["PSM", "PSM", false], ["peptide", "Modified.sequence", false], ["protein", "Leading.razor.protein", true]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "FloatToolParameter", "name": "qvalue_threshold", "argument": null, "type": "float", "label": "q-value threshold", "help": "Q-value threshold.", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.01", "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "divide_reference", "argument": null, "type": "boolean", "label": "Compute relative reporter ion intensities?", "help": "Whether to compute the relative reporter ion intensities by dividing the single-cell intensities by the reference channel. Specific for SCOPE2 data.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": true, "truevalue": "TRUE", "falsevalue": "FALSE"}]}, {"model_class": "Section", "name": "peptide_aggregation", "type": "section", "title": "Aggregation to peptides", "help": null, "expanded": true, "inputs": [{"model_class": "SelectToolParameter", "name": "aggregation_peptides", "argument": null, "type": "select", "label": "Which function to use for the aggregation?", "help": "How to aggregate PSMs to peptides?", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "matrixStats::colMedians", "options": [["Aggregate using the median of each sample (colMedians)", "matrixStats::colMedians", true], ["Fit an additive model (two way decomposition) using Tukey's median polish procedure (medianPolish)", "MsCoreUtils::medianPolish", false], ["Aggregate using the mean of each sample (colMeans)", "BiocGenerics::colMeans", false], ["Aggregate using the sum of each sample (colSums)", "BiocGenerics::colSums", false], ["Calculate a robust aggregation using MASS::rlm() (robustSummary)", "MsCoreUtils::robustSummary", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "ColumnListParameter", "name": "column_aggregation_peptides", "argument": null, "type": "data_column", "label": "Which column should be used for the PSM to peptide aggregation?", "help": "Which column should be used for the PSM to peptide aggregation. Modified.sequence is recommended.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": null, "options": [], "display": null, "multiple": false, "textable": false, "data_ref": "input_data", "numerical": false}]}, {"model_class": "Section", "name": "peptide_filtering", "type": "section", "title": "Peptide filtering", "help": null, "expanded": true, "inputs": [{"model_class": "SelectToolParameter", "name": "samples_to_keep", "argument": null, "type": "select", "label": "Which samples to keep?", "help": "Which samples to keep? We recommend filtering out Carrier and Unused channels at this step.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": null, "options": [], "display": null, "multiple": true, "textable": false}, {"model_class": "Conditional", "name": "filter_median_intensity", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": [{"model_class": "FloatToolParameter", "name": "median_intensity_threshold", "argument": null, "type": "float", "label": "Median intensity threshold", "help": "Threshold for relative median intensity filtering.", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.4", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "no", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "cut_median_intensity", "argument": null, "type": "select", "label": "Filter based on median relative intensity?", "help": "Whether to filter based on median intensity.", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "no", "options": [["no", "no", true], ["yes", "yes", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "Conditional", "name": "filter_median_CV", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": [{"model_class": "IntegerToolParameter", "name": "minimum_peptides_CV", "argument": null, "type": "integer", "label": "How many peptides per protein are required to compute CV?", "help": "Minimum number of peptides per protein required for the CV computation.", "help_format": "html", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "5", "area": false, "datalist": []}, {"model_class": "FloatToolParameter", "name": "median_CV_threshold", "argument": null, "type": "float", "label": "Median CV threshold", "help": "Threshold for median CV filtering.", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": 1.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "0.65", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "no", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "cut_median_CV", "argument": null, "type": "select", "label": "Filter based on median CV?", "help": "Whether to filter based on median CV.", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "yes", "options": [["yes", "yes", true], ["no", "no", false]], "display": null, "multiple": false, "textable": false}}, {"model_class": "BooleanToolParameter", "name": "remove_blank", "argument": null, "type": "boolean", "label": "Remove blank sample?", "help": "Whether to remove the blank sample. If it has been already removed, set to 'false'.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": true, "truevalue": "TRUE", "falsevalue": "FALSE"}]}, {"model_class": "Section", "name": "peptide_processing", "type": "section", "title": "Processing peptide data", "help": null, "expanded": true, "inputs": [{"model_class": "Conditional", "name": "normalization_method", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "simple", "inputs": [{"model_class": "SelectToolParameter", "name": "normalize_simple_method", "argument": null, "type": "select", "label": "Normalization method", "help": "Which normalization method to choose?", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "center.mean", "options": [["Center sample intensities by subtracting the respective column means (center.mean)", "center.mean", true], ["Divide each feature's intensity by the sum of the feature (sum)", "sum", false], ["Divide each feature's intensity by the maximum of the feature (max)", "max", false], ["Center sample intensities by subtracting the respective column medians (center.median)", "center.median", false], ["Divide by the column means (div.mean)", "div.mean", false], ["Divide by the column medians (div.median)", "div.median", false], ["Center all samples so that they all match the grand median by subtracting the respective columns medians differences to the grand median (diff.median)", "diff.median", false], ["Quantile normalization (quantiles)", "quantiles", false], ["Variance-stabilizing normalization (vsn)", "vsn", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "advanced", "inputs": [{"model_class": "SelectToolParameter", "name": "normalize_columns", "argument": null, "type": "select", "label": "Normalization method columns", "help": "Which normalization method to choose for columns?", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "matrixStats::colMedians", "options": [["colMeans", "matrixStats::colMeans2", false], ["colMedians", "matrixStats::colMedians", true]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "normalize_rows", "argument": null, "type": "select", "label": "Normalization method rows", "help": "Which normalization method to choose for rows?", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "matrixStats::rowMeans2", "options": [["rowMeans", "matrixStats::rowMeans2", true], ["rowMedians", "matrixStats::rowMedians", false]], "display": "radio", "multiple": false, "textable": false}]}], "test_param": {"model_class": "SelectToolParameter", "name": "choose_normalization", "argument": null, "type": "select", "label": "How to perform normalization?", "help": "How to normalize peptide intensities?", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "advanced", "options": [["Normalize columns or normalize rows (one only).", "simple", false], ["Firstly normalize columns, then rows.", "advanced", true]], "display": "radio", "multiple": false, "textable": false}}, {"model_class": "SelectToolParameter", "name": "base", "argument": null, "type": "select", "label": "Log transformation base", "help": "Which base to use for the log transformation?", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "2", "options": [["2", "2", true], ["10", "10", false]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "remove_missing_peptides", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": [{"model_class": "FloatToolParameter", "name": "pNA_peptides", "argument": null, "type": "float", "label": "% of NA values filtering threshold", "help": "If peptide has this % of missing values, it will be removed.", "help_format": "html", "refresh_on_change": false, "min": 0.0, "max": 100.0, "optional": false, "hidden": false, "is_dynamic": false, "value": "99.0", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "no", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "remove_peptides", "argument": null, "type": "select", "label": "Remove peptides with high missing rate?", "help": "Whether to remove the peptides with the high missing rate.", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "yes", "options": [["yes", "yes", true], ["no", "no", false]], "display": null, "multiple": false, "textable": false}}]}, {"model_class": "Section", "name": "protein_aggregation", "type": "section", "title": "Aggregation to proteins", "help": null, "expanded": true, "inputs": [{"model_class": "SelectToolParameter", "name": "aggregation_proteins", "argument": null, "type": "select", "label": "Which function to use for the aggregation?", "help": "How to aggregate peptides to proteins?", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "matrixStats::colMedians", "options": [["Aggregate using the median of each sample (colMedians)", "matrixStats::colMedians", true], ["Fit an additive model (two way decomposition) using Tukey's median polish procedure (medianPolish)", "MsCoreUtils::medianPolish", false], ["Aggregate using the mean of each sample (colMeans)", "BiocGenerics::colMeans", false], ["Aggregate using the sum of each sample (colSums)", "BiocGenerics::colSums", false], ["Calculate a robust aggregation using MASS::rlm() (robustSummary)", "MsCoreUtils::robustSummary", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "ColumnListParameter", "name": "column_aggregation_proteins", "argument": null, "type": "data_column", "label": "Which column should be used for the peptide to protein aggregation?", "help": "Which column should be used for the peptide to protein aggregation. Leading.razor.protein is recommended.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": null, "options": [], "display": null, "multiple": false, "textable": false, "data_ref": "input_data", "numerical": false}]}, {"model_class": "Section", "name": "protein_processing", "type": "section", "title": "Processing protein data", "help": null, "expanded": true, "inputs": [{"model_class": "Conditional", "name": "normalization_method_protein", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "simple_prot", "inputs": [{"model_class": "SelectToolParameter", "name": "normalize_simple_method_prot", "argument": null, "type": "select", "label": "Normalization method", "help": "Which normalization method to choose?", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "center.mean", "options": [["Center sample intensities by subtracting the respective column means (center.mean)", "center.mean", true], ["Divide each feature's intensity by the sum of the feature (sum)", "sum", false], ["Divide each feature's intensity by the maximum of the feature (max)", "max", false], ["Center sample intensities by subtracting the respective column medians (center.median)", "center.median", false], ["Divide by the column means (div.mean)", "div.mean", false], ["Divide by the column medians (div.median)", "div.median", false], ["Center all samples so that they all match the grand median by subtracting the respective columns medians differences to the grand median (diff.median)", "diff.median", false], ["Quantile normalization (quantiles)", "quantiles", false], ["Variance-stabilizing normalization (vsn)", "vsn", false]], "display": null, "multiple": false, "textable": false}]}, {"model_class": "ConditionalWhen", "value": "advanced_prot", "inputs": [{"model_class": "SelectToolParameter", "name": "normalize_columns_prot", "argument": null, "type": "select", "label": "Normalization method columns", "help": "Which normalization method to choose for columns?", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "matrixStats::colMedians", "options": [["colMeans", "matrixStats::colMeans2", false], ["colMedians", "matrixStats::colMedians", true]], "display": "radio", "multiple": false, "textable": false}, {"model_class": "SelectToolParameter", "name": "normalize_rows_prot", "argument": null, "type": "select", "label": "Normalization method rows", "help": "Which normalization method to choose for rows?", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "matrixStats::rowMeans2", "options": [["rowMeans", "matrixStats::rowMeans2", true], ["rowMedians", "matrixStats::rowMedians", false]], "display": "radio", "multiple": false, "textable": false}]}], "test_param": {"model_class": "SelectToolParameter", "name": "choose_normalization_protein", "argument": null, "type": "select", "label": "How to perform normalization?", "help": "How to normalize protein intensities?", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "advanced_prot", "options": [["Normalize columns or normalize rows (one only).", "simple_prot", false], ["Firstly normalize columns, then rows.", "advanced_prot", true]], "display": "radio", "multiple": false, "textable": false}}, {"model_class": "IntegerToolParameter", "name": "impute_k", "argument": null, "type": "integer", "label": "Which k to use for the kNN imputation?", "help": "Number of k-nearest neighbours to consider for kNN imputation.", "help_format": "html", "refresh_on_change": false, "min": 1, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "3", "area": false, "datalist": []}]}, {"model_class": "Section", "name": "batch_correction", "type": "section", "title": "Batch correction", "help": null, "expanded": true, "inputs": [{"model_class": "Conditional", "name": "select_batch_correction", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "combat", "inputs": [{"model_class": "ColumnListParameter", "name": "batch_col", "argument": null, "type": "data_column", "label": "Which column is the technical variable to be corrected?", "help": "Column to specify both the run identifier and batch name, has to be present in both tables.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": null, "options": [], "display": null, "multiple": false, "textable": false, "data_ref": "input_annotations", "numerical": false}]}, {"model_class": "ConditionalWhen", "value": "removebatcheffect", "inputs": [{"model_class": "ColumnListParameter", "name": "preserve_col", "argument": null, "type": "data_column", "label": "Which column is the variable to be preserved?", "help": "Which column is the variable to be preserved.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": null, "options": [], "display": null, "multiple": false, "textable": false, "data_ref": "input_annotations", "numerical": false}, {"model_class": "ColumnListParameter", "name": "batch_col", "argument": null, "type": "data_column", "label": "Which column is the technical variable to be corrected?", "help": "Column to specify both the run identifier and batch name, has to be present in both tables.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": null, "options": [], "display": null, "multiple": false, "textable": false, "data_ref": "input_annotations", "numerical": false}]}], "test_param": {"model_class": "SelectToolParameter", "name": "batch_correction_method", "argument": null, "type": "select", "label": "Which batch correction method to use?", "help": "Which method to use for correcting the batch effect?", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "combat", "options": [["ComBat()", "combat", true], ["removeBatchEffect()", "removebatcheffect", false]], "display": "radio", "multiple": false, "textable": false}}]}, {"model_class": "Section", "name": "dimensionality_reduction", "type": "section", "title": "Dimensionality reduction", "help": null, "expanded": true, "inputs": [{"model_class": "Conditional", "name": "PCA_computation", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": [{"model_class": "IntegerToolParameter", "name": "ncomponents_PCA", "argument": null, "type": "integer", "label": "Number of components", "help": "Number of components in the PCA analysis.", "help_format": "html", "refresh_on_change": false, "min": 2, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "5", "area": false, "datalist": []}, {"model_class": "ColumnListParameter", "name": "pca_coloring", "argument": null, "type": "data_column", "label": "What column to color the PCA according to?", "help": "Based on which column from the sampleAnnotation file should be the PCA colored.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": true, "value": null, "options": [], "display": null, "multiple": false, "textable": false, "data_ref": "input_annotations", "numerical": false}, {"model_class": "Conditional", "name": "UMAP_computation", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "yes", "inputs": [{"model_class": "IntegerToolParameter", "name": "ncomponents_UMAP", "argument": null, "type": "integer", "label": "Number of components", "help": "Number of components in the UMAP analysis.", "help_format": "html", "refresh_on_change": false, "min": 2, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "2", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "no", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "run_UMAP", "argument": null, "type": "select", "label": "Run UMAP on PCA data?", "help": "Run the UMAP on PCA-reduced data?", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "yes", "options": [["yes", "yes", true], ["no", "no", false]], "display": "radio", "multiple": false, "textable": false}}]}, {"model_class": "ConditionalWhen", "value": "no", "inputs": []}], "test_param": {"model_class": "SelectToolParameter", "name": "run_PCA", "argument": null, "type": "select", "label": "Run principal component analysis (PCA)?", "help": "Run the PCA on imputed batch-corrected protein intensities?", "help_format": "html", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": "yes", "options": [["yes", "yes", true], ["no", "no", false]], "display": "radio", "multiple": false, "textable": false}}]}, {"model_class": "Section", "name": "data_export", "type": "section", "title": "Export data", "help": null, "expanded": true, "inputs": [{"model_class": "BooleanToolParameter", "name": "export_tables", "argument": null, "type": "boolean", "label": "Export intermediate results", "help": "Whether only the final result table (log2 transformed, normalized, imputed, batch-corrected data) should be exported or all intermediate results.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "TRUE", "falsevalue": "FALSE"}, {"model_class": "BooleanToolParameter", "name": "export_RData", "argument": null, "type": "boolean", "label": "Export scp object as .rds", "help": "Whether to export the scp object as rds file format.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "TRUE", "falsevalue": "FALSE"}, {"model_class": "BooleanToolParameter", "name": "export_R_script", "argument": null, "type": "boolean", "label": "Export the R script to reproduce the analysis", "help": "Check this box to export the script executed in the Galaxy tool as an R file to be able to reproduce the same processing offline. Not that in this case, the file paths need to be altered and all the dependencies have to be managed manually.", "help_format": "html", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "TRUE", "falsevalue": "FALSE"}]}], "outputs": [{"model_class": "ToolOutputCollection", "name": "intermediate_outputs", "format": null, "label": "Intermediate outputs", "hidden": false, "output_type": "collection", "default_format": "tabular", "default_format_source": null, "default_metadata_source": null, "inherit_format": false, "inherit_metadata": false, "structure": {"collection_type": "list", "collection_type_source": null, "collection_type_from_rules": null, "structured_like": null, "discover_datasets": [{"discover_via": "pattern", "format": "tabular", "visible": false, "assign_primary_output": false, "directory": "outputs", "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "(?P<name>.*)\\.(?P<ext>[^\\.]+)?"}]}}, {"model_class": "ToolOutputCollection", "name": "plots", "format": null, "label": "Plots", "hidden": false, "output_type": "collection", "default_format": "data", "default_format_source": null, "default_metadata_source": null, "inherit_format": false, "inherit_metadata": false, "structure": {"collection_type": "list", "collection_type_source": null, "collection_type_from_rules": null, "structured_like": null, "discover_datasets": [{"discover_via": "pattern", "format": null, "visible": false, "assign_primary_output": false, "directory": "plots", "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "(?P<name>.*)\\.(?P<ext>[^\\.]+)?"}]}}, {"model_class": "ToolOutput", "name": "Processed_data", "format": "tabular", "label": "Batch-corrected protein levels", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_3475", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "scp_object", "format": "rds", "label": "scp object as .rds", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_2333", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "script", "format": "txt", "label": "R script", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": null, "edam_format": "format_2330", "edam_data": "data_0006", "discover_datasets": []}], "panel_section_id": "proteomics", "panel_section_name": "Proteomics", "form_style": "regular"}