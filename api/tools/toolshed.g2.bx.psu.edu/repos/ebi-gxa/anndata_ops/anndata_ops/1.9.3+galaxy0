{"model_class": "Tool", "id": "toolshed.g2.bx.psu.edu/repos/ebi-gxa/anndata_ops/anndata_ops/1.9.3+galaxy0", "name": "AnnData Operations", "version": "1.9.3+galaxy0", "description": "is a Swiss army knife for AnnData files", "labels": [], "edam_operations": [], "edam_topics": [], "hidden": "", "is_workflow_compatible": true, "xrefs": [], "tool_shed_repository": {"name": "anndata_ops", "owner": "ebi-gxa", "changeset_revision": "a4774b7b2e85", "tool_shed": "toolshed.g2.bx.psu.edu"}, "inputs": [{"model_class": "DataToolParameter", "name": "input_obj_file", "argument": "input-object-file", "type": "data", "label": "Input object in hdf5 AnnData format", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["h5", "h5ad"], "edam": {"edam_formats": ["format_3590", "format_3590"], "edam_data": ["data_0006", "data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "SelectToolParameter", "name": "output_format", "argument": "--output-format", "type": "select", "label": "Format of output object", "help": "Legacy 'h5' datatypes are useful for interacting with older tools. Choosing 'No packaged matrix output' is useful for cases where auxiliary files are generated (like in marker genes). Do not use when there are no other output files, as the tool will generate no output in Galaxy then.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": "anndata_h5ad", "options": [["AnnData format", "anndata_h5ad", true], ["AnnData format (h5 for older versions)", "anndata", false], ["No packaged matrix output (useful for cases where auxiliary files are generated)", "no_matrix_output", false]], "display": null, "multiple": false, "textable": false}, {"model_class": "Conditional", "name": "swap_layer_to_x", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "true", "inputs": [{"model_class": "TextToolParameter", "name": "layer", "argument": null, "type": "text", "label": "Name of layer to swap to X", "help": "This layer name needs to exist within ad.layers or this will fail.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "", "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "new_name_x", "argument": null, "type": "text", "label": "Name of the new slot for X within layers", "help": "Leave empty and the old X will be lost.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "old_X", "area": false, "datalist": []}]}, {"model_class": "ConditionalWhen", "value": "false", "inputs": []}], "test_param": {"model_class": "BooleanToolParameter", "name": "default", "argument": null, "type": "boolean", "label": "Swap layer to X", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}}, {"model_class": "Conditional", "name": "add_cell_metadata", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "true", "inputs": [{"model_class": "DataToolParameter", "name": "file", "argument": null, "type": "data", "label": "Cell metadata with headers", "help": "A tabular file with headers, where the first column contains cell barcodes. Will be merged via a left join, so not all cells in the obs need to be in the metadata. Currently duplicated column headers will be ignored and the originals in the AnnData will be kept.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["tsv", "tabular"], "edam": {"edam_formats": ["format_3475", "format_3475"], "edam_data": ["data_0006", "data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "false", "inputs": []}], "test_param": {"model_class": "BooleanToolParameter", "name": "default", "argument": null, "type": "boolean", "label": "Merge additional cell metadata", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}}, {"model_class": "BooleanToolParameter", "name": "copy_adata_to_raw", "argument": null, "type": "boolean", "label": "Copy AnnData to .raw", "help": "If activated, it will do 'adata.raw = adata'", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}, {"model_class": "Repeat", "name": "modifications", "type": "repeat", "title": "Change field names in AnnData observations", "help": null, "default": 0, "min": 0, "max": "__Infinity__", "inputs": [{"model_class": "TextToolParameter", "name": "from_obs", "argument": null, "type": "text", "label": "Original name", "help": "Name in observations that you want to change", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "to_obs", "argument": null, "type": "text", "label": "New name", "help": "New name in observations that you want to change to", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "keep_original", "argument": null, "type": "boolean", "label": "Keep original", "help": "If activated, it will also keep the original column", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}, {"model_class": "BooleanToolParameter", "name": "make_unique", "argument": null, "type": "boolean", "label": "Make values in the field unique", "help": "If activated, it will make the values in the column unique by appending '_dnum' on each repeated value.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}]}, {"model_class": "Repeat", "name": "var_modifications", "type": "repeat", "title": "Change field names in AnnData var", "help": null, "default": 0, "min": 0, "max": "__Infinity__", "inputs": [{"model_class": "TextToolParameter", "name": "from_var", "argument": null, "type": "text", "label": "Original name", "help": "Name in var that you want to change", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "to_var", "argument": null, "type": "text", "label": "New name", "help": "New name in var that you want to change", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "keep_original", "argument": null, "type": "boolean", "label": "Keep original", "help": "If activated, it will also keep the original column", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}, {"model_class": "BooleanToolParameter", "name": "make_unique", "argument": null, "type": "boolean", "label": "Make values in the field unique", "help": "If activated, it will make the values in the column unique by appending '_dnum' on each repeated value.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}]}, {"model_class": "TextToolParameter", "name": "gene_symbols_field", "argument": null, "type": "text", "label": "Gene symbols field in AnnData", "help": "Field inside var.params where the gene symbols are, normally 'index' or 'gene_symbols'", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": "index", "area": false, "datalist": []}, {"model_class": "Repeat", "name": "gene_flags", "type": "repeat", "title": "Flag genes that start with these names", "help": null, "default": 0, "min": 0, "max": "__Infinity__", "inputs": [{"model_class": "TextToolParameter", "name": "startswith", "argument": null, "type": "text", "label": "Starts with", "help": "Text that you expect the genes to be flagged to start with, such as 'MT-' for mito genes", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "flag", "argument": null, "type": "text", "label": "Var name", "help": "Name of the column in var.names where this boolean flag is stored, for example 'mito' for mitochondrial genes.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}, {"model_class": "IntegerToolParameter", "name": "top_genes", "argument": null, "type": "integer", "label": "Number of top genes", "help": "to calculate percentage of the flagged genes in that number of top genes. Used by sc.pp.calculate_qc_metrics (integer).", "refresh_on_change": false, "min": null, "max": null, "optional": false, "hidden": false, "is_dynamic": false, "value": "50", "area": false, "datalist": []}, {"model_class": "TextToolParameter", "name": "field_unique", "argument": null, "type": "text", "label": "Field in var or obs to make unique", "help": "Field inside var or obs to be made unique by appending a suffix (useful for gene symbols in var). A new field will be added with the '_u' suffix. It happens after all the above operations.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "Conditional", "name": "copy_r", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "true", "inputs": [{"model_class": "DataToolParameter", "name": "r_source", "argument": null, "type": "data", "label": "AnnData object .X with to copy to .raw", "help": "Copies adata (subset to matching obs) from this AnnData object into the main input as .raw. Make sure to use an AnnData object containing all .obs in the main input.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["h5", "h5ad"], "edam": {"edam_formats": ["format_3590", "format_3590"], "edam_data": ["data_0006", "data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "false", "inputs": []}], "test_param": {"model_class": "BooleanToolParameter", "name": "default", "argument": null, "type": "boolean", "label": "Copy adata.X to adata.raw", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}}, {"model_class": "Conditional", "name": "copy_x", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "true", "inputs": [{"model_class": "Repeat", "name": "xlayers", "type": "repeat", "title": "Source objects for .X and paired destination layers in the main AnnData object", "help": "make sure to use AnnData objects that are compatible in terms of genes, cells and expression data.", "default": 1, "min": 1, "max": "__Infinity__", "inputs": [{"model_class": "DataToolParameter", "name": "x_source", "argument": null, "type": "data", "label": "AnnData objects with .X to copy", "help": "Extracts .X from these AnnData objects and merges them into the main input as layers. Make sure to use AnnData objects that are compatible in terms of genes, cells and expression data.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["h5", "h5ad"], "edam": {"edam_formats": ["format_3590", "format_3590"], "edam_data": ["data_0006", "data_0006"]}, "multiple": false, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}, {"model_class": "TextToolParameter", "name": "dest", "argument": null, "type": "text", "label": "Destination layer", "help": "", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}]}, {"model_class": "ConditionalWhen", "value": "false", "inputs": []}], "test_param": {"model_class": "BooleanToolParameter", "name": "default", "argument": null, "type": "boolean", "label": "Copy .X to layers", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}}, {"model_class": "Conditional", "name": "copy_l", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "true", "inputs": [{"model_class": "Repeat", "name": "layers", "type": "repeat", "title": "Layers from which matrices will be copied", "help": "will copy all layers in the given AnnData object to the main AnnData object. Make sure to use AnnData objects that are compatible in terms of genes, cells and expression data.", "default": 1, "min": 1, "max": "__Infinity__", "inputs": [{"model_class": "TextToolParameter", "name": "contains", "argument": null, "type": "text", "label": "Key contains", "help": "Keys to be copied need to contain the text set here.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}, {"model_class": "DataToolParameter", "name": "layer_sources", "argument": null, "type": "data", "label": "AnnData objects with layers to copy", "help": "Extracts layers from these AnnData objects and merges them into the main input. Make sure to use AnnData objects that are compatible in terms of genes, cells and expression data.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["h5", "h5ad"], "edam": {"edam_formats": ["format_3590", "format_3590"], "edam_data": ["data_0006", "data_0006"]}, "multiple": true, "min": null, "max": null, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "false", "inputs": []}], "test_param": {"model_class": "BooleanToolParameter", "name": "default", "argument": null, "type": "boolean", "label": "Copy layers", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}}, {"model_class": "Conditional", "name": "copy_o", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "true", "inputs": [{"model_class": "Repeat", "name": "obs_keys", "type": "repeat", "title": "Keys from obs to copy", "help": "will copy all obs keys in the given AnnData object to the main AnnData object. Make sure to use AnnData objects that are compatible in terms of genes, cells and expression data. You can use this to copy clusters. Uns elements with the same name will be also transferred.", "default": 1, "min": 1, "max": "__Infinity__", "inputs": [{"model_class": "TextToolParameter", "name": "contains", "argument": null, "type": "text", "label": "Key contains", "help": "Keys to be copied need to contain the text set here.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}, {"model_class": "DataToolParameter", "name": "obs_sources", "argument": null, "type": "data", "label": "AnnData objects with obs to copy", "help": "Extracts obs (such as clusters) from these AnnData objects and merges them into the main input. Make sure to use AnnData objects that are compatible in terms of genes, cells and expression data.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["h5", "h5ad"], "edam": {"edam_formats": ["format_3590", "format_3590"], "edam_data": ["data_0006", "data_0006"]}, "multiple": true, "min": null, "max": null, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "false", "inputs": []}], "test_param": {"model_class": "BooleanToolParameter", "name": "default", "argument": null, "type": "boolean", "label": "Copy observations (such as clusters)", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}}, {"model_class": "Conditional", "name": "copy_e", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "true", "inputs": [{"model_class": "Repeat", "name": "embedding_keys", "type": "repeat", "title": "Keys from embeddings to copy", "help": "will copy all embedding keys in the given AnnData object to the main AnnData object. Make sure to use AnnData objects that are compatible in terms of genes, cells and expression data. You can use this to copy tSNE, UMAP, etc.", "default": 1, "min": 1, "max": "__Infinity__", "inputs": [{"model_class": "TextToolParameter", "name": "contains", "argument": null, "type": "text", "label": "Key contains", "help": "Keys to be copied need to contain the text set here.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}, {"model_class": "DataToolParameter", "name": "embedding_sources", "argument": null, "type": "data", "label": "AnnData objects with embeddings to copy", "help": "Extracts embeddings (tSNE, UMAP) from these AnnData objects and merges them into the main input. Make sure to use AnnData objects that are compatible in terms of genes, cells and expression data.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["h5", "h5ad"], "edam": {"edam_formats": ["format_3590", "format_3590"], "edam_data": ["data_0006", "data_0006"]}, "multiple": true, "min": null, "max": null, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "false", "inputs": []}], "test_param": {"model_class": "BooleanToolParameter", "name": "default", "argument": null, "type": "boolean", "label": "Copy embeddings (such as UMAP, tSNE)", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}}, {"model_class": "Conditional", "name": "copy_u", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "true", "inputs": [{"model_class": "Repeat", "name": "uns_keys", "type": "repeat", "title": "Keys from uns to copy", "help": "will copy all uns keys in the given AnnData object to the main AnnData object. Make sure to use AnnData objects that are compatible in terms of genes, cells and expression data. You can use this to copy rank_genes_groups for instance.", "default": 1, "min": 1, "max": "__Infinity__", "inputs": [{"model_class": "TextToolParameter", "name": "contains", "argument": null, "type": "text", "label": "Key contains", "help": "Keys to be copied need to contain the text set here.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}]}, {"model_class": "DataToolParameter", "name": "uns_sources", "argument": null, "type": "data", "label": "AnnData objects with uns to copy", "help": "Extracts uns (such as ranked_genes_groups) from these AnnData objects and merges them into the main input. Make sure to use AnnData objects that are compatible in terms of genes, cells and expression data.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": null, "extensions": ["h5", "h5ad"], "edam": {"edam_formats": ["format_3590", "format_3590"], "edam_data": ["data_0006", "data_0006"]}, "multiple": true, "min": null, "max": null, "options": {"dce": [], "ldda": [], "hda": [], "hdca": []}, "tag": null}]}, {"model_class": "ConditionalWhen", "value": "false", "inputs": []}], "test_param": {"model_class": "BooleanToolParameter", "name": "default", "argument": null, "type": "boolean", "label": "Copy uns", "help": "", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}}, {"model_class": "BooleanToolParameter", "name": "sanitize_varm", "argument": null, "type": "boolean", "label": "Sanitise any null raw.varm objects if any", "help": "This might be relevant for interfacing with newer versions of AnnData, that might complain if .raw includes a varm null object.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}, {"model_class": "Conditional", "name": "split_on_obs", "type": "conditional", "cases": [{"model_class": "ConditionalWhen", "value": "true", "inputs": [{"model_class": "TextToolParameter", "name": "key", "argument": null, "type": "text", "label": "Obs key to split on", "help": "The obs key to split on. For example, if you want to split on cluster annotation, you can use the key 'louvain'.", "refresh_on_change": false, "optional": true, "hidden": false, "is_dynamic": false, "value": null, "area": false, "datalist": []}, {"model_class": "BooleanToolParameter", "name": "output_main", "argument": null, "type": "boolean", "label": "Output main AnnData object", "help": "If checked, the main AnnData object will be outputted as well.", "refresh_on_change": false, "optional": false, "hidden": false, "is_dynamic": false, "value": true, "truevalue": "true", "falsevalue": "false"}]}, {"model_class": "ConditionalWhen", "value": "false", "inputs": []}], "test_param": {"model_class": "BooleanToolParameter", "name": "default", "argument": null, "type": "boolean", "label": "Split on obs", "help": "Split the AnnData object into multiple AnnData objects based on the values of a given obs key. This is useful for example to split a dataset based on a cluster annotation.", "refresh_on_change": true, "optional": false, "hidden": false, "is_dynamic": false, "value": false, "truevalue": "true", "falsevalue": "false"}}], "outputs": [{"model_class": "ToolOutputCollection", "name": "output_h5ad_split", "format": null, "label": "${tool.name} on ${on_string}: @DESCRIPTION@ AnnData split", "hidden": false, "output_type": "collection", "default_format": "data", "default_format_source": null, "default_metadata_source": null, "inherit_format": false, "inherit_metadata": false, "structure": {"collection_type": "list", "collection_type_source": null, "collection_type_from_rules": null, "structured_like": null, "discover_datasets": [{"discover_via": "pattern", "dbkey": "__input__", "format": "h5ad", "visible": true, "assign_primary_output": false, "directory": "output_split", "recurse": false, "match_relative_path": false, "sort_key": "filename", "sort_comp": "lexical", "pattern": "(?P<designation>.+)\\.h5", "sort_by": "filename"}]}}, {"model_class": "ToolOutput", "name": "output_h5ad", "format": "h5ad", "label": "${tool.name} on ${on_string}: @DESCRIPTION@ AnnData", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output.h5", "edam_format": "format_3590", "edam_data": "data_0006", "discover_datasets": []}, {"model_class": "ToolOutput", "name": "output_h5", "format": "h5", "label": "${tool.name} on ${on_string}: @DESCRIPTION@ AnnData (h5)", "hidden": false, "output_type": "data", "format_source": null, "default_identifier_source": "None", "metadata_source": "", "parent": null, "count": 1, "from_work_dir": "output.h5", "edam_format": "format_3590", "edam_data": "data_0006", "discover_datasets": []}], "panel_section_id": "hca_sc_scanpy_tools", "panel_section_name": "HCA-Scanpy", "form_style": "regular"}