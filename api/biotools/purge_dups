{"name":"purge_dups","description":"Identifying and removing haplotypic duplication in primary genome assemblies | haplotypic duplication identification tool | scripts/pd_config.py: script to generate a configuration file used by run_purge_dups.py | purge haplotigs and overlaps in an assembly based on read depth | Given a primary assembly pri_asm and an alternative assembly hap_asm (optional, if you have one), follow the steps shown below to build your own purge_dups pipeline, steps with same number can be run simultaneously. Among all the steps, although step 4 is optional, we highly recommend our users to do so, because assemblers may produce overrepresented seqeuences. In such a case, The final step 4 can be applied to remove those seqeuences","homepage":"https://github.com/dfguan/purge_dups","biotoolsID":"purge_dups","biotoolsCURIE":"biotools:purge_dups","version":[],"otherID":[],"relation":[],"function":[{"operation":[{"uri":"http://edamontology.org/operation_0525","term":"Genome assembly"},{"uri":"http://edamontology.org/operation_3798","term":"Read binning"},{"uri":"http://edamontology.org/operation_3216","term":"Scaffolding"}],"input":[],"output":[],"note":null,"cmd":null}],"toolType":[],"topic":[{"uri":"http://edamontology.org/topic_0196","term":"Sequence assembly"}],"operatingSystem":[],"language":["Python","C"],"license":"MIT","collectionID":[],"maturity":null,"cost":null,"accessibility":null,"elixirPlatform":[],"elixirNode":[],"elixirCommunity":[],"link":[],"download":[],"documentation":[],"publication":[{"doi":"10.1101/729962","pmid":null,"pmcid":null,"type":[],"version":null,"note":null,"metadata":null}],"credit":[],"community":null,"owner":"Pub2Tools","additionDate":"2019-11-14T18:08:10Z","lastUpdate":"2020-12-10T12:43:10Z","editPermission":{"type":"public","authors":[]},"validated":1,"homepage_status":0,"elixir_badge":0,"confidence_flag":"tool"}